<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lightfish&#39;s Blog</title>
  
  <subtitle>是非天天有，不听自然无</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.lightfisher.cn/"/>
  <updated>2019-03-10T06:20:02.670Z</updated>
  <id>http://www.lightfisher.cn/</id>
  
  <author>
    <name>Lightfish</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sublime text3配置nodejs运行环境</title>
    <link href="http://www.lightfisher.cn/2019/03/10/blime-text3%E9%85%8D%E7%BD%AEnodejs%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/"/>
    <id>http://www.lightfisher.cn/2019/03/10/blime-text3配置nodejs运行环境/</id>
    <published>2019-03-10T06:05:21.000Z</published>
    <updated>2019-03-10T06:20:02.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sublime-text3配置nodejs运行环境"><a href="#sublime-text3配置nodejs运行环境" class="headerlink" title="sublime text3配置nodejs运行环境"></a>sublime text3配置nodejs运行环境</h1><blockquote><p>最近几日也是在学习nodejs，一般我都是在用vi来进行简单的编写。但是编写复杂点到的就会可能因为不当心的代码输入错误而报错，所以我就来尝试一下用Sublime Text3来进行编写。所以这篇博客也是记录下sublime下的nodejs运行环境的配置。</p></blockquote><a id="more"></a><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><blockquote><p>首先当然是安装nodejs咯，由于这个过于简单就略过了~~</p></blockquote><h2 id="下载nodejs插件并安装"><a href="#下载nodejs插件并安装" class="headerlink" title="下载nodejs插件并安装"></a>下载nodejs插件并安装</h2><blockquote><p>1.下载地址： <a href="https://github.com/tanepiper/SublimeText-Nodejs" target="_blank" rel="noopener">https://github.com/tanepiper/SublimeText-Nodejs</a></p></blockquote><p><img src="http://qnpic.top\sublime_nodejs%5C4.jpg" alt="imh"></p><blockquote><p>2.下载下来后改名为nodejs</p></blockquote><p><img src="http://qnpic.top\sublime_nodejs%5C3.jpg" alt="ig"></p><blockquote><p>3.复制到sublime的插件目录下</p></blockquote><p><img src="http://qnpic.top\sublime_nodejs%5C1.jpg" alt="imh"></p><p><img src="http://qnpic.top\sublime_nodejs%5C2.jpg" alt="img"></p><p><img src="http://qnpic.top\sublime_nodejs%5CGIF.gif" alt="img"></p><blockquote><p>4.然后就是在修改其目录下的配置文件，用sublime打开Nodejs.sublime-build 和 Nodejs.sublime-settings 两个文件</p></blockquote><ul><li>1) 修改Nodejs.sublime-build如下图</li></ul><p><img src="http://qnpic.top\sublime_nodejs%5C5.jpg" alt="img"></p><ul><li>2) 更改Nodejs.sublime-settings文件如下图(记得转义)：</li></ul><p><img src="http://qnpic.top\sublime_nodejs%5C7.jpg" alt="img"></p><blockquote><p>5.nodejs的配置到这里就基本结束了，你就可以选择nodejs的运行环境进行运行nodejs文件，这里我就来简单演示一个demo</p></blockquote><p><img src="http://qnpic.top\sublime_nodejs%5C8.jpg" alt="img"></p><p><img src="http://qnpic.top\sublime_nodejs%5C6.jpg" alt="img"></p><p><br><br><br>So,Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;sublime-text3配置nodejs运行环境&quot;&gt;&lt;a href=&quot;#sublime-text3配置nodejs运行环境&quot; class=&quot;headerlink&quot; title=&quot;sublime text3配置nodejs运行环境&quot;&gt;&lt;/a&gt;sublime text3配置nodejs运行环境&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;最近几日也是在学习nodejs，一般我都是在用vi来进行简单的编写。但是编写复杂点到的就会可能因为不当心的代码输入错误而报错，所以我就来尝试一下用Sublime Text3来进行编写。所以这篇博客也是记录下sublime下的nodejs运行环境的配置。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>KOD 开源免费的私人网盘创建</title>
    <link href="http://www.lightfisher.cn/2019/03/07/KOD-%E5%BC%80%E6%BA%90%E5%85%8D%E8%B4%B9%E7%9A%84%E7%A7%81%E4%BA%BA%E7%BD%91%E7%9B%98%E5%88%9B%E5%BB%BA/"/>
    <id>http://www.lightfisher.cn/2019/03/07/KOD-开源免费的私人网盘创建/</id>
    <published>2019-03-07T12:10:00.000Z</published>
    <updated>2019-03-07T13:15:25.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KOD-开源免费的私人网盘"><a href="#KOD-开源免费的私人网盘" class="headerlink" title="KOD 开源免费的私人网盘"></a>KOD 开源免费的私人网盘</h1><blockquote><p>如今百度云网盘限速严重，而Dropbox、Google Drive 必须科学上网(emm,我记得我写过一篇科学上网，现在好像不行了)，似乎除了 Office365 (<code>OneDrive</code>)和 <code>MEGA</code> 外也没太多选择了，所以很多人开始用电脑/NAS/VPS作为服务器自建私人网盘。所以今天我就来安利一款——KODExplorer。</p></blockquote><a id="more"></a><blockquote><p>KODExplorer 可道云 (原名芒果云) 是一款基于 PHP 开发的开源 WEB 网页版轻量级私有云网盘工具。准确点来说，它是一款功能丰富的在线文件管理系统！或者叫“云桌面”会更加合适。随时随地在线连接，访问自己的网盘内容，而且除了「文件管理」功能以外，KODExplorer 还提供了一个“云桌面”，让你在浏览器上也能体验到与 Windows 相似的系统，并且该桌面还集成网页版微信、ProcessOn 在线制图工具、石墨文档、百度脑图等在线应用。好处有点多，我这里就不多说了，如果你想知道具体的好处，可以看这篇博客——<a href="https://www.iplaysoft.com/kodexplorer.html" target="_blank" rel="noopener">可道云</a>,你也可以来这个官方演示demo查看——<a href="http://demo.kodcloud.com/index.php" target="_blank" rel="noopener">demo演示</a>,密码/账户都是demo。现在就来简单记录下如何搭建</p></blockquote><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><blockquote><p>1.我记得之前我安利过一款，<code>000webhost 免费虚拟云主机</code>,你可以查看这篇博客——<a href="/2019/02/09/000webhost-免费虚拟云主机/">000webhost 免费虚拟云主机</a>,空间算是免费里面算好的了，存储一下简单的文档和文件还是绰绰有余。</p></blockquote><blockquote><p>2.至于如何注册账户和申请到云空间，我这里就不多说了，我介绍这个就已经阐述过，你可以看这篇博客——<a href="/2019/02/09/000webhost-免费虚拟云主机/">000webhost 免费虚拟云主机</a></p></blockquote><blockquote><p>3.你可以直接去这里进行下载——<a href="https://kodcloud.com/download/" target="_blank" rel="noopener">官方下载页面</a>. 或者点击这里下载——<a href="https://pan.baidu.com/s/14_NFLAfVOctOsjOTLoaHMQ" target="_blank" rel="noopener">百度云盘</a> 提取码: eepk 或者这个<a href="https://www.lanzous.com/i3cnt0h" target="_blank" rel="noopener">蓝奏云下载</a> 或者这个<a href="http://lightfish.cf/index.php?share/file&amp;user=1&amp;sid=u7P4fdFI" target="_blank" rel="noopener">可道云下载</a>  （随便调一个就行）</p></blockquote><p><img src="http://qnpic.top\kod%5C1.jpg" alt="img"></p><blockquote><p>4.这里的话我就默认都已经注册到了自己的云主机，我就直接演示(但是由于我写这篇博客的时候，这个网站好像我请求太多了，叫我等会时间再注册一个云主机，所以我就没去搭建一个云主机，在我的原来这个上演示，具体步骤知道就行)。言归正传，看了我上篇的那个简单介绍这个虚拟云主机的博客，相信都已经会上传文件，其实只需要讲下载的文件放到网站更目录下就行了，我这里就简单介绍一下压缩文件的上传</p></blockquote><p><img src="http://qnpic.top\kod%5C2.jpg" alt="img"></p><blockquote><p>5.右键单击压缩文件，进行解压</p></blockquote><p><img src="http://qnpic.top\kod%5C3.jpg" alt="img"></p><blockquote><p>6.如果出现下图就说明可以正常解压，如果不是就刷新、</p></blockquote><p><img src="http://qnpic.top\kod%5C4.jpg" alt="img"></p><blockquote><p>7.解压后就是就是加压出来个压缩文件，这个时候你其实也是可以进行访问的只需要在你的网址后面加上这个文件夹的名字，但是问了好看，你就需要将这个文件夹里的文件移动到根目录下。选中这个文件夹下的所有文件点击下图的移动按钮(注意我这里只是演示全选，你的应该是解压出来的文件下的所有文件)</p></blockquote><p><img src="http://qnpic.top\kod%5C5.jpg" alt="img"></p><blockquote><p>8.选择移动到根目录</p></blockquote><p><img src="http://qnpic.top\kod%5C6.jpg" alt="img"></p><blockquote><p>9.这个时候就可以正常访问你的私人云盘了，第一次访问应该会叫你设置密码</p></blockquote><p><img src="http://qnpic.top\kod%5C7.jpg" alt="img"></p><blockquote><p>10.这次的博客也是基本到这里了，So</p></blockquote><p><br><br><br>Just have fun.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;KOD-开源免费的私人网盘&quot;&gt;&lt;a href=&quot;#KOD-开源免费的私人网盘&quot; class=&quot;headerlink&quot; title=&quot;KOD 开源免费的私人网盘&quot;&gt;&lt;/a&gt;KOD 开源免费的私人网盘&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;如今百度云网盘限速严重，而Dropbox、Google Drive 必须科学上网(emm,我记得我写过一篇科学上网，现在好像不行了)，似乎除了 Office365 (&lt;code&gt;OneDrive&lt;/code&gt;)和 &lt;code&gt;MEGA&lt;/code&gt; 外也没太多选择了，所以很多人开始用电脑/NAS/VPS作为服务器自建私人网盘。所以今天我就来安利一款——KODExplorer。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="干货" scheme="http://www.lightfisher.cn/categories/%E5%B9%B2%E8%B4%A7/"/>
    
    
      <category term="干货" scheme="http://www.lightfisher.cn/tags/%E5%B9%B2%E8%B4%A7/"/>
    
  </entry>
  
  <entry>
    <title>Socket.io 简易聊天室的创建</title>
    <link href="http://www.lightfisher.cn/2019/03/04/Socket-io-%E7%AE%80%E6%98%93%E8%81%8A%E5%A4%A9%E5%AE%A4%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
    <id>http://www.lightfisher.cn/2019/03/04/Socket-io-简易聊天室的创建/</id>
    <published>2019-03-04T08:18:21.000Z</published>
    <updated>2019-03-04T08:31:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Socket-io-开发简易聊天室"><a href="#Socket-io-开发简易聊天室" class="headerlink" title="Socket.io 开发简易聊天室"></a>Socket.io 开发简易聊天室</h1><blockquote><p>这几天可能因为开学有点迷茫，学习的方向有点糊涂了，就无聊学习了一下Socket.io。希望能够慢慢找回状态。哎~~~</p></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Socket.io 是一个用来实现实时双向通信的框架，其本质是基于 WebSocket 技术。所以我先来简单的聊聊WebSocket技术，这里就简单的举一个例子：</p></blockquote><ul><li><p>用户小A，打开了某个网站的充值界面，该界面上有一个付款的二维码。</p></li><li><p>当小A 用某宝的 APP 扫码付款之后，网页要自动跳转到付款成功的界面。最简单的方法就是网页每隔一段时间就请求一次服务器——“怎么样？那货付款没有？”，“怎么样？还没付吗？”，“怎么样？这次总该付了吧”。</p></li><li><p>当接收到服务端返回确认付款的标识后，页面再进行跳转。</p></li></ul><blockquote><p>这种定时对服务端发送 HTTP 请求的技术也被称为“轮询”。轮询的缺点也显而易见，短时间内的多次访问无疑会对服务器造成很大压力。</p></blockquote><blockquote><p>所以后来的人们发明一个方法——“长轮询”技术，这与短轮询的区别在于，每次客服端请求服务器后，服务器并不会立即返回“用户还未付款”的结果，而是一直将HTTP保持在挂起的状态，只有当用户付款后才会返回给客服端 “用户已付款”的结果。当然如果用户在规定的时间内没有付款还是会断开连接。相比短轮询，长轮询有一定的优势，但是这还不够好。直到HTML5里的WebSocket技术的诞生。</p></blockquote><blockquote><p><code>WebSocket</code>，即 Web 浏览器与 Web 服务器之间的全双工通信标准。最初 WebSocket 只是作为 HTML5 标准的一部分，而后来却逐渐变成了独立的协议标准。一旦浏览器与服务器建立起 WebSocket 协议的通信连接，之后所有的通信都依靠该协议进行。不论是服务器还是浏览器，任何一方都能向对方发送报文。通信过程中可相互发送 JSON、HTML或图片等任意格式的数据。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Socket-io-开发简易聊天室&quot;&gt;&lt;a href=&quot;#Socket-io-开发简易聊天室&quot; class=&quot;headerlink&quot; title=&quot;Socket.io 开发简易聊天室&quot;&gt;&lt;/a&gt;Socket.io 开发简易聊天室&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这几天可能因为开学有点迷茫，学习的方向有点糊涂了，就无聊学习了一下Socket.io。希望能够慢慢找回状态。哎~~~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux 服务器的一些命令行使用</title>
    <link href="http://www.lightfisher.cn/2019/02/26/linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.lightfisher.cn/2019/02/26/linux-服务器的一些命令行使用/</id>
    <published>2019-02-26T05:52:00.000Z</published>
    <updated>2019-02-26T05:57:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux-服务器"><a href="#linux-服务器" class="headerlink" title="linux 服务器"></a>linux 服务器</h1><blockquote><p>本篇博客用于记载一些linux的命令行。</p></blockquote><a id="more"></a><h2 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h2><blockquote><p>查看端口是否被占用</p></blockquote><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnp|<span class="keyword">grep</span> <span class="number">8000</span> <span class="comment">#后面接端口，如果被使用会显示</span></span><br></pre></td></tr></table></figure><blockquote><p>查看进程的详细信息</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ps</span> <span class="number">8000</span> <span class="comment"># 后面接端口</span></span><br></pre></td></tr></table></figure><blockquote><p>结束进程</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill <span class="number">-9</span> <span class="number">8000</span> # 后面是<span class="number">-9</span> 加端口号</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;linux-服务器&quot;&gt;&lt;a href=&quot;#linux-服务器&quot; class=&quot;headerlink&quot; title=&quot;linux 服务器&quot;&gt;&lt;/a&gt;linux 服务器&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本篇博客用于记载一些linux的命令行。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="linux" scheme="http://www.lightfisher.cn/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.lightfisher.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux 服务器安装Python3</title>
    <link href="http://www.lightfisher.cn/2019/02/26/Centos-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Python3/"/>
    <id>http://www.lightfisher.cn/2019/02/26/Centos-服务器安装Python3/</id>
    <published>2019-02-26T05:10:00.000Z</published>
    <updated>2019-02-26T05:57:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Centos-服务器安装Python3"><a href="#Centos-服务器安装Python3" class="headerlink" title="Centos 服务器安装Python3"></a>Centos 服务器安装Python3</h1><blockquote><p>最近也是想把我当Django项目部署到我的的服务器上，也是在安装Python3和其依赖项上面有点疑惑，今天就来简单的总结下，记录一下。</p></blockquote><a id="more"></a><h1 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h1><blockquote><p>在安装Python3之前，我们要分别安装Linux的 <code>wget</code> 工具、GCC编译器环境以及Python3使用的依赖组件、相关的安装指令如下：</p></blockquote><ul><li>1.安装Linux 的<code>wget</code>工具,用于网上下载文件</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> wget</span><br></pre></td></tr></table></figure><ul><li>2.GCC编译器环境，安装Python3时所需的编译环境</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yum -y insall gcc</span></span><br></pre></td></tr></table></figure><ul><li>3.Python3 使用的依赖组件</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y groupinstall <span class="string">"Development tools"</span></span><br><span class="line"></span><br><span class="line">yum -y <span class="keyword">install </span>zlib-devel <span class="keyword">bzip2-devel </span>openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></table></figure><h1 id="安装Python3"><a href="#安装Python3" class="headerlink" title="安装Python3"></a>安装Python3</h1><blockquote><p>完成上述安装之后，我们就可以开始安装Python3。我们使用wget指令在Python官网下载Python3.6的压缩包，在CentOS 7 系统输入下载指令</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">wget</span> <span class="string">"https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tgz"</span></span><br></pre></td></tr></table></figure><blockquote><p>下载完成之后，可以在当前路径下查看下载的内容。</p></blockquote><blockquote><p>下一步就是对压缩包进行解压，在当前压缩包目录下输入解压指令</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">Python-3</span><span class="selector-class">.6</span><span class="selector-class">.3</span><span class="selector-class">.tgz</span></span><br></pre></td></tr></table></figure><blockquote><p>解压完成后就会在当前路径下出现Python-3.6.3的文件夹，该文件就是我们需要的开发环境，里面包含着Python3.6版本所需要的组件。最后我们将Python3.6 编译到CentOS 7 系统中，编译指令如下</p></blockquote><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 进入该文件夹</span></span><br><span class="line">cd Python<span class="number">-3.6</span><span class="number">.3</span></span><br><span class="line"><span class="meta"># 依次输入以下指令</span></span><br><span class="line">sudo ./configure</span><br><span class="line"><span class="built_in">make</span></span><br><span class="line"><span class="built_in">make</span> install</span><br></pre></td></tr></table></figure><blockquote><p>编译完成我们就可以在CentOS系统中输入指令python3，即可进入python交互模式。</p></blockquote><p><br><br><br>So,Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Centos-服务器安装Python3&quot;&gt;&lt;a href=&quot;#Centos-服务器安装Python3&quot; class=&quot;headerlink&quot; title=&quot;Centos 服务器安装Python3&quot;&gt;&lt;/a&gt;Centos 服务器安装Python3&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;最近也是想把我当Django项目部署到我的的服务器上，也是在安装Python3和其依赖项上面有点疑惑，今天就来简单的总结下，记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.lightfisher.cn/categories/Python/"/>
    
      <category term="linux" scheme="http://www.lightfisher.cn/categories/Python/linux/"/>
    
    
      <category term="Python" scheme="http://www.lightfisher.cn/tags/Python/"/>
    
      <category term="linux" scheme="http://www.lightfisher.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>程序员面试算法设计</title>
    <link href="http://www.lightfisher.cn/2019/02/15/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    <id>http://www.lightfisher.cn/2019/02/15/程序员面试算法设计/</id>
    <published>2019-02-15T09:44:22.000Z</published>
    <updated>2019-02-15T09:59:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我也马上要进入实习准备阶段了，对于面试和实习可能没有经历过，所以有点茫然和不知所措。So,从今天2019.2.15起，我也要开始准备了，对程序员的基本算法进行一定的准备。对《Python程序员面试算法宝典》、《剑指offer》和《编程之美》进行系统的准备。我会用gitbook来进行修改记录，详情可以看我的书籍网址： <a href="http://lightbook.gq/" target="_blank" rel="noopener">http://lightbook.gq/</a> 加油~</p></blockquote><a id="more"></a><p><img src="http://qnpic.top/fight.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我也马上要进入实习准备阶段了，对于面试和实习可能没有经历过，所以有点茫然和不知所措。So,从今天2019.2.15起，我也要开始准备了，对程序员的基本算法进行一定的准备。对《Python程序员面试算法宝典》、《剑指offer》和《编程之美》进行系统的准备。我会用gitbook来进行修改记录，详情可以看我的书籍网址： &lt;a href=&quot;http://lightbook.gq/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://lightbook.gq/&lt;/a&gt; 加油~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Deepin 系统的安装</title>
    <link href="http://www.lightfisher.cn/2019/02/12/Deepin-%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://www.lightfisher.cn/2019/02/12/Deepin-系统的安装/</id>
    <published>2019-02-12T07:28:00.000Z</published>
    <updated>2019-02-12T08:00:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Deepin-linux操作系统的安装"><a href="#Deepin-linux操作系统的安装" class="headerlink" title="Deepin linux操作系统的安装"></a>Deepin linux操作系统的安装</h1><blockquote><p>今天也是很荣幸的收到了自己的U盘，就能把我这个U盘变成我的Deepin系统盘。这里我也是来简单的记录下我的安装过程。</p></blockquote><a id="more"></a><h2 id="下载系统文件"><a href="#下载系统文件" class="headerlink" title="下载系统文件"></a>下载系统文件</h2><blockquote><p>1.首先，我们先去官网对deepin桌面版的下载(记得是桌面版，反正我的是桌面版)，或者我这里提供我所安装的版本把百度云链接： <a href="https://pan.baidu.com/s/1hvjkLLgOAHMQMZU6fqEWoA" target="_blank" rel="noopener">https://pan.baidu.com/s/1hvjkLLgOAHMQMZU6fqEWoA</a> 提取码: w6x2 ，Or，去官网进行下载： <a href="https://www.deepin.org/download/" target="_blank" rel="noopener">https://www.deepin.org/download/</a> (里面提供了好几种下载方式，自己选一个)</p></blockquote><p><img src="http://qnpic.top\deepin_install%5C1.jpg" alt="img"></p><blockquote><p>在下载的过程中，你就可以对磁盘进行分区，用自带的分区工具就行。右键我的电脑进入管理界面,选中磁盘管理</p></blockquote><p><img src="http://qnpic.top\deepin_install%5C2.jpg" alt="img"></p><p><img src="http://qnpic.top\deepin_install%5C3.jpg" alt="img"></p><blockquote><p>选中你的一个盘右键<code>压缩卷</code>,修改大小，30000mb就够了，然后点击压缩</p></blockquote><p><img src="http://qnpic.top\deepin_install%5C4.jpg" alt="img"></p><blockquote><p>压缩后应该就会显示大约有29.3GB的未分配的空间，然后右键那个未分配的空间，选中新建简单卷，然后一路下一步就行了。</p></blockquote><p><img src="http://qnpic.top\deepin_install%5C5.jpg" alt="img"></p><blockquote><p>磁盘分区完了后，记住你分区的大小哦，后面的系统安装就安装在这个里面，别安装错了。。。</p></blockquote><blockquote><p>然后就是把你的U盘变成一个系统盘,用解压软件打开你下载的iso文件，解压出这个exe文件(可能deepin版本不一样，这个exe名称不一样)</p></blockquote><p><img src="http://qnpic.top\deepin_install%5C6.jpg" alt="img"></p><blockquote><p>然后双击这个exe文件打开，它会叫你选中你的镜像文件，和你的U盘，如果提示是否格式化你的U盘，推荐格式。然后等待完成</p></blockquote><p><img src="http://qnpic.top\deepin_install%5C7.jpg" alt="img"></p><blockquote><p>到这里这个U盘就成功得变成了deepin系统盘。然后你可以百度一下你的电脑的版本如何进入BIOS用U盘启动系统。</p></blockquote><p><br><br><br>后面我就不多bb了，用U盘启动后就是系统的安装等等了，蛮简单了。<br><br>So, Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Deepin-linux操作系统的安装&quot;&gt;&lt;a href=&quot;#Deepin-linux操作系统的安装&quot; class=&quot;headerlink&quot; title=&quot;Deepin linux操作系统的安装&quot;&gt;&lt;/a&gt;Deepin linux操作系统的安装&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;今天也是很荣幸的收到了自己的U盘，就能把我这个U盘变成我的Deepin系统盘。这里我也是来简单的记录下我的安装过程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="干货" scheme="http://www.lightfisher.cn/categories/%E5%B9%B2%E8%B4%A7/"/>
    
    
      <category term="干货" scheme="http://www.lightfisher.cn/tags/%E5%B9%B2%E8%B4%A7/"/>
    
  </entry>
  
  <entry>
    <title>免费邮箱使用和免费手机号验证码接收</title>
    <link href="http://www.lightfisher.cn/2019/02/10/%E5%85%8D%E8%B4%B9%E9%82%AE%E7%AE%B1%E4%BD%BF%E7%94%A8%E5%92%8C%E5%85%8D%E8%B4%B9%E6%89%8B%E6%9C%BA%E5%8F%B7%E9%AA%8C%E8%AF%81%E5%8F%B7%E6%8E%A5%E6%94%B6/"/>
    <id>http://www.lightfisher.cn/2019/02/10/免费邮箱使用和免费手机号验证号接收/</id>
    <published>2019-02-10T12:11:00.000Z</published>
    <updated>2019-02-10T13:02:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="免费邮箱使用和免费手机号验证码接收"><a href="#免费邮箱使用和免费手机号验证码接收" class="headerlink" title="免费邮箱使用和免费手机号验证码接收"></a>免费邮箱使用和免费手机号验证码接收</h1><blockquote><p>今天就来分享一下两个干货，免费邮箱使用和免费手机号验证码的接收。</p></blockquote><a id="more"></a><h1 id="免费邮箱"><a href="#免费邮箱" class="headerlink" title="免费邮箱"></a>免费邮箱</h1><blockquote><p>这里我先说明，下面网站可能需要科学上网，你可以参考这篇博客——<a href="/2019/01/06/上网/">科学上网</a></p></blockquote><blockquote><p>如果能科学上网了，这个网站就是这个： <a href="https://temp-mail.org/en/" target="_blank" rel="noopener">https://temp-mail.org/en/</a></p></blockquote><p><img src="http://qnpic.top\free_phone%5C1.jpg" alt="img"></p><blockquote><p>然后我就用这个邮箱用于我之后的免费手机验证码的接收</p></blockquote><h1 id="免费手机号验证码接收"><a href="#免费手机号验证码接收" class="headerlink" title="免费手机号验证码接收"></a>免费手机号验证码接收</h1><blockquote><p>获取手机号网址： <a href="https://smsreceivefree.com/" target="_blank" rel="noopener">https://smsreceivefree.com/</a></p></blockquote><p><img src="http://qnpic.top\free_phone%5C2.jpg" alt="img"></p><blockquote><p>输入你要注册的邮箱,点击<code>SIGN UP</code>(这里注意一下，每个邮箱使用时间有限制，十分钟，过了会刷新掉，SO，上下图可能有出入，但是步骤一样)</p></blockquote><p><img src="http://qnpic.top\free_phone%5C3.jpg" alt="img"></p><blockquote><p>回到之前的临时邮箱界面，当当，是不是就已经接收到了验证信息</p></blockquote><p><img src="http://qnpic.top\free_phone%5C6.jpg" alt="img"></p><blockquote><p>点击信息，完成验证</p></blockquote><p><img src="http://qnpic.top\free_phone%5C7.jpg" alt="img"></p><p><img src="http://qnpic.top\free_phone%5C8.jpg" alt="img"></p><blockquote><p>上图二就已经注册成功，你可以选择国家，任意选，我实例选择了USA</p></blockquote><p><img src="http://qnpic.top\free_phone%5C4.jpg" alt="img"></p><blockquote><p>上图下面的号码就是你可以使用的号码，你随机点击使用一个(<strong>究极注意</strong>:这里的号码是全球共享的，你<strong>不要</strong>用这些号码用于重要的用途，别犯法了)</p></blockquote><blockquote><p>我这里就随便点击一个，你也是能看到别人的使用日志</p></blockquote><p><img src="http://qnpic.top\free_phone%5C5.jpg" alt="img"></p><p><br><br><br>好了，这次的分享就简单到这里了，主要还是那个免费邮箱的使用，后面的免费手机号因为基本都是美国和加拿大，可能用到的地方不多，但是有机会还是可以使用的，So<br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;免费邮箱使用和免费手机号验证码接收&quot;&gt;&lt;a href=&quot;#免费邮箱使用和免费手机号验证码接收&quot; class=&quot;headerlink&quot; title=&quot;免费邮箱使用和免费手机号验证码接收&quot;&gt;&lt;/a&gt;免费邮箱使用和免费手机号验证码接收&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;今天就来分享一下两个干货，免费邮箱使用和免费手机号验证码的接收。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="干货" scheme="http://www.lightfisher.cn/categories/%E5%B9%B2%E8%B4%A7/"/>
    
    
      <category term="干货" scheme="http://www.lightfisher.cn/tags/%E5%B9%B2%E8%B4%A7/"/>
    
  </entry>
  
  <entry>
    <title>000webhost  免费虚拟云主机</title>
    <link href="http://www.lightfisher.cn/2019/02/09/000webhost-%E5%85%8D%E8%B4%B9%E8%99%9A%E6%8B%9F%E4%BA%91%E4%B8%BB%E6%9C%BA/"/>
    <id>http://www.lightfisher.cn/2019/02/09/000webhost-免费虚拟云主机/</id>
    <published>2019-02-09T13:50:00.000Z</published>
    <updated>2019-02-10T13:02:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="000webhost基本介绍"><a href="#000webhost基本介绍" class="headerlink" title="000webhost基本介绍"></a>000webhost基本介绍</h1><blockquote><p>000webhost是国外著名空间商Hosting24旗下的免费虚拟主机产品，号称“比收费虚拟主机更好用”。而确实如其所说的，该空间非常优质和稳定。而该空间提供商也见识到了中国人口之多，中国用户申请到有一定难度。他的口碑也确实不错。000webhost提供的免费服务：全能PHP空间1.5G ，支持PHP(不支持ASP)，支持绑定顶级域名，无任何广告，独立控制面板，免费创建Mysql数据库，FTP上传下载，在线压缩解压，支持fopen()函数。可正常安装Wordpress,Phpwind,Discuz,Joomla,DedeCms,Php168 等软件！免费提供1个二级域名，可以绑域名，无广告。–《百度百科》</p></blockquote><a id="more"></a><blockquote><p>这篇博客也是简单记录一下我对这个干货的记录。这个000webhost虚拟云主机虽然好但是免费的只能创建两个，GearHost可以无限制创建，但是GearHost可能只能简单的展示静态网页。你可参考这两篇博客——<a href="/2019/01/31/GearHost-免费主机申请教程/">GearHost搭建</a>和<a href="/2019/01/31/免费一年域名绑定GearHost云主机/">免费域名绑定GearHost</a></p></blockquote><h1 id="使用过程"><a href="#使用过程" class="headerlink" title="使用过程"></a>使用过程</h1><blockquote><p>1.首先当然是去注册和登录，我这里就不简述了，虽然我在这里花了我一半的时间。我简单说一下要点，注册要<code>gmail</code>或者<code>outlook</code>(这里我推荐是gmail，因为用outlook邮箱接收不到验证短信，emmmm，我也简单提示一下，即使是gmail邮箱，我接收验证短信也是花了十几分钟才接收到，所以，慢慢来)。官方网址在这： <a href="https://www.000webhost.com/" target="_blank" rel="noopener">https://www.000webhost.com/</a>   （对了，这个需要科学上网，你可以参考这篇博客——<a href="/2019/01/06/上网/">科学上网</a>）</p></blockquote><p><img src="http://qnpic.top\webhost1%5C7.jpg" alt="img"></p><blockquote><p>登录完，会验证邮箱。验证完就可以创建了</p></blockquote><p><img src="http://qnpic.top\webhost1%5C2.jpg" alt="img"></p><blockquote><p>进行下面的操作</p></blockquote><p><img src="http://qnpic.top\webhost1%5C1.jpg" alt="img"></p><blockquote><p>点击创建后就可以看到</p></blockquote><p><img src="http://qnpic.top\webhost1%5C3.jpg" alt="img"></p><blockquote><p>创建成功后，你就可以使用了，你可以自己写php网页，可以关联数据库，我这里就简单说一下数据库的设置，点击进入数据库设置</p></blockquote><p><img src="http://qnpic.top\webhost1%5C4.jpg" alt="img"></p><p><img src="http://qnpic.top\webhost1%5C5.jpg" alt="img"></p><blockquote><p>默认没有，你可以进行如下创建</p></blockquote><p><img src="http://qnpic.top\webhost1%5C6.jpg" alt="img"></p><blockquote><p>创建成功</p></blockquote><p><img src="http://qnpic.top\webhost1%5C8.jpg" alt="img"></p><blockquote><p>你也可以点击进入数据库的进一步操作，如数据库的建立、导入等等</p></blockquote><p><img src="http://qnpic.top\webhost1%5C9.jpg" alt="img"></p><blockquote><p>最后我就以一个简单的静态网页结束，点击<code>File manager</code>进入上传界面</p></blockquote><p><img src="http://qnpic.top\webhost1%5C12.jpg" alt="img"></p><p><img src="http://qnpic.top\webhost1%5C10.jpg" alt="img"></p><blockquote><p>下面的展示界面本来是有一个默认的文件，你可以删除它，加入你自己想要的网页，然后就可以进行访问，访问的地址就是你创建的二级域名加主域名。</p></blockquote><p><img src="http://qnpic.top\webhost1%5C11.jpg" alt="img"></p><p><br><br><br>这次的分享就到这里了，So<br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;000webhost基本介绍&quot;&gt;&lt;a href=&quot;#000webhost基本介绍&quot; class=&quot;headerlink&quot; title=&quot;000webhost基本介绍&quot;&gt;&lt;/a&gt;000webhost基本介绍&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;000webhost是国外著名空间商Hosting24旗下的免费虚拟主机产品，号称“比收费虚拟主机更好用”。而确实如其所说的，该空间非常优质和稳定。而该空间提供商也见识到了中国人口之多，中国用户申请到有一定难度。他的口碑也确实不错。000webhost提供的免费服务：全能PHP空间1.5G ，支持PHP(不支持ASP)，支持绑定顶级域名，无任何广告，独立控制面板，免费创建Mysql数据库，FTP上传下载，在线压缩解压，支持fopen()函数。可正常安装Wordpress,Phpwind,Discuz,Joomla,DedeCms,Php168 等软件！免费提供1个二级域名，可以绑域名，无广告。–《百度百科》&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="干货" scheme="http://www.lightfisher.cn/tags/%E5%B9%B2%E8%B4%A7/"/>
    
  </entry>
  
  <entry>
    <title>免费一年域名绑定GearHost云主机</title>
    <link href="http://www.lightfisher.cn/2019/01/31/%E5%85%8D%E8%B4%B9%E4%B8%80%E5%B9%B4%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9AGearHost%E4%BA%91%E4%B8%BB%E6%9C%BA/"/>
    <id>http://www.lightfisher.cn/2019/01/31/免费一年域名绑定GearHost云主机/</id>
    <published>2019-01-31T07:55:00.000Z</published>
    <updated>2019-02-10T13:03:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="免费一年域名绑定GearHost免费主机"><a href="#免费一年域名绑定GearHost免费主机" class="headerlink" title="免费一年域名绑定GearHost免费主机"></a>免费一年域名绑定GearHost免费主机</h1><blockquote><p>继上一篇博客——<a href="/2019/01/31/GearHost-免费主机申请教程/">免费GearHost云主机搭建个人网站</a>,今天也是借着up主写这篇博客，我也是主要学习到了这个一年免费域名，^-^ 话不多说，我会简单的描述一下，最后我也会给出视频的链接和或者直接在我这看</p></blockquote><a id="more"></a><h1 id="申请域名"><a href="#申请域名" class="headerlink" title="申请域名"></a>申请域名</h1><blockquote><p>这个也是我最想写这篇博客的地方，我一般买域名都是从阿里云上买的，虽然不贵，但是看见免费的还是有点心动，于是show you</p></blockquote><blockquote><p>登录的网址就是这个——<a href="https://www.freenom.com" target="_blank" rel="noopener">https://www.freenom.com</a>  这个网站不用翻墙也是能够访问的，但是可能会很慢很慢，如果你还不回你可以看我写过两篇科学上网——<a href="/2019/01/06/上网/">Chrome浏览器的科学上网</a>(emmm,我写这篇的时候，这个插件的香港节点应该被封了，注意下)，或者<a href="http://localhost:4000/2019/01/30/%E5%B0%8F%E7%99%BD%E6%90%AD%E5%BB%BASS%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/" target="_blank" rel="noopener">自己搭建SS节点科学上网</a></p></blockquote><blockquote><p>至于登录和注册我就不多说了，我这个也是看了很久，用的是Google账户登录的(如果没有可以去注册个)。注册登录完了就可以选购，这里我用<code>emmm</code>来演示</p></blockquote><p><img src="http://qnpic.top\free_cloud2%5C6.jpg" alt="img"></p><blockquote><p>然后可以购买了</p></blockquote><p><img src="http://qnpic.top\free_cloud2%5C7.jpg" alt="img"></p><blockquote><p>可以修改成12个月也就是一年，然后点击continue下一步购买，我就不演示了</p></blockquote><p><img src="http://qnpic.top\free_cloud2%5C9.jpg" alt="img"></p><blockquote><p>然后进入域名的配置</p></blockquote><p><img src="http://qnpic.top\free_cloud2%5C8.jpg" alt="img"></p><blockquote><p>在此之前，我们可以先登录GearHost，选择域名配置，添加你刚购买的免费域名</p></blockquote><p><img src="http://qnpic.top\free_cloud2%5C1.jpg" alt="img"></p><blockquote><p>点击添加的域名，然后你就看到下面界面,后面的那两个需要记一下，是后面需要配置的</p></blockquote><p><img src="http://qnpic.top\free_cloud2%5C2.jpg" alt="img"></p><blockquote><p>回到之前域名后配置界面，然后点击<code>Nameservers</code></p></blockquote><p><img src="http://qnpic.top\free_cloud2%5C3.jpg" alt="img"></p><blockquote><p>进入<code>Nameservers</code>，进行如下配置,既是前面叫你记住的那两个配置,填写进去，然后点击下面的<code>Change NameServers</code></p></blockquote><p><img src="http://qnpic.top\free_cloud2%5C4.jpg" alt="img"></p><blockquote><p>如果你看到下面的界面,那么恭喜你，域名绑定成功，不过现在马上去访问 <a href="http://emmm.ga" target="_blank" rel="noopener">http://emmm.ga</a> (这里是我的域名)是不行的，得等DNS系统注册号，可能几分钟也可能几小时</p></blockquote><p><img src="http://qnpic.top\free_cloud2%5C5.jpg" alt="img"></p><blockquote><p>我登录几秒钟就可以访问了</p></blockquote><p><img src="http://qnpic.top\free_cloud2%5C10.jpg" alt="img"></p><p><br><br><br>这两篇的博客，我也是对GearHost有了一定的了解，我感觉和GitBook联合起来能写很好的电子书，So<br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;免费一年域名绑定GearHost免费主机&quot;&gt;&lt;a href=&quot;#免费一年域名绑定GearHost免费主机&quot; class=&quot;headerlink&quot; title=&quot;免费一年域名绑定GearHost免费主机&quot;&gt;&lt;/a&gt;免费一年域名绑定GearHost免费主机&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;继上一篇博客——&lt;a href=&quot;/2019/01/31/GearHost-免费主机申请教程/&quot;&gt;免费GearHost云主机搭建个人网站&lt;/a&gt;,今天也是借着up主写这篇博客，我也是主要学习到了这个一年免费域名，^-^ 话不多说，我会简单的描述一下，最后我也会给出视频的链接和或者直接在我这看&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="GearHost" scheme="http://www.lightfisher.cn/categories/GearHost/"/>
    
      <category term="干货" scheme="http://www.lightfisher.cn/categories/GearHost/%E5%B9%B2%E8%B4%A7/"/>
    
    
      <category term="干货" scheme="http://www.lightfisher.cn/tags/%E5%B9%B2%E8%B4%A7/"/>
    
      <category term="GearHost" scheme="http://www.lightfisher.cn/tags/GearHost/"/>
    
  </entry>
  
  <entry>
    <title>免费GearHost云主机搭建个人网站</title>
    <link href="http://www.lightfisher.cn/2019/01/31/GearHost-%E5%85%8D%E8%B4%B9%E4%B8%BB%E6%9C%BA%E7%94%B3%E8%AF%B7%E6%95%99%E7%A8%8B/"/>
    <id>http://www.lightfisher.cn/2019/01/31/GearHost-免费主机申请教程/</id>
    <published>2019-01-31T04:38:00.000Z</published>
    <updated>2019-02-10T13:03:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GearHost-免费主机"><a href="#GearHost-免费主机" class="headerlink" title="GearHost 免费主机"></a>GearHost 免费主机</h1><blockquote><p>GearHost是国外一家主机商，提供免费和付费的主机套餐，支持PHP、.Net和Node.js程序。同时它还提供免费的Mysql、SQL Server 和Mongo db数据库，可以运行PHP和asp.net程序，而且还没有烦人的广告。—-from <a href="http://wosn.net/625.html" target="_blank" rel="noopener">Here</a></p></blockquote><a id="more"></a><h1 id="申请"><a href="#申请" class="headerlink" title="申请"></a>申请</h1><blockquote><p>GearHost免费套餐主机容量是100MB，Mysql数据库5Mb，月流量是1GB。免费套餐对于建站数量没有限制，但是限制内存是256MB，CPU占用为5%，不支持ssl。</p></blockquote><blockquote><p>申请的话，你可以直接去<a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a>搜索GearHost，或者点击链接直接访问： <a href="https://www.gearhost.com/" target="_blank" rel="noopener">https://www.gearhost.com/</a></p></blockquote><p><img src="http://qnpic.top\free_cloud1%5C3.jpg" alt="img"></p><blockquote><p>和其他的服务器运营商一样，都得进行注册登录，我这里就不多过详述，没什么值得注意的。</p></blockquote><p><img src="http://qnpic.top\free_cloud1%5C1.jpg" alt="img"></p><blockquote><p>点击添加，并且输入你想要的二级域名，选择免费的主机(你可以选择收费的)。然后最下面就有一个button，点击创建</p></blockquote><p><img src="http://qnpic.top\free_cloud1%5C4.jpg" alt="img"></p><p><img src="http://qnpic.top\free_cloud1%5C5.jpg" alt="img"></p><blockquote><p>点击创建，它就会开始<code>building</code>，可能能等个几分钟。</p></blockquote><p><img src="http://qnpic.top\free_cloud1%5C2.jpg" alt="img"></p><blockquote><p>上面的<code>status</code>状态变成<code>running</code>就表示已经创建成功，点击你前面输入的二级域名名称，也就是你创建的云主机名称.点击进去就是创建的云主机的详情</p></blockquote><p><img src="http://qnpic.top\free_cloud1%5C6.jpg" alt="img"></p><p><img src="http://qnpic.top\free_cloud1%5C7.jpg" alt="img"></p><h1 id="GearHost-空间FTP管理"><a href="#GearHost-空间FTP管理" class="headerlink" title="GearHost 空间FTP管理"></a>GearHost 空间FTP管理</h1><blockquote><p>点击GearHost的管理面板中的<code>Publish</code>选项查看空间的FTP信息。FTP信息都是系统生成，不能自定义。</p></blockquote><p><img src="http://qnpic.top\free_cloud1%5C8.jpg" alt="img"></p><blockquote><p>上面就是之后需要云主机连接的信息。在此之前你需要下载<code>Filezilla</code>,你可以百度自行下载,或者点击这个链接——<a href="https://pan.baidu.com/s/1cBtjT8gDtNwrRJjY6skF8g" target="_blank" rel="noopener">https://pan.baidu.com/s/1cBtjT8gDtNwrRJjY6skF8g</a> 提取码: k2m6 下载成功后点击 文件-&gt;站点管理 ，如下图：</p></blockquote><p><img src="http://qnpic.top\free_cloud1%5C9.jpg" alt="img"></p><blockquote><p>进入站点管理，进行下图配置</p></blockquote><p><img src="http://qnpic.top\free_cloud1%5C10.jpg" alt="img"></p><blockquote><p>点击连接，等待连接</p></blockquote><p><img src="http://qnpic.top\free_cloud1%5C11.jpg" alt="img"></p><h1 id="静态文件展示"><a href="#静态文件展示" class="headerlink" title="静态文件展示"></a>静态文件展示</h1><blockquote><p>我们可以通过这个云主机来进行静态文件展示，如WordPress静态文件的展示，Hexo博客展示，或者GitBook静态文件的展示。这其中的可以参考之前的博客——<a href="/2019/01/30/hexo-教程五-部署到centos服务器/">CentOS服务器部署hexo</a>,基本理念一样。这里我就简单描述一下和展示</p></blockquote><blockquote><p>先把<code>/site/wwwroot</code>下的文件删除，这个就是默认的，我们可以放入我们自己的html文件，用来展示</p></blockquote><p><img src="http://qnpic.top\free_cloud1%5C12.jpg" alt="img"></p><blockquote><p>现在自己的电脑上创建index.html文件用来测试，然后保存拖拽进去</p></blockquote><p><img src="http://qnpic.top\free_cloud1%5C13.jpg" alt="img"></p><p><img src="http://qnpic.top\free_cloud1%5C14.jpg" alt="img"></p><blockquote><p>到这里就配置完成了，我们就可以直接去访问，就是之前的 那个网址，可以直接访问</p></blockquote><p><img src="http://qnpic.top\free_cloud1%5C15.jpg" alt="img"></p><p><br><br><br>这里的博客就基本到这里了，我们可以通过这个云主机来进行静态文件展示，如WordPress静态文件的展示，Hexo博客展示，或者GitBook静态文件的展示。这其中的可以参考之前的博客——<a href="/2019/01/30/hexo-教程五-部署到centos服务器/">CentOS服务器部署hexo</a>，So<br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GearHost-免费主机&quot;&gt;&lt;a href=&quot;#GearHost-免费主机&quot; class=&quot;headerlink&quot; title=&quot;GearHost 免费主机&quot;&gt;&lt;/a&gt;GearHost 免费主机&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;GearHost是国外一家主机商，提供免费和付费的主机套餐，支持PHP、.Net和Node.js程序。同时它还提供免费的Mysql、SQL Server 和Mongo db数据库，可以运行PHP和asp.net程序，而且还没有烦人的广告。—-from &lt;a href=&quot;http://wosn.net/625.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="GearHost" scheme="http://www.lightfisher.cn/categories/GearHost/"/>
    
      <category term="干货" scheme="http://www.lightfisher.cn/categories/GearHost/%E5%B9%B2%E8%B4%A7/"/>
    
    
      <category term="干货" scheme="http://www.lightfisher.cn/tags/%E5%B9%B2%E8%B4%A7/"/>
    
      <category term="GearHost" scheme="http://www.lightfisher.cn/tags/GearHost/"/>
    
  </entry>
  
  <entry>
    <title>小白搭建SS科学上网</title>
    <link href="http://www.lightfisher.cn/2019/01/30/%E5%B0%8F%E7%99%BD%E6%90%AD%E5%BB%BASS%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>http://www.lightfisher.cn/2019/01/30/小白搭建SS科学上网/</id>
    <published>2019-01-30T13:49:00.000Z</published>
    <updated>2019-01-30T13:59:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小白搭建SS科学上网"><a href="#小白搭建SS科学上网" class="headerlink" title="小白搭建SS科学上网"></a>小白搭建SS科学上网</h1><blockquote><p>这几天也是无聊，去<a href="https://www.vultr.com" target="_blank" rel="noopener">vultr官网</a>买了个国外的服务器并且不部署了自己的hexo博客——<a href="https://qgtiger.github.io" target="_blank" rel="noopener">LF’s Blog</a>,但是总感觉这样不是很对得起这个国外服务器，所以，今天就来用这个国外服务器搭建SS(shadowsocks),也就是我们熟悉的节点。有可能你会问你前几天不是写了个<a href="/2019/01/06/上网/">Chrome浏览器的科学上网</a>,但是这个不一样，搭建了这个SS，我们就可以在移动客户端，如iPhone，android手机，PC等进行科学上网，我也是看到了能在移动客服端上搭建才起了”色心”,So show you .</p></blockquote><a id="more"></a><blockquote><p>我网上看的教程也是大部分是搬瓦工上买的VPS服务器</p></blockquote><h1 id="购买国外的服务器"><a href="#购买国外的服务器" class="headerlink" title="购买国外的服务器"></a>购买国外的服务器</h1><blockquote><p>购买国外服务器可以从<code>搬瓦工</code>和<code>Vultr</code>上进行购买</p></blockquote><blockquote><p><code>Vultr</code>购买服务器可以看上一篇博客——<a href="/2019/01/30/hexo-教程五-部署到centos服务器/">hexo 教程五–部署到centos服务器</a>,里面有提及到vultr服务器的购买和连接。如果嫌弃我写的博客，我这里也推荐一篇博客： <a href="http://vultr.aicnm.com/%E6%9C%80%E6%96%B0Vultr%E6%B3%A8%E5%86%8C%E5%8F%8AVPS%E8%B4%AD%E4%B9%B0%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">http://vultr.aicnm.com/%E6%9C%80%E6%96%B0Vultr%E6%B3%A8%E5%86%8C%E5%8F%8AVPS%E8%B4%AD%E4%B9%B0%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B/</a></p></blockquote><blockquote><p>至于搬瓦工的VPS购买教程你可以参考这篇博客： <a href="https://www.bandwagonhost.net/716.html" target="_blank" rel="noopener">https://www.bandwagonhost.net/716.html</a></p></blockquote><h1 id="连接VPS"><a href="#连接VPS" class="headerlink" title="连接VPS"></a>连接VPS</h1><blockquote><p>这里我使用的是vultr上购买的CentOS 7服务器，emmm,我去试试CentOS 6的vultr VPS服务器(方正能随时退)，因为我后面要安装锐锋来提高带宽，也就是访问速度，CentOS7我试过好像不太行。</p></blockquote><blockquote><p>在上一篇博客——<a href="/2019/01/30/hexo-教程五-部署到centos服务器/">hexo 教程五–部署到centos服务器</a>，里面也是提及到如何连接VPS，这里写博客使用的是Xshell，资源你可以去上一篇博客看，或者上网查找。</p></blockquote><h1 id="Vultr-VPS搭建SS"><a href="#Vultr-VPS搭建SS" class="headerlink" title="Vultr VPS搭建SS"></a>Vultr VPS搭建SS</h1><blockquote><p>1.安装wget命令工具,下图也是能看的Vultr上购买的VPS已经安装了wget</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> wget</span><br></pre></td></tr></table></figure><p><img src="http://qnpic.top\shadowsock%5C3.jpg" alt="img"></p><blockquote><p>依次运行下面三行命令，如下图所示按提示选择选项。建议：端口选择大于 1000 。</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget — <span class="keyword">no</span>-check-certificate -O shadowsocks.<span class="keyword">sh</span> http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/teddysun/shadowsocks_install/master/shadowsocks.<span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line">chmod +<span class="keyword">x</span> shadowsocks.<span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line">./shadowsocks.<span class="keyword">sh</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | tee shadowsocks.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p><img src="http://qnpic.top\shadowsock%5C4.jpg" alt="img"></p><blockquote><p>执行最后一条命令时，就会进入配置界面,你可以进行配置，如下图</p></blockquote><p><img src="http://qnpic.top\shadowsock%5C5.jpg" alt="img"></p><blockquote><p>上面这个配置安装可能需要一会时间，静静等待</p></blockquote><blockquote><p>如果你看到了下面这个图，那么恭喜你，你已经完成了SS的搭建</p></blockquote><p><img src="http://qnpic.top\shadowsock%5C1.jpg" alt="img"></p><h1 id="SS客户端下载"><a href="#SS客户端下载" class="headerlink" title="SS客户端下载"></a>SS客户端下载</h1><blockquote><p>MAC版下载地址：<a href="https://github.com/gaoshilei/ShadowsocksX-NG/releases/download/1.4.3-R8-build3/ShadowsocksX-NG-R8.dmg" target="_blank" rel="noopener">https://github.com/gaoshilei/ShadowsocksX-NG/releases/download/1.4.3-R8-build3/ShadowsocksX-NG-R8.dmg</a></p></blockquote><blockquote><p>windows版下载地址：<a href="https://github.com/iMeiji/shadowsocks_install/releases/download/0.13/ssr-win.4.7.0-fix.7z" target="_blank" rel="noopener">https://github.com/iMeiji/shadowsocks_install/releases/download/0.13/ssr-win.4.7.0-fix.7z</a></p></blockquote><blockquote><p>ios下载app： seedwingy</p></blockquote><blockquote><p>安卓版下载地址：<a href="https://github.com/iMeiji/shadowsocks_install/releases/download/0.13/ssr-android-3.4.0.5.apk" target="_blank" rel="noopener">https://github.com/iMeiji/shadowsocks_install/releases/download/0.13/ssr-android-3.4.0.5.apk</a>﻿</p></blockquote><h1 id="运行成功截图"><a href="#运行成功截图" class="headerlink" title="运行成功截图"></a>运行成功截图</h1><blockquote><p>我这里在windows和iPhone上进行了验证</p></blockquote><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><blockquote><p>在上面下载了Shadowsocks了，并运行</p></blockquote><p><img src="http://qnpic.top\shadowsock%5C6.jpg" alt="img"></p><blockquote><p>上图也是基本配置了SS，点击确认后就是开启了科学上网。下图就是解释<code>PAC模式</code>和<code>全局模式</code>，PAC就是智能模式，它访问国内网站时，并不会使用这个SS代理，而全局模式就是全部使用代理。这里的话当然是推荐PAC模式</p></blockquote><p><img src="http://qnpic.top\shadowsock%5C7.jpg" alt="img"></p><blockquote><p>下图也是选择哪个SS节点</p></blockquote><p><img src="http://qnpic.top\shadowsock%5C8.jpg" alt="img"></p><h2 id="iPhone"><a href="#iPhone" class="headerlink" title="iPhone"></a>iPhone</h2><blockquote><p>现在iPhone上对于翻墙也是打击蛮严重的，不过我无意间看到了这个<code>Seedwingy</code>软件，看到的人赶快去下载吧，下载记得要五星好评才能使用~~</p></blockquote><p><img src="http://qnpic.top\shadowsock%5C10.PNG" width="250"></p><h1 id="锐锋安装"><a href="#锐锋安装" class="headerlink" title="锐锋安装"></a>锐锋安装</h1><blockquote><p>锐速serverspeeder是一款TCP网络加速软件，能在Linux系统和Windows系统的服务器中安装，安装后能启到提高网络连接稳定性、带宽利用率、低访问失败率等作用，从而提高服务器网络访问速度。锐速并非实际增大服务器带宽，只是提高网络的稳定性和利用率而已。一个明显变化就是在同一VPS安装科学上网工具观看YouTube，没安装锐速前观看YouTube 720P视频非常不流畅，经常会出现缓冲现象；而安装锐速后能流畅观看YouTube 720P视频。–from google</p></blockquote><blockquote><p>1.把一键安装的脚本下载下来</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -<span class="keyword">N</span> --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/wn789/serverspeeder/master/serverspeeder.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><blockquote><p>2.脚本下载完成之后赋权执行</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">chmod</span> +<span class="selector-tag">x</span> <span class="selector-tag">serverspeeder</span><span class="selector-class">.sh</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">bash</span> <span class="selector-tag">serverspeeder</span><span class="selector-class">.sh</span></span><br></pre></td></tr></table></figure><blockquote><p>如果你出现了下图，就以为与当前的VPS的不支持，emmmm,当然也有解决方案，因为可能要花费的时间有点长，我就不多过介绍了，毕竟上面搭建的SS访问youtube网站等还是可以随便观看的720P。下面我会给出解决方案的连接</p></blockquote><p><img src="http://qnpic.top\shadowsock%5C9.jpg" alt="img"></p><p><br><br><br><br>搬瓦工购买教程：<a href="https://www.bandwagonhost.net/716.html" target="_blank" rel="noopener">https://www.bandwagonhost.net/716.html</a></p><p>安装SS教程：<a href="https://medium.com/@jackme256/%E6%90%AC%E7%93%A6%E5%B7%A5-vps-%E6%90%AD%E5%BB%BA-shadowsocks-ss-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B-ss%E5%A4%9A%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96-efc6dda704fe" target="_blank" rel="noopener">https://medium.com/@jackme256/%E6%90%AC%E7%93%A6%E5%B7%A5-vps-%E6%90%AD%E5%BB%BA-shadowsocks-ss-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B-ss%E5%A4%9A%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96-efc6dda704fe</a></p><p>安装锐速加速教程：<a href="http://www.gaoshilei.com/2017/11/06/SSR/" target="_blank" rel="noopener">http://www.gaoshilei.com/2017/11/06/SSR/</a></p><p>========================================</p><p>SS客户端下载地址：<br>MAC版下载地址：<a href="https://github.com/gaoshilei/ShadowsocksX-NG/releases/download/1.4.3-R8-build3/ShadowsocksX-NG-R8.dmg" target="_blank" rel="noopener">https://github.com/gaoshilei/ShadowsocksX-NG/releases/download/1.4.3-R8-build3/ShadowsocksX-NG-R8.dmg</a><br>windows版下载地址：<a href="https://github.com/iMeiji/shadowsocks_install/releases/download/0.13/ssr-win.4.7.0-fix.7z" target="_blank" rel="noopener">https://github.com/iMeiji/shadowsocks_install/releases/download/0.13/ssr-win.4.7.0-fix.7z</a><br>iOS版下载地址：Rocketwingy<br>安卓版下载地址：<a href="https://github.com/iMeiji/shadowsocks_install/releases/download/0.13/ssr-android-3.4.0.5.apk" target="_blank" rel="noopener">https://github.com/iMeiji/shadowsocks_install/releases/download/0.13/ssr-android-3.4.0.5.apk</a>﻿</p><p><br><br><br>这里的博客也是到这里的就结束了，如果你不满意网速，你可以自行去安装锐锋，So,Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;小白搭建SS科学上网&quot;&gt;&lt;a href=&quot;#小白搭建SS科学上网&quot; class=&quot;headerlink&quot; title=&quot;小白搭建SS科学上网&quot;&gt;&lt;/a&gt;小白搭建SS科学上网&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这几天也是无聊，去&lt;a href=&quot;https://www.vultr.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vultr官网&lt;/a&gt;买了个国外的服务器并且不部署了自己的hexo博客——&lt;a href=&quot;https://qgtiger.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LF’s Blog&lt;/a&gt;,但是总感觉这样不是很对得起这个国外服务器，所以，今天就来用这个国外服务器搭建SS(shadowsocks),也就是我们熟悉的节点。有可能你会问你前几天不是写了个&lt;a href=&quot;/2019/01/06/上网/&quot;&gt;Chrome浏览器的科学上网&lt;/a&gt;,但是这个不一样，搭建了这个SS，我们就可以在移动客户端，如iPhone，android手机，PC等进行科学上网，我也是看到了能在移动客服端上搭建才起了”色心”,So show you .&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="科学上网" scheme="http://www.lightfisher.cn/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    
      <category term="科学上网" scheme="http://www.lightfisher.cn/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Bitvise SSH Client 软件介绍</title>
    <link href="http://www.lightfisher.cn/2019/01/30/Bitvise-SSH-Client-%E8%BD%AF%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.lightfisher.cn/2019/01/30/Bitvise-SSH-Client-软件介绍/</id>
    <published>2019-01-30T06:05:00.000Z</published>
    <updated>2019-02-10T13:03:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bitvise-SSH-Client-软件"><a href="#Bitvise-SSH-Client-软件" class="headerlink" title="Bitvise SSH Client 软件"></a>Bitvise SSH Client 软件</h1><blockquote><p>在日常的CentOS服务器使用中，我们往往是用Xshell或者Git来进行连接，这样连接也是没有图形化界面的，想把本地的文件上传到服务器也是用<code>scp</code>来进行上传，这样传输并没有好看的界面。所以，这一次我写一篇关于Bitvise SSH Client软件的安装和介绍</p></blockquote><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p>安装的话，你可以去这里进行下载: <a href="https://www.bitvise.com/ssh-client-download" target="_blank" rel="noopener">https://www.bitvise.com/ssh-client-download</a> ,如果访问不了，可以点击<a href="https://pan.baidu.com/s/1_EhYv9SU2lH2IkTX6CPg3g" target="_blank" rel="noopener">链接</a> 提取码: 8dhk 。造福人类，是coder的职责</p></blockquote><blockquote><p>下载好就是一些简单的安装，这里就不介绍了。</p></blockquote><p><img src="http://qnpic.top\Bitvise_ssh%5C1.jpg" alt="img"></p><blockquote><p>安装好了后打开,进行下图操作</p></blockquote><p><img src="http://qnpic.top\Bitvise_ssh%5C2.jpg" alt="img"></p><blockquote><p>点击login in,后就会出现下面的界面</p></blockquote><p><img src="http://qnpic.top\Bitvise_ssh%5C3.jpg" alt="img"></p><blockquote><p>是不是很好看，左边就是自己电脑的文件图形化，而右边就是CentOS服务器上的文件图形化，你也进行拖拽来进行下载和上传。</p></blockquote><p><br><br><br>So, Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Bitvise-SSH-Client-软件&quot;&gt;&lt;a href=&quot;#Bitvise-SSH-Client-软件&quot; class=&quot;headerlink&quot; title=&quot;Bitvise SSH Client 软件&quot;&gt;&lt;/a&gt;Bitvise SSH Client 软件&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在日常的CentOS服务器使用中，我们往往是用Xshell或者Git来进行连接，这样连接也是没有图形化界面的，想把本地的文件上传到服务器也是用&lt;code&gt;scp&lt;/code&gt;来进行上传，这样传输并没有好看的界面。所以，这一次我写一篇关于Bitvise SSH Client软件的安装和介绍&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="干货" scheme="http://www.lightfisher.cn/categories/%E5%B9%B2%E8%B4%A7/"/>
    
    
      <category term="干货" scheme="http://www.lightfisher.cn/tags/%E5%B9%B2%E8%B4%A7/"/>
    
  </entry>
  
  <entry>
    <title>hexo 教程五--部署到centos服务器</title>
    <link href="http://www.lightfisher.cn/2019/01/30/hexo-%E6%95%99%E7%A8%8B%E4%BA%94-%E9%83%A8%E7%BD%B2%E5%88%B0centos%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://www.lightfisher.cn/2019/01/30/hexo-教程五-部署到centos服务器/</id>
    <published>2019-01-30T02:36:00.000Z</published>
    <updated>2019-01-30T04:16:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何将hexo上传到自己的centos服务器上"><a href="#如何将hexo上传到自己的centos服务器上" class="headerlink" title="如何将hexo上传到自己的centos服务器上"></a>如何将hexo上传到自己的centos服务器上</h1><blockquote><p>最近也会经过自己室友的启发下，无聊也来把自己的hexo博客部署到<code>centos</code>服务器上，顺便也玩一下centos服务器。So，let’s get it.</p></blockquote><a id="more"></a><h1 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h1><blockquote><p>在自己的本地主机上部署hexo博客，然后<code>git push</code>到自己的<code>github</code>上，如果，你不是很懂<code>git</code>的操作，你可以看我这一篇<a href="/2018/12/13/t-的一些基本操作和讲解/">Git博客</a>。</p></blockquote><blockquote><p>上传到自己的git仓库，上传的文件也是hexo项目里<code>public</code>的文件，如下图：</p></blockquote><p><img src="http://qnpic.top\hexo_centos%5C1.jpg" alt="img"></p><p><img src="http://qnpic.top\hexo_centos%5C2.jpg" alt="img"></p><blockquote><p>所以，可以在<code>CentOS</code>上搭建<code>hexo</code>博客，然后用Git操作<code>git clone</code>，克隆下仓库(就是上面上传到github仓库的文件)。然后每次更新只需要用<code>git pull</code>来实现更新。</p></blockquote><blockquote><p>上面实现了更新hexo博客，然后我们用的是<code>nginx</code>,来实现网页的展示</p></blockquote><h1 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h1><blockquote><p>想要实现部署，首先要有一台的自己的<code>CentOS</code>服务器(如果没有，可以先在虚拟机上进行试验)。然后在自己的服务器上安装<code>nodejs</code>,<code>hexo</code>,<code>nginx</code>等。</p></blockquote><h2 id="CentOS服务器购买"><a href="#CentOS服务器购买" class="headerlink" title="CentOS服务器购买"></a>CentOS服务器购买</h2><blockquote><p>这里的话，我是从<a href="https://www.vultr.com" target="_blank" rel="noopener">vultr官网</a>上进行购买(你也可以从阿里云那进行购买,主要vultr的买的服务器可以随时推掉。。)。咳，言归正传，你先到<a href="https://www.vultr.com" target="_blank" rel="noopener">vultr</a>上注册、登录。然后进行充值，可以微信支付。</p></blockquote><p><img src="http://qnpic.top\hexo_centos%5C3.jpg" alt="img"></p><blockquote><p>充值完成了，也就可以进行购买</p></blockquote><blockquote><p>选取购买服务器的区域，这里我推荐是美国，我刚开始我也是以为日本最近就访问快一点，但是不能<code>SSH</code>连接，百度一下好像是日本的基本都被封了…</p></blockquote><p><img src="http://qnpic.top\hexo_centos%5C4.jpg" alt="mg"></p><blockquote><p>选取CentOS服务器,并且选择配置，基本的就行了</p></blockquote><p><img src="http://qnpic.top\hexo_centos%5C5.jpg" alt="img"></p><blockquote><p>然后，基本配置一下就可以购买了</p></blockquote><p><img src="http://qnpic.top\hexo_centos%5C6.jpg" alt="img"></p><p><img src="http://qnpic.top\hexo_centos%5C7.jpg" alt="img"></p><blockquote><p>购买完成之后，进入这个界面就可以看到了，后面的<code>running</code>状态就得等个几分钟等它配置一下</p></blockquote><p><img src="http://qnpic.top\hexo_centos%5C8.jpg" alt="img"></p><blockquote><p>点击服务器，进入详细界面，下面的就是IP地址 和 登录密码</p></blockquote><p><img src="http://qnpic.top\hexo_centos%5C9.jpg" alt="img"></p><h2 id="连接CentOS服务器"><a href="#连接CentOS服务器" class="headerlink" title="连接CentOS服务器"></a>连接CentOS服务器</h2><blockquote><p>购买完成以后，就可以连接CentOS服务器进行配置，基本的连接方式有<code>git bush</code>界面下，输入下面代码进行登录，然后输入密码：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">root</span>@<span class="keyword">104</span>.<span class="keyword">156</span>.<span class="keyword">250</span>.<span class="keyword">144</span>   # 后面的IP地址就是你购买服务器的IP地址，自己修改一下</span><br></pre></td></tr></table></figure><p><img src="http://qnpic.top\hexo_centos%5C10.jpg" alt="img"></p><blockquote><p>你也可以通过Xshell进行登录，<a href="https://pan.baidu.com/s/1Kd3lURMuVqyLNyCfpQ0rdw" target="_blank" rel="noopener">下载链接</a>  提取码: tybe 。emmm，使用步骤，我就不多介绍了，网上应该有教程（对了，我这个是绿色破解版，你下载解压后，先运行<code>绿化.bat</code>）</p></blockquote><h2 id="CentOS服务器部署hexo"><a href="#CentOS服务器部署hexo" class="headerlink" title="CentOS服务器部署hexo"></a><code>CentOS</code>服务器部署hexo</h2><blockquote><p>在前面的连接完成的界面内进行步骤部署(这里参考自室友<a href="http://47.102.99.250/2019/01/21/%E3%80%90%E9%9A%8F%E7%AC%94%E3%80%91%E5%8F%88%E5%9B%9E%E5%88%B0%E6%9C%80%E5%88%9D%E7%9A%84%E8%B5%B7%E7%82%B9-Hexo/" target="_blank" rel="noopener">博客</a>)</p></blockquote><blockquote><p>1.升级yum</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yum</span> update -y</span><br><span class="line"><span class="comment">#对所有的提问都回答“yes”；</span></span><br></pre></td></tr></table></figure><blockquote><p>2.安装<code>Git</code></p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> git-core</span><br><span class="line"></span><br><span class="line">git --version  <span class="comment"># 查看git版本验证是否安装成功</span></span><br></pre></td></tr></table></figure><blockquote><p>3.安装nodejs</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y nodejs</span><br></pre></td></tr></table></figure><blockquote><p>4.安装hexo</p></blockquote><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure><blockquote><p>5.安装nginx</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> nginx -y</span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">systemctl <span class="keyword">start</span> nginx.service</span><br></pre></td></tr></table></figure><blockquote><p>6.拓展nginx命令行</p></blockquote><ul><li>1.重启nginx</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nginx -s reload</span></span><br></pre></td></tr></table></figure><ul><li>2.停止nginx</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s <span class="built_in">stop</span></span><br></pre></td></tr></table></figure><blockquote><p>7.配置<code>nginx.conf</code>,<code>nginx.conf</code>在<code>/etc/nginx</code>目录下</p></blockquote><p><img src="http://qnpic.top\hexo_centos%5C11.jpg" alt="img"></p><blockquote><p>8.对了那个hexo的博客好像不能随便创建在某个目录下,根据原来的<code>nginx.conf</code>的原来配置静态页面在<code>/usr/share/nginx/html</code>目录下。所以，我们可以在<code>/usr/share/nginx</code>下部署hexo博客，记得在<code>nginx.conf</code>里的静态文件目录，指向到<code>public</code>目录。</p></blockquote><p><img src="http://qnpic.top\hexo_centos%5C13.jpg" alt="img"></p><blockquote><p>但是为了长远的更新博客，前面也提到过，我们只需要<code>git pull</code>，拉取github仓库。而github仓库既是public文件，所以，我们只需要指向这个文件就行了，如下面，我<code>git clone</code>的是我的io仓库，所以我只需要修改<code>nginx.conf</code>如下</p></blockquote><p><img src="http://qnpic.top\hexo_centos%5C12.jpg" alt="img"></p><blockquote><p>对了，我记得vultr上购买的服务器没有默认开启firewall,所以，要执行以下命令行以运行HTTP和HTTPS通信</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent <span class="attribute">--zone</span>=public <span class="attribute">--add-service</span>=http </span><br><span class="line">sudo firewall-cmd --permanent <span class="attribute">--zone</span>=public <span class="attribute">--add-service</span>=https</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><blockquote><p>现在就基本配置完成了，只需要执行<code>nginx -s reload</code>，重启nginx，你去访问自己的网站及应该能访问了。</p></blockquote><p><img src="http://qnpic.top\hexo_centos%5C14.jpg" alt="img"></p><p><br><br><br>这次的博客也是基本完成了,(你也先访问以下我的<a href="http://104.156.250.144/" target="_blank" rel="noopener">服务器</a>,如果不能访问可以是我退了)，算是熟悉了一点centos服务器和nginx的使用So<br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何将hexo上传到自己的centos服务器上&quot;&gt;&lt;a href=&quot;#如何将hexo上传到自己的centos服务器上&quot; class=&quot;headerlink&quot; title=&quot;如何将hexo上传到自己的centos服务器上&quot;&gt;&lt;/a&gt;如何将hexo上传到自己的centos服务器上&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;最近也会经过自己室友的启发下，无聊也来把自己的hexo博客部署到&lt;code&gt;centos&lt;/code&gt;服务器上，顺便也玩一下centos服务器。So，let’s get it.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.lightfisher.cn/categories/hexo/"/>
    
    
      <category term="hexo搭建" scheme="http://www.lightfisher.cn/tags/hexo%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Django 使用MySql的几点注意事项</title>
    <link href="http://www.lightfisher.cn/2019/01/29/Django-%E4%BD%BF%E7%94%A8MySql%E7%9A%84%E5%87%A0%E7%82%B9%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://www.lightfisher.cn/2019/01/29/Django-使用MySql的几点注意事项/</id>
    <published>2019-01-29T09:05:00.000Z</published>
    <updated>2019-01-29T09:37:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django连接MySql的几点注意事项"><a href="#Django连接MySql的几点注意事项" class="headerlink" title="Django连接MySql的几点注意事项"></a>Django连接MySql的几点注意事项</h1><blockquote><p>在重装电脑后的系统中，这几天内也是陷入了安装软件的小小痛苦中，<a href="/2019/01/29/MySql-安装和简单配置/">上篇博客</a>也是简单说了下Windows下如何安装MySql，现在就来讲解一下Django运行使用到MySql的一些注意事项。</p></blockquote><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>我也是自重装电脑后，运行我的一个Django项目后，出现了这一些错误，如提示<code>Did you install mysqlclient?</code>或<code>django.db.utils.OperationalError: (2059, &lt;NULL&gt;)</code>错误等等，今天就来讲解下这两个问题</p></blockquote><h2 id="安装mysqlclient"><a href="#安装mysqlclient" class="headerlink" title="安装mysqlclient"></a>安装mysqlclient</h2><blockquote><p>安装<code>mysqlclient</code>，可以用<code>pip install mysqlclient</code>来进行安装，也可以本地安装，你可以来这里进行<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysqlclient" target="_blank" rel="noopener">下载</a></p></blockquote><blockquote><p>cp35代表python3.5的版本，win32代表32位的系统，所以需要选择正确，否则安装过程会报错平台不匹配</p></blockquote><p><img src="http://qnpic.top\django_mysql%5C1.jpg" alt="img"></p><blockquote><p>因为这里是本地安装，你可以用<code>pip install</code>安装，后面跟你下载的的文件名</p></blockquote><p><img src="http://qnpic.top\django_mysql%5C2.jpg" alt="img"></p><h2 id="MySql-8-X的一些问题"><a href="#MySql-8-X的一些问题" class="headerlink" title="MySql 8.X的一些问题"></a>MySql 8.X的一些问题</h2><blockquote><p><code>MySql</code>8.X对用户密码的加密方式为<code>caching_sha2_password</code>, django暂时还不支持这种新增的加密方式。只需要将用户加密方式改为老的加密方式即可。</p></blockquote><blockquote><p>1.登录mysql，连接用户为root</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mysql -u root -p</span></span><br></pre></td></tr></table></figure><blockquote><p>2.执行命令查看加密方式</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">select user,plugin <span class="keyword">from</span><span class="built_in"> user </span>where <span class="attribute">user</span>=<span class="string">'root'</span>;</span><br></pre></td></tr></table></figure><p><img src="http://qnpic.top\django_mysql%5C3.jpg" alt="img"></p><blockquote><p>3.执行命令修改加密方式</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">'yourpassword'</span> <span class="comment"># yourpassword就要修改成你的mysql登录密码</span></span><br></pre></td></tr></table></figure><p><img src="http://qnpic.top\django_mysql%5C4.jpg" alt="img"></p><blockquote><p>4.属性权限使配置生效</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span></span><br></pre></td></tr></table></figure><blockquote><p>5.现在就可以启动Django服务了</p></blockquote><p><br><br><br>So，Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Django连接MySql的几点注意事项&quot;&gt;&lt;a href=&quot;#Django连接MySql的几点注意事项&quot; class=&quot;headerlink&quot; title=&quot;Django连接MySql的几点注意事项&quot;&gt;&lt;/a&gt;Django连接MySql的几点注意事项&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在重装电脑后的系统中，这几天内也是陷入了安装软件的小小痛苦中，&lt;a href=&quot;/2019/01/29/MySql-安装和简单配置/&quot;&gt;上篇博客&lt;/a&gt;也是简单说了下Windows下如何安装MySql，现在就来讲解一下Django运行使用到MySql的一些注意事项。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.lightfisher.cn/categories/Python/"/>
    
      <category term="Django" scheme="http://www.lightfisher.cn/categories/Python/Django/"/>
    
    
      <category term="MySql" scheme="http://www.lightfisher.cn/tags/MySql/"/>
    
      <category term="Django" scheme="http://www.lightfisher.cn/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>MySql 安装和简单配置</title>
    <link href="http://www.lightfisher.cn/2019/01/29/MySql-%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.lightfisher.cn/2019/01/29/MySql-安装和简单配置/</id>
    <published>2019-01-29T07:00:00.000Z</published>
    <updated>2019-01-29T08:15:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySql安装和配置"><a href="#MySql安装和配置" class="headerlink" title="MySql安装和配置"></a>MySql安装和配置</h1><blockquote><p>今日也是因为自己的原因，导致电脑的硬盘坏了(我也是纳闷了，就是从一个不到一米的桌子上摔下来就莫得了QAQ)，从而，只能换一个。原来的电脑里的数据也是就此没了，懒得去开盘，可怜我的400G的资源。哎~~~，今天也是想写一篇关于Django的发送邮件和密码验证，安装好pycharm和其他的运行环境，emmmm，在MySql上卡顿了一下就来简单写一篇关于MySql的安装和配置，来完成新硬盘的第一篇博客。</p></blockquote><a id="more"></a><h2 id="Windows上安装"><a href="#Windows上安装" class="headerlink" title="Windows上安装"></a>Windows上安装</h2><blockquote><p>其实Windows上安装MySql还简单点，奈何以前安装了个wamp就自动装好了就不是很在意。这里就可以再介绍下，最新版本可以直接去<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">MySql官网</a>下载,(这里下载的是zip，解压简单配置下就行了)</p></blockquote><p><img src="http://qnpic.top\MySql_down%5C1.jpg" alt="img"></p><blockquote><p>点击下载，它就提示你可以登录或者注册，你也可以点击跳过。</p></blockquote><p><img src="http://qnpic.top\MySql_down%5C2.jpg" alt="img"></p><blockquote><p>下载完了后，我们就可以将zip压缩包解压到你想要的的目录下，我这里是<code>E:\mysql-8.0.14-winx64\mysql-8.0.14-winx64</code>,<strong>注意一下</strong>，这里是<strong>重难点</strong>，去年没考，今年必考，我这里推荐解压的目录要是纯英文的，最好不要有汉字，我第一次安装就是有汉字，网上也是半天搜查不到，所以我就试了一下，So，I got it.</p></blockquote><p><img src="http://qnpic.top\MySql_down%5C4.jpg" alt="img"></p><ul><li>下图就是我进行后边的操作而错误的原因，不要像我一样哦~</li></ul><p><img src="http://qnpic.top\MySql_down%5C3.jpg" alt="img"></p><blockquote><p>接下来，我们就可以来配置MySql的配置文件，在上图的解压文件目录<code>E:\mysql-8.0.14-winx64\mysql-8.0.14-winx64</code>下，创建<code>my.ini</code>文件(在上二图也是可以看到)，编辑<code>my.ini</code>，添加以下信息：</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attribute">default-character-set</span>=utf8</span><br><span class="line"> </span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line">port = 3306</span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attribute">basedir</span>=E:\\mysql-8.0.14-winx64\\mysql-8.0.14-winx64</span><br><span class="line"><span class="comment"># 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错</span></span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attribute">max_connections</span>=20</span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line"><span class="attribute">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attribute">default-storage-engine</span>=INNODB</span><br></pre></td></tr></table></figure><blockquote><p>接下来启动MySql数据库，打开cmd命令行工具(不要问我为什么不和你们一样，我用的是<code>cmder</code>，emmm，你们可以去百度一下)，切换到MySql的bin目录下：</p></blockquote><p><img src="http://qnpic.top\MySql_down%5C5.jpg" alt="img"></p><blockquote><p>初始化数据库：</p></blockquote><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">mysqld</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">initialize</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">console</span></span><br></pre></td></tr></table></figure><p><img src="http://qnpic.top\MySql_down%5C6.jpg" alt="img"></p><blockquote><p>执行完成后哦，上图的<code>drpzXoa=e8&gt;e</code>就是root用户的初始化密码，后续登录有用。然后输入一下安装命令：</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld <span class="keyword">install</span></span><br></pre></td></tr></table></figure><p><img src="http://qnpic.top\MySql_down%5C8.jpg" alt="img"></p><blockquote><p>这里就简单拓展一下，可能是电脑里之前安装过MySql，就会出现下图的错误,你可以输入<code>mysqld -remove MySQL</code>,从而卸载之前的MySql。</p></blockquote><p><img src="http://qnpic.top\MySql_down%5C7.jpg" alt="img"></p><p><img src="http://qnpic.top\MySql_down%5C9.jpg" alt="img"></p><blockquote><p>以上就基本安装完成了，输入一下命令就可以启动MySql服务：</p></blockquote><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> mysql</span><br></pre></td></tr></table></figure><p><img src="http://qnpic.top\MySql_down%5C10.jpg" alt="i"></p><h2 id="登录MySql"><a href="#登录MySql" class="headerlink" title="登录MySql"></a>登录MySql</h2><blockquote><p>当 MySQL 服务已经运行时, 我们可以通过 MySQL 自带的客户端工具登录到 MySQL 数据库中, 首先打开命令提示符, 输入以下格式的命名:</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mysql</span> -h 主机名 -u 用户名 -p</span><br></pre></td></tr></table></figure><blockquote><p>参数说明：</p></blockquote><ul><li><ol><li>-h : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略;</li></ol></li><li><ol start="2"><li>-u : 登录的用户名;</li></ol></li><li><ol start="3"><li>-p : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。</li></ol></li></ul><blockquote><p>如果我们要登录本体的MySql数据库，只需要输入以下命令：</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mysql -u root -p</span></span><br></pre></td></tr></table></figure><blockquote><p>回车确认后，就会提示输入密码<code>Enter password:</code>,<strong>注意一下</strong>，如果你是第一次启动，密码就是上面的初始化密码<code>drpzXoa=e8&gt;e</code>,输入后就可以进入Mysql服务界面。</p></blockquote><p><img src="http://qnpic.top\MySql_down%5C11.jpg" alt="img"></p><blockquote><p>是不是到这里就以为好了，no no no，至少这个现在版本不是(眼尖的应该就看到了，我输入<code>show databases</code>命令确实跳错，emmm，第一次还输错了，见笑了~~)，咳，这里依旧是重点，相信有点英语基础的也是能看得懂的，就是说要你重置下密码，毕竟初始化的密码实在是太“真实”了，So, You should input code: </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span>  <span class="keyword">user</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'111111'</span>; <span class="comment"># 你也可以输入自己想要的密码</span></span><br></pre></td></tr></table></figure><p><img src="http://qnpic.top\MySql_down%5C12.jpg" alt="img"></p><p><br><br><br>到这里就结束了本次的博客，So，Just For Fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySql安装和配置&quot;&gt;&lt;a href=&quot;#MySql安装和配置&quot; class=&quot;headerlink&quot; title=&quot;MySql安装和配置&quot;&gt;&lt;/a&gt;MySql安装和配置&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;今日也是因为自己的原因，导致电脑的硬盘坏了(我也是纳闷了，就是从一个不到一米的桌子上摔下来就莫得了QAQ)，从而，只能换一个。原来的电脑里的数据也是就此没了，懒得去开盘，可怜我的400G的资源。哎~~~，今天也是想写一篇关于Django的发送邮件和密码验证，安装好pycharm和其他的运行环境，emmmm，在MySql上卡顿了一下就来简单写一篇关于MySql的安装和配置，来完成新硬盘的第一篇博客。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="MySql" scheme="http://www.lightfisher.cn/categories/MySql/"/>
    
    
      <category term="MySql" scheme="http://www.lightfisher.cn/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>Django 实现发送邮件密码找回</title>
    <link href="http://www.lightfisher.cn/2019/01/29/Django-%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%AF%86%E7%A0%81%E6%89%BE%E5%9B%9E/"/>
    <id>http://www.lightfisher.cn/2019/01/29/Django-实现发送邮件密码找回/</id>
    <published>2019-01-29T06:16:00.000Z</published>
    <updated>2019-01-29T11:20:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-发送邮件实现密码找回"><a href="#Django-发送邮件实现密码找回" class="headerlink" title="Django 发送邮件实现密码找回"></a>Django 发送邮件实现密码找回</h1><blockquote><p>这次的博客使用的是Django内置的邮件功能实现邮件的验证。So，show you now。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>在实现邮件发送功能之前，我们需要对邮件进行相关配置，以QQ邮箱为例，在QQ邮箱的设置中找到账户设置，在账户设置中找到<code>POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV</code>服务，然后开启<code>POP3/SMTP</code>服务。值得注意的是，开启服务的时候会返回一个客户的授权密码，改密码是用于登陆第三方邮件客户端的专用密码，切记保存密码，该密码在开发过程中需要使用。</p></blockquote><a id="more"></a><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><blockquote><p>1.在Django的<code>setting.py</code>中添加QQ邮箱的相关配置，配置信息如下：</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 邮件配置信息</span></span><br><span class="line"><span class="attr">EMAIL_USE_SSL</span> = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件服务器， 如果是163邮箱就改成smtp.163.com</span></span><br><span class="line"><span class="attr">EMAIL_HOST</span> = ‘smtp.qq.com’</span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件服务的端口</span></span><br><span class="line"><span class="attr">EMAIL_PORT</span> = <span class="number">465</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送邮件的账号，也就是前面你开启服务的邮箱号</span></span><br><span class="line"><span class="attr">EMAIL_HOST_USER</span> = ‘<span class="number">1426286337</span>@qq.com’</span><br><span class="line"></span><br><span class="line"><span class="comment"># SMTP服务密码</span></span><br><span class="line"><span class="attr">EMAIL_HOST_PASSWORD</span> = ‘xxxxxx’</span><br><span class="line"><span class="attr">DEFAULT_FROM_EMAIL</span> = EMAIL_HOST_USER</span><br></pre></td></tr></table></figure><blockquote><p>2.上述配置是邮件发送方的邮件服务器信息，各个配置信息说明如下</p></blockquote><ul><li><p>1.EMAIL_USER_SSL：设置Django与邮件服务器的连接方式为SSL。</p></li><li><p>2.EMAIL_HOST：设置服务器的地址，该配置使用SMTP服务器</p></li><li><p>3.EMAIL_PORT：设置服务器端口的信息，若使用的是SMTP服务器，则端口应为<code>465</code>或<code>587</code></p></li><li><p>4.EMAIL_HOST_USER： 发送邮件的账号，该账号必须开启了<code>POP3/SMTP</code>服务</p></li><li><p>5.EMAIL_HOST_PASSWORD：客户端授权密码</p></li><li><p>6.DEFAULT_FROM_EMAIL：设置默认发送邮件的账号</p></li></ul><h2 id="简单验证"><a href="#简单验证" class="headerlink" title="简单验证"></a>简单验证</h2><blockquote><p>这里就简单的来验证一下</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># urls.py代码</span></span><br><span class="line"><span class="keyword">from</span> django.urls import path</span><br><span class="line"><span class="keyword">from</span> . Import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(‘findpassword.html’, views.findPassword, name=‘findPassword’),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="meta"># 模板html文件中的form表单</span></span><br><span class="line">        &lt;h1&gt;MyDjango Auth&lt;/h1&gt;</span><br><span class="line">            &#123;% <span class="keyword">if</span> tips %&#125;</span><br><span class="line">        &lt;div&gt;&#123;&#123; tips &#125;&#125;&lt;/div&gt;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">        &lt;form <span class="keyword">class</span>=<span class="string">"form"</span> action=<span class="string">"&#123;% url 'findPassword' %&#125;"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">            &#123;% csrf_token %&#125;</span><br><span class="line">            &lt;div&gt;用户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">'username'</span> <span class="keyword">value</span>=<span class="string">"&#123;&#123; username &#125;&#125;"</span>&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;验证码:&lt;input type=<span class="string">"text"</span> name=<span class="string">'VerificationCode'</span>&gt;&lt;/div&gt;</span><br><span class="line">            &#123;% <span class="keyword">if</span> new_password %&#125;</span><br><span class="line">                &lt;div&gt;新密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">'password'</span>&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div&gt;重复密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">'re_password'</span>&gt;&lt;/div&gt;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">            &lt;button type=<span class="string">"submit"</span> <span class="keyword">class</span>=<span class="string">"btn btn-primary btn-block"</span>&gt;&#123;&#123; button &#125;&#125;&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">        &lt;div <span class="keyword">class</span>=<span class="string">"flex-left top-gap text-small"</span>&gt;</span><br><span class="line">            &lt;div <span class="keyword">class</span>=<span class="string">"unit-2-3"</span>&gt;</span><br><span class="line">                &lt;a href=<span class="string">"&#123;&#123; unit_2 &#125;&#125;"</span>&gt;&#123;&#123; unit_2_name &#125;&#125;&lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div <span class="keyword">class</span>=<span class="string">"unit-1-3 flex-right"</span>&gt;</span><br><span class="line">                &lt;a href=<span class="string">"&#123;&#123; unit_1 &#125;&#125;"</span>&gt;&#123;&#123; unit_1_name &#125;&#125;&lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta"># view.py的视图函数</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts import render,redirect</span><br><span class="line"><span class="keyword">from</span> django.http import HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models import User</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth import login,logout,authenticate</span><br><span class="line">import random</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.hashers import make_password</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">findPassword</span>(<span class="params">request</span>):</span></span><br><span class="line"><span class="function">    button</span> = <span class="string">' 获取验证码 '</span></span><br><span class="line">    new_password = False</span><br><span class="line">    title = <span class="string">' 修改密码 '</span></span><br><span class="line">    unit_2 = <span class="string">'/user/login.html'</span></span><br><span class="line">    unit_2_name = <span class="string">' 立即登录 '</span></span><br><span class="line">    unit_1 = <span class="string">'/user/register.html'</span></span><br><span class="line">    unit_1_name = <span class="string">' 立即注册 '</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.<span class="keyword">get</span>(<span class="string">'username'</span>,<span class="string">''</span>)</span><br><span class="line">        VerificationCode = request.POST.<span class="keyword">get</span>(<span class="string">'VerificationCode'</span>,<span class="string">''</span>)</span><br><span class="line">        password = request.POST.<span class="keyword">get</span>(<span class="string">'password'</span>,<span class="string">''</span>)</span><br><span class="line">        re_password = request.POST.<span class="keyword">get</span>(<span class="string">'re_password'</span>,<span class="string">''</span>)</span><br><span class="line">        user = User.objects.filter(username=username)</span><br><span class="line">        <span class="keyword">if</span> not user:</span><br><span class="line">            tips = <span class="string">' 用户'</span>+username+<span class="string">' 不存在'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> not request.session.<span class="keyword">get</span>(<span class="string">'VerificationCode'</span>,<span class="string">''</span>):</span><br><span class="line">                button = <span class="string">' 重置密码 '</span></span><br><span class="line">                tips = <span class="string">' 验证码发送 '</span></span><br><span class="line">                new_password = True</span><br><span class="line">                VerificationCode = str(random.randint(<span class="number">1000</span>,<span class="number">9999</span>))</span><br><span class="line">                request.session[<span class="string">'VerificationCode'</span>] = VerificationCode</span><br><span class="line">                user[<span class="number">0</span>].email_user(<span class="string">' 找回密码 '</span>, VerificationCode)</span><br><span class="line">            elif VerificationCode == request.session.<span class="keyword">get</span>(<span class="string">'VerificationCode'</span>,<span class="string">''</span>):</span><br><span class="line">                <span class="keyword">if</span> password == re_password:</span><br><span class="line">                    dj_ps = make_password(password, None, <span class="string">'pbkdf2_sha256'</span>)</span><br><span class="line">                    user[<span class="number">0</span>].password = dj_ps</span><br><span class="line">                    user[<span class="number">0</span>].save()</span><br><span class="line">                    del request.session[<span class="string">'VerificationCode'</span>]</span><br><span class="line">                    request.session[<span class="string">'user'</span>] = username</span><br><span class="line">                    <span class="keyword">return</span> redirect(<span class="string">'/'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    tips = <span class="string">' 前后密码不同 '</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tips = <span class="string">' 验证码错误，请重新获取 '</span></span><br><span class="line">                new_password = False</span><br><span class="line">                del request.session[<span class="string">'VerificationCode'</span>]</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'find.html'</span>,locals())</span><br></pre></td></tr></table></figure><blockquote><p>用户第一次访问的时候，触发<code>GET</code>请求，视图函数直接将模板返回，只有账号和验证码要求输入。当用户输入用户名，并且输入正确，单击“获取验证码”按钮，触发<code>POST</code>请求，视图函数findPassword 首先根据输入的用户名和模型中的User里的数据进行查找，若不存在生成提示信息。</p></blockquote><p><img src="http://qnpic.top\django_send_message%5C1.jpg" alt="img"></p><blockquote><p>如果存在，判断会话<code>session</code>的<code>VerificationCode</code>是否存在。若不存在则发送邮件，验证码是<code>random</code>函数随机生成的，并将验证码写入会话session的VericationCode，其作用是与用户输入的验证码进行匹配。</p></blockquote><blockquote><p>邮件的发送使用内置的函数 <code>email_user</code> 实现的，该方法是模型 <code>User</code> 特有的方法之一，只适用于模型User，需要注意的是，用户的邮箱来自于模型User的字段email，邮箱信息为空的话是无法发送成功的。</p></blockquote><blockquote><p>用户收到验证码以后，输入验证码然后单击，触发 <code>POST</code> 请求，视图函数就会获取用户输入的验证码和<code>session</code>中的 <code>VericationCode</code>进行对比，不符合系统就会提示，如下图</p></blockquote><blockquote><p>如果相符，就会执行密码修改，然后使用 <code>make_password</code> 对密码加密处理并保存在模型User 中，最后记得要删除session中的 <code>VericationCode</code>，否则会画会一直存在，在下次获取验证码的时候就会出错。</p></blockquote><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><blockquote><p>除了使用内置 <code>email_user</code> 实现邮件发送之外，Django还提供多种发送方式，我在Django的shell模式中进行讲解，代码如下：</p></blockquote><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell <span class="comment"># 启动shell模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings. <span class="comment"># 获取setting.py的配置信息</span></span><br><span class="line"></span><br><span class="line">from_email = settings.DEFAULT_FROM_EMAIL</span><br><span class="line"><span class="comment"># 发送邮件，接受邮件以列表表示，说明可设置多个接收对象</span></span><br><span class="line">send_mail(‘MyDjango’, ‘This <span class="keyword">is</span> a email <span class="keyword">from</span> Django’, from_email, [‘<span class="number">1223</span>@qq.com’])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 send_mass_mail 实现多封邮件同时发送</span></span><br><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mass_mail</span><br><span class="line">Message1 = (‘MyDjango’, ‘This <span class="keyword">is</span> Django’, from_email, [‘<span class="number">123</span>@qq.com’])</span><br><span class="line">Message2 = (‘MyDjango’, ‘This <span class="keyword">is</span> Django’, from_email, [‘<span class="number">234</span>@qq.com’])</span><br><span class="line">send_mass_mail((Message1, Message2), fail_silently=Flase)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用EmailMultiAlternatives 实现邮件发送</span></span><br><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> EmailMultiAlternatives</span><br><span class="line">content = ‘&lt;p&gt;这是一封&lt;strong&gt;重要的&lt;strong&gt;邮件 &lt;/p&gt;’</span><br><span class="line">msg = EmailMultiAlternatives(‘MyDjango’, content, from_email, [‘<span class="number">123</span>@qq.com’])</span><br><span class="line"><span class="comment"># 设置正文为HTML格式</span></span><br><span class="line">msg.content_subtype = ‘html’</span><br><span class="line"><span class="comment"># attach_alternative 对正文进行补充和添加</span></span><br><span class="line">msg.attach_alternative(‘&lt;strong&gt;This <span class="keyword">is</span> <span class="keyword">from</span> Django&lt;/strong&gt;’, ‘text/html’)</span><br><span class="line"><span class="comment"># 添加附件（可选）</span></span><br><span class="line">msg.attach_file(‘E:<span class="regexp">//</span>attach files.csv’)</span><br><span class="line"><span class="comment"># 发送</span></span><br><span class="line">msg.send()</span><br></pre></td></tr></table></figure><blockquote><p>上述例子中，方法说明如下</p></blockquote><ul><li><p>1.使用 send_mail 每次发送都会建立一次连接，发送多封就会多次建立连接</p></li><li><p>2.使用send_mass_mail 是建立单个连接发送多个邮件，优于send_mail</p></li><li><p>3.使用 EmailMultiAlternatives 比前两个更为人性化，正文内容可以为HTML格式，也可添加附件，满足多方面的开发需求</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Django-发送邮件实现密码找回&quot;&gt;&lt;a href=&quot;#Django-发送邮件实现密码找回&quot; class=&quot;headerlink&quot; title=&quot;Django 发送邮件实现密码找回&quot;&gt;&lt;/a&gt;Django 发送邮件实现密码找回&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这次的博客使用的是Django内置的邮件功能实现邮件的验证。So，show you now。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在实现邮件发送功能之前，我们需要对邮件进行相关配置，以QQ邮箱为例，在QQ邮箱的设置中找到账户设置，在账户设置中找到&lt;code&gt;POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV&lt;/code&gt;服务，然后开启&lt;code&gt;POP3/SMTP&lt;/code&gt;服务。值得注意的是，开启服务的时候会返回一个客户的授权密码，改密码是用于登陆第三方邮件客户端的专用密码，切记保存密码，该密码在开发过程中需要使用。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.lightfisher.cn/categories/Python/"/>
    
      <category term="Django" scheme="http://www.lightfisher.cn/categories/Python/Django/"/>
    
    
      <category term="Python" scheme="http://www.lightfisher.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://www.lightfisher.cn/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>浅谈神器termux</title>
    <link href="http://www.lightfisher.cn/2019/01/28/%E6%B5%85%E8%B0%88%E7%A5%9E%E5%99%A8termux/"/>
    <id>http://www.lightfisher.cn/2019/01/28/浅谈神器termux/</id>
    <published>2019-01-28T09:22:00.000Z</published>
    <updated>2019-01-28T09:23:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈神器termux"><a href="#浅谈神器termux" class="headerlink" title="浅谈神器termux"></a>浅谈神器termux</h1><blockquote><p>Termux是一个Android下一个高级的终端模拟器，开源且不需要root,支持apt管理软件包，十分方便安装软件包，完美支持Python,PHP,Ruby,Go,Nodejs,MySQL等。随着智能设备的普及和性能的不断提升，如今的手机、平板等的硬件标准已达到了初级桌面计算机的硬件标准,用心去打造完全可以把手机变成一个强大的工具.今天就简单来介绍一下。</p></blockquote><a id="more"></a><blockquote><p>由于，本人学艺不精，这里就只是简单给出学习地址。<a href="https://www.freebuf.com/geek/170510.html" target="_blank" rel="noopener">点这里</a></p></blockquote><p><br><br><br>emmm,好好学习，你几乎可以完成在电脑上的一切操作，如hexo博客的搭建，nginx搭建，mysql搭建等等，So</p><p>Just Have Fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;浅谈神器termux&quot;&gt;&lt;a href=&quot;#浅谈神器termux&quot; class=&quot;headerlink&quot; title=&quot;浅谈神器termux&quot;&gt;&lt;/a&gt;浅谈神器termux&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Termux是一个Android下一个高级的终端模拟器，开源且不需要root,支持apt管理软件包，十分方便安装软件包，完美支持Python,PHP,Ruby,Go,Nodejs,MySQL等。随着智能设备的普及和性能的不断提升，如今的手机、平板等的硬件标准已达到了初级桌面计算机的硬件标准,用心去打造完全可以把手机变成一个强大的工具.今天就简单来介绍一下。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="termux" scheme="http://www.lightfisher.cn/categories/termux/"/>
    
    
      <category term="termux" scheme="http://www.lightfisher.cn/tags/termux/"/>
    
  </entry>
  
  <entry>
    <title>手机命令行百度云，跟限速说拜拜</title>
    <link href="http://www.lightfisher.cn/2019/01/28/%E6%89%8B%E6%9C%BA%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%99%BE%E5%BA%A6%E4%BA%91%EF%BC%8C%E8%B7%9F%E9%99%90%E9%80%9F%E8%AF%B4%E6%8B%9C%E6%8B%9C/"/>
    <id>http://www.lightfisher.cn/2019/01/28/手机命令行百度云，跟限速说拜拜/</id>
    <published>2019-01-28T08:46:00.000Z</published>
    <updated>2019-01-28T09:20:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="termux的简单使用，命令行百度云"><a href="#termux的简单使用，命令行百度云" class="headerlink" title="termux的简单使用，命令行百度云"></a>termux的简单使用，命令行百度云</h1><blockquote><p>相信在日常的生活中，我们都使用过百度云，但是百度云的限速是真的烦。可能电脑版的，我们有速盘,<a href="http://pandownload.com/" target="_blank" rel="noopener">pandownload</a> (访问的慢的话，这里有<a href="https://pan.baidu.com/s/1pJBJRNSSu9FH9yF8ATFl_w" target="_blank" rel="noopener">资源</a> 提取码: fbjt)等一些软件来破解。但是手机端的百度云确实慢滴很，这里我就简单介绍下</p></blockquote><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>这里就是几点要求</p></blockquote><ul><li><p>1.有安卓手机</p></li><li><p>2.手机安装了百度云</p></li><li><p>3.对手机有了解，不是纯小白</p></li><li><p>4.<code>BaiduPCS-Go</code>官方<a href="https://github.com/iikira/BaiduPCS-Go" target="_blank" rel="noopener">开源地址</a></p></li></ul><h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><h4 id="1-下载并安装termux-下载地址：https-www-coolapk-com-apk-com-termux"><a href="#1-下载并安装termux-下载地址：https-www-coolapk-com-apk-com-termux" class="headerlink" title="1.下载并安装termux,下载地址：https://www.coolapk.com/apk/com.termux"></a>1.下载并安装<code>termux</code>,下载地址：<a href="https://www.coolapk.com/apk/com.termux" target="_blank" rel="noopener">https://www.coolapk.com/apk/com.termux</a></h4><h4 id="2-授权允许存储，也就是执行"><a href="#2-授权允许存储，也就是执行" class="headerlink" title="2.授权允许存储，也就是执行:"></a>2.授权允许存储，也就是执行:</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">termux-<span class="built_in">setup</span>-storage</span><br></pre></td></tr></table></figure><h4 id="3-添加软件源，也就是执行："><a href="#3-添加软件源，也就是执行：" class="headerlink" title="3.添加软件源，也就是执行："></a>3.添加软件源，也就是执行：</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"deb [trusted=yes] http://termux.iikira.com stable main"</span> &gt;&gt; <span class="regexp">/data/</span>data<span class="regexp">/com.termux/</span>files<span class="regexp">/usr/</span>etc<span class="regexp">/apt/</span>sources.list</span><br></pre></td></tr></table></figure><h4 id="4-更新软件源，也就是执行"><a href="#4-更新软件源，也就是执行" class="headerlink" title="4.更新软件源，也就是执行:"></a>4.更新软件源，也就是执行:</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">apt update</span></span><br></pre></td></tr></table></figure><p><img src="http://qnpic.top\termux_baiduyun%5C1.png" width="250"></p><h4 id="5-安装BaiduPCS-Go，也就是执行"><a href="#5-安装BaiduPCS-Go，也就是执行" class="headerlink" title="5.安装BaiduPCS-Go，也就是执行:"></a>5.安装BaiduPCS-Go，也就是执行:</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt <span class="keyword">install</span> baidupcs-<span class="keyword">go</span></span><br></pre></td></tr></table></figure><p><img src="http://qnpic.top\termux_baiduyun%5C2.png" width="250"></p><h4 id="6-开始运行BaiduPCS-Go，也就是执行："><a href="#6-开始运行BaiduPCS-Go，也就是执行：" class="headerlink" title="6.开始运行BaiduPCS-Go，也就是执行："></a>6.开始运行BaiduPCS-Go，也就是执行：</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">BaiduPCS-Go</span></span><br></pre></td></tr></table></figure><h4 id="7-登录百度云账号，也就是执行login："><a href="#7-登录百度云账号，也就是执行login：" class="headerlink" title="7.登录百度云账号，也就是执行login："></a>7.登录百度云账号，也就是执行<code>login</code>：</h4><h4 id="8-按要求输入账号，然后回车，然后输入密码，注意：密码输入的过程中是不会显示出来的，这是为了安全。"><a href="#8-按要求输入账号，然后回车，然后输入密码，注意：密码输入的过程中是不会显示出来的，这是为了安全。" class="headerlink" title="8.按要求输入账号，然后回车，然后输入密码，注意：密码输入的过程中是不会显示出来的，这是为了安全。"></a>8.按要求输入账号，然后回车，然后输入密码，注意：密码输入的过程中是不会显示出来的，这是为了安全。</h4><h4 id="9-期间如果要输入验证码，就长按复制那个验证码图片链接，然后粘贴到浏览器打开。如果登录失败，可输入login重新登一次。"><a href="#9-期间如果要输入验证码，就长按复制那个验证码图片链接，然后粘贴到浏览器打开。如果登录失败，可输入login重新登一次。" class="headerlink" title="9.期间如果要输入验证码，就长按复制那个验证码图片链接，然后粘贴到浏览器打开。如果登录失败，可输入login重新登一次。"></a>9.期间如果要输入验证码，就长按复制那个验证码图片链接，然后粘贴到浏览器打开。如果登录失败，可输入<code>login</code>重新登一次。</h4><p><img src="http://qnpic.top\termux_baiduyun%5C3.png" width="250"></p><h4 id="10-登录成功后，我们配置一下appid，执行下面这句"><a href="#10-登录成功后，我们配置一下appid，执行下面这句" class="headerlink" title="10.登录成功后，我们配置一下appid，执行下面这句"></a>10.登录成功后，我们配置一下<code>appid</code>，执行下面这句</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config <span class="keyword">set</span> <span class="comment">--appid 265486</span></span><br></pre></td></tr></table></figure><h4 id="11-接着，我们来配置下载保存位置，假如我想保存到-sdcard-百度云，那么我应该执行-请确保你的-sdcard下真的有这个文件夹，没有就自己创建一个-："><a href="#11-接着，我们来配置下载保存位置，假如我想保存到-sdcard-百度云，那么我应该执行-请确保你的-sdcard下真的有这个文件夹，没有就自己创建一个-：" class="headerlink" title="11.接着，我们来配置下载保存位置，假如我想保存到/sdcard/百度云，那么我应该执行(请确保你的/sdcard下真的有这个文件夹，没有就自己创建一个)："></a>11.接着，我们来配置下载保存位置，假如我想保存到<code>/sdcard/百度云</code>，那么我应该执行(请确保你的/sdcard下真的有这个文件夹，没有就自己创建一个)：</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config <span class="keyword">set</span> --savedir <span class="comment">'/sdcard/百度云'</span></span><br></pre></td></tr></table></figure><p><img src="http://qnpic.top\termux_baiduyun%5C4.png" width="250"><br><img src="http://qnpic.top\termux_baiduyun%5C12.png" width="250"></p><h4 id="12-设置下载线程，官方默认100线程，可以设置50～500。我想设置300-理论上线程越多下载越快。-，则应该执行"><a href="#12-设置下载线程，官方默认100线程，可以设置50～500。我想设置300-理论上线程越多下载越快。-，则应该执行" class="headerlink" title="12.设置下载线程，官方默认100线程，可以设置50～500。我想设置300(理论上线程越多下载越快。)，则应该执行"></a>12.设置下载线程，官方默认100线程，可以设置50～500。我想设置300(理论上线程越多下载越快。)，则应该执行</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config <span class="keyword">set</span> <span class="comment">--max_parallel 300</span></span><br></pre></td></tr></table></figure><p><img src="http://qnpic.top\termux_baiduyun%5C6.png" width="250"></p><h4 id="13-设置同时下载数量上限为3，则应该执行-注意大小写："><a href="#13-设置同时下载数量上限为3，则应该执行-注意大小写：" class="headerlink" title="13.设置同时下载数量上限为3，则应该执行,注意大小写："></a>13.设置同时下载数量上限为3，则应该执行,注意大小写：</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config <span class="keyword">set</span> <span class="comment">--max_download_load 3</span></span><br></pre></td></tr></table></figure><p><img src="http://qnpic.top\termux_baiduyun%5C7.png" width="250"></p><h4 id="14-上面的搞完后，把termux强制关闭。然后，进入某个浏览器，打开百度云官网登录百度云，登完后再复制下面这个网址，粘贴到刚刚登完账号的浏览器并访问。"><a href="#14-上面的搞完后，把termux强制关闭。然后，进入某个浏览器，打开百度云官网登录百度云，登完后再复制下面这个网址，粘贴到刚刚登完账号的浏览器并访问。" class="headerlink" title="14.上面的搞完后，把termux强制关闭。然后，进入某个浏览器，打开百度云官网登录百度云，登完后再复制下面这个网址，粘贴到刚刚登完账号的浏览器并访问。"></a>14.上面的搞完后，把<code>termux</code>强制关闭。然后，进入某个浏览器，打开百度云<a href="http://pan.baidu.com" target="_blank" rel="noopener">官网</a>登录百度云，登完后再复制下面这个网址，粘贴到刚刚登完账号的浏览器并访问。</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>pcs.baidu.com<span class="regexp">/rest/</span><span class="number">2.0</span><span class="regexp">/pcs/</span>file?app_id=<span class="number">265486</span>&amp;method=list&amp;path=%<span class="number">2</span>F</span><br></pre></td></tr></table></figure><h4 id="15-访问完网址后，不管有没有报错，打开手机版百度云，不出意外你的百度云的-我的应用数据-下面多出了个-baidu-shurufa文件夹。如图："><a href="#15-访问完网址后，不管有没有报错，打开手机版百度云，不出意外你的百度云的-我的应用数据-下面多出了个-baidu-shurufa文件夹。如图：" class="headerlink" title="15.访问完网址后，不管有没有报错，打开手机版百度云，不出意外你的百度云的 /我的应用数据 下面多出了个 baidu_shurufa文件夹。如图："></a>15.访问完网址后，不管有没有报错，打开手机版百度云，不出意外你的百度云的 /我的应用数据 下面多出了个 <code>baidu_shurufa</code>文件夹。如图：</h4><p><img src="http://qnpic.top\termux_baiduyun%5C10.png" width="250"></p><h4 id="16-在百度云app里，把你想下载的文件复制或者移动到-我的应用数据-baidu-shurufa里面，比如我想下载一个叫妹子图-wmv的视频："><a href="#16-在百度云app里，把你想下载的文件复制或者移动到-我的应用数据-baidu-shurufa里面，比如我想下载一个叫妹子图-wmv的视频：" class="headerlink" title="16.在百度云app里，把你想下载的文件复制或者移动到/我的应用数据/baidu_shurufa里面，比如我想下载一个叫妹子图.wmv的视频："></a>16.在百度云app里，把你想下载的文件复制或者移动到<code>/我的应用数据/baidu_shurufa</code>里面，比如我想下载一个叫<code>妹子图.wmv</code>的视频：</h4><p><img src="http://qnpic.top\termux_baiduyun%5C8.jpg" width="250"></p><h4 id="17-此时再重新打开termux，重新进入BaiduPCS-Go，也就是执行BaiduPCS-Go"><a href="#17-此时再重新打开termux，重新进入BaiduPCS-Go，也就是执行BaiduPCS-Go" class="headerlink" title="17.此时再重新打开termux，重新进入BaiduPCS-Go，也就是执行BaiduPCS-Go"></a>17.此时再重新打开<code>termux</code>，重新进入<code>BaiduPCS-Go</code>，也就是执行<code>BaiduPCS-Go</code></h4><p><img src="http://qnpic.top\termux_baiduyun%5C9.jpg" width="250"></p><h4 id="18-下载妹子图-wmv的视频-先执行cd-apps-baidu-shurufa-然后执行d-39-妹子图-wmv-39-可以看到，下载的速度还是很快的。"><a href="#18-下载妹子图-wmv的视频-先执行cd-apps-baidu-shurufa-然后执行d-39-妹子图-wmv-39-可以看到，下载的速度还是很快的。" class="headerlink" title="18.下载妹子图.wmv的视频,先执行cd /apps/baidu_shurufa,然后执行d &#39;妹子图.wmv&#39;,可以看到，下载的速度还是很快的。"></a>18.下载<code>妹子图.wmv</code>的视频,先执行<code>cd /apps/baidu_shurufa</code>,然后执行<code>d &#39;妹子图.wmv&#39;</code>,可以看到，下载的速度还是很快的。</h4><p><img src="http://qnpic.top\termux_baiduyun%5C11.png" width="250"></p><h4 id="19-下载完可以进你刚才设置的默认下载目录，你下载的文件就在那里。（比如：我的文件就在-sdcard-百度云。）"><a href="#19-下载完可以进你刚才设置的默认下载目录，你下载的文件就在那里。（比如：我的文件就在-sdcard-百度云。）" class="headerlink" title="19.下载完可以进你刚才设置的默认下载目录，你下载的文件就在那里。（比如：我的文件就在/sdcard/百度云。）"></a>19.下载完可以进你刚才设置的默认下载目录，你下载的文件就在那里。（比如：我的文件就在/sdcard/百度云。）</h4><p><img src="http://qnpic.top\termux_baiduyun%5C13.png" width="250"><br><img src="http://qnpic.top\termux_baiduyun%5C14.png" width="250"><br><img src="http://qnpic.top\termux_baiduyun%5C15.png" width="250"><br><img src="http://qnpic.top\termux_baiduyun%5C16.png" width="250"></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h3 id="问题1：怎么中途停止下载？"><a href="#问题1：怎么中途停止下载？" class="headerlink" title="问题1：怎么中途停止下载？"></a>问题1：怎么中途停止下载？</h3><blockquote><p>在<code>termux</code>里左边侧滑，长按<code>KEYBOARD</code>，然后你就会看到多了一行键盘，里面有<code>Ctrl</code>键，点击<code>Ctrl</code>键再点击自己的c（也就是Ctrl 和 c）就可以停止下载</p></blockquote><h3 id="问题2：怎么同时下载多个文件？"><a href="#问题2：怎么同时下载多个文件？" class="headerlink" title="问题2：怎么同时下载多个文件？"></a>问题2：怎么同时下载多个文件？</h3><blockquote><p>在<code>termux</code>左边侧滑，点击<code>NEW SESSION</code>，然后<code>termux</code>就会新建一个命令窗口，在里面输入<code>BaiduPCS-Go</code>就可以进入BaiduPCS-Go，然后想怎样就怎样，再下载就 <code>d ‘xxxxx.zip</code>’之类的。</p></blockquote><h3 id="问题3：我的想下的文件在多级文件夹里，怎么下？"><a href="#问题3：我的想下的文件在多级文件夹里，怎么下？" class="headerlink" title="问题3：我的想下的文件在多级文件夹里，怎么下？"></a>问题3：我的想下的文件在多级文件夹里，怎么下？</h3><blockquote><p>打个比方，比如在你的百度云app里，<code>/我的应用数据/baidu_shurufa/哈哈哈/啦啦啦</code>目录下，有一个叫 <code>么么哒.zip</code>，你想下载它。</p></blockquote><blockquote><p>那么，打开termux，输入BaiduPCS-Go，回车，然后输入<code>d ‘哈哈哈/啦啦啦/么么哒.zip’</code>，回车，搞定，开始下载。</p></blockquote><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><p>1.进入<code>BaiduPCS-Go</code>后，输入<code>help</code>回车可以看到官方指令帮助。</p></li><li><p>2.执行<code>ls</code>可列出当前文件和文件夹。</p></li><li><p>3.执行<code>cd xx</code>，xx是路径，可进入xx路径。</p></li><li><p>4.执行<code>cd ..</code>可回到上一层目录。</p></li><li><p>5.执行<code>pwd</code>可查看当前目录路径。</p></li><li><p>6.执行<code>logout</code>可退出登录（再次登执行<code>login</code>）</p></li><li><p>7.执行<code>su</code>可切换账号。</p></li><li><p>8.执行<code>locate xx</code>，可获得文件下载直链，xx为文件名。</p></li></ul><p><br><br><br>这次的博客就基本到这了，So just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;termux的简单使用，命令行百度云&quot;&gt;&lt;a href=&quot;#termux的简单使用，命令行百度云&quot; class=&quot;headerlink&quot; title=&quot;termux的简单使用，命令行百度云&quot;&gt;&lt;/a&gt;termux的简单使用，命令行百度云&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;相信在日常的生活中，我们都使用过百度云，但是百度云的限速是真的烦。可能电脑版的，我们有速盘,&lt;a href=&quot;http://pandownload.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pandownload&lt;/a&gt; (访问的慢的话，这里有&lt;a href=&quot;https://pan.baidu.com/s/1pJBJRNSSu9FH9yF8ATFl_w&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;资源&lt;/a&gt; 提取码: fbjt)等一些软件来破解。但是手机端的百度云确实慢滴很，这里我就简单介绍下&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="termux" scheme="http://www.lightfisher.cn/categories/termux/"/>
    
    
      <category term="termux" scheme="http://www.lightfisher.cn/tags/termux/"/>
    
  </entry>
  
  <entry>
    <title>GitBook 安装教程</title>
    <link href="http://www.lightfisher.cn/2019/01/28/GitBook-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://www.lightfisher.cn/2019/01/28/GitBook-安装教程/</id>
    <published>2019-01-28T08:28:00.000Z</published>
    <updated>2019-01-28T08:43:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitBook-安装教程"><a href="#GitBook-安装教程" class="headerlink" title="GitBook 安装教程"></a>GitBook 安装教程</h1><blockquote><p>GitBook 是一个基于 Node.js 的命令行工具，支持 Markdown 和 AsciiDoc 两种语法格式，可以输出 HTML、PDF、eBook 等格式的电子书，这里就简单介绍下GitBook的安装和基本使用。</p></blockquote><a id="more"></a><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><blockquote><p>1.去node.js官网下载安装包，根据自己电脑下载对应的版本，<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">下载地址</a></p></blockquote><p><img src="http://qnpic.top\gitbook%5C3.jpg" alt="node"></p><blockquote><p>2.一路默认下去，这里就截图说明安装node.js时候，node.js和npm都被安装了，并加入了环境变量(node.js和npm的关系类似python和pip的关系，npm就是一个包管理工具)</p></blockquote><p><img src="http://qnpic.top\gitbook%5C4.PNG" alt="img"></p><blockquote><p>3.安装完成就可以通过命令看版本号<code>node -v</code>和<code>npm -v</code>，验证了安装成功</p></blockquote><p><img src="http://qnpic.top\gitbook%5C5.jpg" alt="img"></p><h2 id="安装GitBook"><a href="#安装GitBook" class="headerlink" title="安装GitBook"></a>安装GitBook</h2><blockquote><p>4.执行命令 <code>npm install -g gitbook-cli</code> .下载好后出现了版本号，如下图</p></blockquote><p><img src="http://qnpic.top\gitbook%5C1.jpg" alt="img"></p><h2 id="安装GitBook-editor编辑软件"><a href="#安装GitBook-editor编辑软件" class="headerlink" title="安装GitBook-editor编辑软件"></a>安装GitBook-editor编辑软件</h2><blockquote><p>5.网上下载gitbook-editor软件,<a href="https://legacy.gitbook.com/editor" target="_blank" rel="noopener">下载地址</a> (<a href="https://legacy.gitbook.com/editor)" target="_blank" rel="noopener">https://legacy.gitbook.com/editor)</a>, 基本安装就行了</p></blockquote><p><img src="http://qnpic.top\gitbook%5C2.jpg" alt="img"></p><blockquote><p>6.无需登录，可以直接跳过</p></blockquote><p><img src="http://qnpic.top\gitbook%5C6.jpg" alt="img"></p><blockquote><p>7.<strong>注意：</strong> 该界面我们可以更改默认文件保存路径，点击菜单<code>GitBook Editor</code>菜单下的<code>Chang Library Path</code>,创建一个自己的文件存储路径</p></blockquote><p><img src="http://qnpic.top\gitbook%5C7.jpg" alt="img"></p><blockquote><p>8.点击新书名称，默认用英文</p></blockquote><p><img src="http://qnpic.top\gitbook%5C8.jpg" alt="imig"></p><blockquote><p>9.新建后打开首页</p></blockquote><p><img src="http://qnpic.top\gitbook%5C9.jpg" alt="img"></p><blockquote><p>10.修改每一个章节的名称</p></blockquote><p><img src="http://qnpic.top\gitbook%5C10.jpg" alt="img"></p><blockquote><p>11.左侧菜单可以添加目录或者子目录，右键添加</p></blockquote><p><img src="http://qnpic.top\gitbook%5C11.jpg" alt="img"></p><blockquote><p>12.如果你喜欢或熟悉<code>markdown</code>格式来编辑，你可以点击<font color="red"><b>右下角</b></font>不起眼打问号，这里有Markdown编辑开启预览模式，也有<code>setting</code>修改配置，开启后会分屏，在编辑的时候实时预览</p></blockquote><p><img src="http://qnpic.top\gitbook%5C12.jpg" alt="img"></p><blockquote><p>13.每次编辑完了后，记得保存哦~~</p></blockquote><blockquote><p>14.保存完了后，你可以在文件保存的所在目录下(shift+右键进入cmd界面)，输入命令<code>gitbook serve</code>(注意，是<code>serve</code>不是server)，在线网页预览，一般预览地址是 <code>localhost:4000</code></p></blockquote><p><img src="http://qnpic.top\gitbook%5C13.jpg" alt="img"></p><p><img src="http://qnpic.top\gitbook%5C14.jpg" alt="img"></p><blockquote><p>15.我们看下文件夹下面有什么，运行<code>gitbook serve</code>之前是没有静态网页的，运行成功后就会自动生成。如果你想做一个web电子书、文档、教程、而且自身前端水平不太好的情况下，就可以拿生成的html来嵌入web框架当做模板。</p></blockquote><p><img src="http://qnpic.top\gitbook%5C15.jpg" alt="img"></p><p><br><br><br>So,这次的GitBook简单安装和使用教程就到这了<br><br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GitBook-安装教程&quot;&gt;&lt;a href=&quot;#GitBook-安装教程&quot; class=&quot;headerlink&quot; title=&quot;GitBook 安装教程&quot;&gt;&lt;/a&gt;GitBook 安装教程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;GitBook 是一个基于 Node.js 的命令行工具，支持 Markdown 和 AsciiDoc 两种语法格式，可以输出 HTML、PDF、eBook 等格式的电子书，这里就简单介绍下GitBook的安装和基本使用。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Git" scheme="http://www.lightfisher.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="http://www.lightfisher.cn/tags/Git/"/>
    
      <category term="GitBook" scheme="http://www.lightfisher.cn/tags/GitBook/"/>
    
  </entry>
  
  <entry>
    <title>Python下载大文件</title>
    <link href="http://www.lightfisher.cn/2019/01/06/Python%E4%B8%8B%E8%BD%BD%E5%A4%A7%E6%96%87%E4%BB%B6/"/>
    <id>http://www.lightfisher.cn/2019/01/06/Python下载大文件/</id>
    <published>2019-01-06T12:39:00.000Z</published>
    <updated>2019-01-06T13:51:14.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用Python下载超大文件"><a href="#用Python下载超大文件" class="headerlink" title="用Python下载超大文件"></a>用Python下载超大文件</h1><blockquote><p>在日常的应用中，我们有时候会用Python下载超大文件，这个时候就需要进行调整了。Just show the code。</p></blockquote><a id="more"></a><blockquote><p>代码如下：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(url, stream=True)  <span class="comment"># 记得设置stream = True</span></span><br><span class="line"><span class="keyword">with</span> <span class="keyword">open</span>(local_filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">chunk</span> <span class="keyword">in</span> r.iter_content(chunk_size=<span class="number">1024</span>): <span class="comment"># chunk_size 每次下载1024个字节</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">chunk</span>: <span class="comment"># filter out keep-alive new chunks</span></span><br><span class="line">            f.write(<span class="keyword">chunk</span>)</span><br><span class="line">            f.flush() <span class="comment"># 刷新缓冲区</span></span><br></pre></td></tr></table></figure><p><br><br><br>Just Have Fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用Python下载超大文件&quot;&gt;&lt;a href=&quot;#用Python下载超大文件&quot; class=&quot;headerlink&quot; title=&quot;用Python下载超大文件&quot;&gt;&lt;/a&gt;用Python下载超大文件&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在日常的应用中，我们有时候会用Python下载超大文件，这个时候就需要进行调整了。Just show the code。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.lightfisher.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.lightfisher.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>科学上网</title>
    <link href="http://www.lightfisher.cn/2019/01/06/%E4%B8%8A%E7%BD%91/"/>
    <id>http://www.lightfisher.cn/2019/01/06/上网/</id>
    <published>2019-01-06T08:45:00.000Z</published>
    <updated>2019-01-06T09:52:47.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chrome科学上网"><a href="#Chrome科学上网" class="headerlink" title="Chrome科学上网"></a>Chrome科学上网</h1><blockquote><p>最近也是从石油那里学习到科学上网(fan qiang)的方法，所以，特地写一篇博客，记录一下，怕以后忘咯~</p></blockquote><a id="more"></a><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><blockquote><p>当然是下载Chrome浏览器咯，由于操作过于简单，这里就不多加阐述了</p></blockquote><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><blockquote><p>要去Chrome的网上应用商店下载<code>谷歌上网助手</code>,这里就是重难点了。去年没考，今年。。讲偏了。emmm，这里你可以安装一个<code>谷歌访问助手</code>，网上有，但是，这里为了造福全人类我就放上我的资源吧，<a href="https://pan.baidu.com/s/13yLadcRh0CfFLMXy8MELUg" target="_blank" rel="noopener">链接</a>, 提取码: p73b </p></blockquote><blockquote><p>自行下载后，把插件文件拖到Chrome浏览器应该可能就能够安装,<strong>重点来了</strong>,如果不能安装，看下面</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywz0r2rz7j30wz0ii43o.jpg" alt="img"></p><blockquote><p>如果不能安装，你可以，先讲下载好的插件的后缀名改成<code>rar</code>，成为压缩文件</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywz0r6h2dj30x90ion2e.jpg" alt="img"></p><blockquote><p>然后对其进行解压</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywz3ntzg9j30xg0iudl8.jpg" alt="img"></p><blockquote><p>解压完了后，进行进行安装，去拓展程序界面进行安装，用<code>加载已解压的拓展程序</code>进行安装。记得去选中你解压后的文件名，文件名就可以了</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywz6dg4xvj31hc0rs13r.jpg" alt="img"></p><blockquote><p>安装完成后，他就显示说试用期12个小时，但是你只要修改默认启动浏览器主页就可以永久激活，So，你可以去修改一下，但是，关掉浏览器，重新开一下，在修改回来，它也是永久的。</p></blockquote><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><blockquote><p>安装完谷歌访问助手插件后，我们就可以进去Chrome的网上应用商店进行安装各种各样的插件(这也是Chrome好的地方)，这里我们要安装<code>谷歌上网助手</code>，PS，因为我是安装好谷歌上网助手的，和谷歌访问助手起冲突，所以停用了访问助手，你们应该启动一下</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywzevseaij31h50rwtfi.jpg" alt="img"></p><blockquote><p>这里你需要点一下，<code>添加至Chrome</code>应该就可以安装了，安装了，记得启动哦(就是原先的那的<code>拓展程序</code>界面),启动后在你的浏览器右上角应该就有插件图标，点击登录。</p></blockquote><blockquote><p>这个<code>谷歌上网助手</code>是需要邮箱注册登录的，注册会发一条邮件给你的邮箱，你去邮箱点击链接就能完成注册。但是注册登录的账号只能有三天的VIP使用时间。。。<strong>emmm</strong>，如果到这里就结束了。就太垮了。</p></blockquote><blockquote><p>所以，这里就教大家一种方法(这里要感谢下我万能的使用咯)。这里提供一个国外的<a href="https://www.emailondeck.com/" target="_blank" rel="noopener">网站</a> <a href="https://www.emailondeck.com/" target="_blank" rel="noopener">https://www.emailondeck.com/</a> (需要翻墙)，你用前面自己注册的邮箱就能访问,这个网站能免费给你一个邮箱进行注册,这里就简单试验一次</p></blockquote><ul><li>1.点击左侧，验证你是手动操作。输入验证码就好</li></ul><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywzq2ce0gj31h90rpq7d.jpg" alt="img"></p><ul><li>2.验证完了后就可以点击右侧获取邮箱</li></ul><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywzt2ojl2j31ha0ry424.jpg" alt="img"></p><ul><li>3.获取邮箱后就可以去进行注册</li></ul><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywzvqp5uej31hb0rr767.jpg" alt="img"></p><ul><li>4.注册时，发送的激活链接你需要等一下在上面那个网站界面去接收,然后点击激活</li></ul><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fyx05ukqfnj31h70rp0x0.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fyx05uojdvj31h60rnwif.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fyx06euzxsj31hc06pq3p.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fyx09mdk7cj31hc0eywiv.jpg" alt="img"></p><ul><li><p>5.值得注意的是，你可以在你三天快到期的时候去注册，但是你最好记录一下那个注册的网址，否则，你可以layout一下，<a href="http://www.emailondeck.com" target="_blank" rel="noopener">www.emailondeck.com</a> 就访问不了了，这里就友情给下注册地址： chrome-extension://nonmafimegllfoonjgplbabhmgfanaka/login.html?/server/account/signup</p></li><li><p>6.如果不当心忘了，emmm，你可以在手机上VPN一开，然后去注册。</p></li></ul><p><br><br><br>So,这次的博客分享都到这了，Just Have Fun。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Chrome科学上网&quot;&gt;&lt;a href=&quot;#Chrome科学上网&quot; class=&quot;headerlink&quot; title=&quot;Chrome科学上网&quot;&gt;&lt;/a&gt;Chrome科学上网&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;最近也是从石油那里学习到科学上网(fan qiang)的方法，所以，特地写一篇博客，记录一下，怕以后忘咯~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Chrome" scheme="http://www.lightfisher.cn/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>Python Admin开发</title>
    <link href="http://www.lightfisher.cn/2019/01/04/ython-Admin%E5%BC%80%E5%8F%91/"/>
    <id>http://www.lightfisher.cn/2019/01/04/ython-Admin开发/</id>
    <published>2019-01-04T06:17:00.000Z</published>
    <updated>2019-01-06T12:38:54.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-Admin后台管理"><a href="#Django-Admin后台管理" class="headerlink" title="Django Admin后台管理"></a>Django Admin后台管理</h1><blockquote><p>Admin后台系统也称为网站后台管理系统，主要用于对网站前台的信息进行管理，如文字、图片、影音和其他日常使用文件的发布、更新、删除操作，也包括功能信息的统计和管理，如用户信息、订单信息和访客信息等。简单来说，就是对网站数据库和文件等快速操作和管理系统，以使网页内容能够及时得到更新和调整。</p></blockquote><a id="more"></a><h2 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a>创建超级用户</h2><blockquote><p><code>python manage.py createsuperuser</code>,这就是创建超级用户的代码，用户名和邮箱可以为空，如果用户名为空，默认使用计算机的用户名。输入的密码不会显示在计算机屏幕上。</p></blockquote><h2 id="模型展示Admin后台"><a href="#模型展示Admin后台" class="headerlink" title="模型展示Admin后台"></a>模型展示Admin后台</h2><blockquote><p>要想将Django的App下所定义模型对应的数据库数据展示在Django Admin后台，需要在所在App下的<code>admin.py</code>文件添加如下方法：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Admin后台的title和header</span></span><br><span class="line">admin.site.site_title=‘Mydjango后台管理’</span><br><span class="line">admin.site.site_header=‘MyDjango’</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一。将模型直接注册岛admin后台</span></span><br><span class="line">admin.site.register(Product)  <span class="comment"># 这里的Product就是models里创建的模型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二   </span></span><br><span class="line"><span class="comment"># 自定义ProductAdmin类并继承ModelAdmin</span></span><br><span class="line"><span class="comment"># 注册方法一，使用Python装饰器将ProductAdmin和模型Product绑定并注册到后台</span></span><br><span class="line"><span class="meta">@admin.register(Product)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="comment"># 设置显示的字段,列表里都是你创建的模型里的字段</span></span><br><span class="line">    list_display = [‘id’, ‘name’, ‘weight’, ‘type’]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册方法二</span></span><br><span class="line"><span class="comment"># admin.site.register(Product,ProductAdmin)</span></span><br></pre></td></tr></table></figure><blockquote><p>日常的开发中都是使用第二种方法。</p></blockquote><h2 id="Admin的基本设置"><a href="#Admin的基本设置" class="headerlink" title="Admin的基本设置"></a>Admin的基本设置</h2><h3 id="App在admin中的中文显示"><a href="#App在admin中的中文显示" class="headerlink" title="App在admin中的中文显示"></a>App在admin中的中文显示</h3><blockquote><p>上述的方法将App下的模型注册到了Admin后台。但是在Admin后台显示的模型为英文，这里就可以进一步的设置。首先就是实现App的中文显示。主要有App的<code>__init__.py</code>文件实现。实现代码如下(例如这里的App为index)：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> AppConfig</span><br><span class="line">Import os</span><br><span class="line"><span class="comment"># 修改App在admin后台显示的名称</span></span><br><span class="line"><span class="comment"># default_app_config的值来自 apps.py的类名</span></span><br><span class="line">default_app_config = ‘index.IndexConfig’</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前App的命名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_current_app_name</span><span class="params">(_file)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> os.path.split(os.path.dirname(_file_)[<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 重写类 IndexConfig</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexConfig</span><span class="params">(AppConfig)</span>:</span></span><br><span class="line">    name = get_current_app_name(__file__)</span><br><span class="line">    verbose_name = ‘ 网站首页 ‘</span><br></pre></td></tr></table></figure><blockquote><p>当项目启动后，程序就会从初识文件<strong>init</strong>获取重写的<code>IndexConfig</code>类，类属性 <code>verbose_name</code> 用于设置index的中文内容。</p></blockquote><h3 id="模型中的字段在admin后台的中文显示"><a href="#模型中的字段在admin后台的中文显示" class="headerlink" title="模型中的字段在admin后台的中文显示"></a>模型中的字段在admin后台的中文显示</h3><blockquote><p>在models.py中设置类Meta的类属性<code>verbose_name_plural</code> 即可实现。显示代码如下</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Product模型 设置中文，代码编写在models.py文件中</span></span><br><span class="line"><span class="comment"># 例如下</span></span><br><span class="line"><span class="keyword">from</span> django.db import models</span><br><span class="line">class Product(models.Model):</span><br><span class="line">    id = models.AutoField(‘.序号 ’, <span class="attribute">primary_key</span>=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(‘.名称 ’, <span class="attribute">max_length</span>=50)</span><br><span class="line">    weight = models.CharField(‘.重量 ’, <span class="attribute">max_length</span>=20)</span><br><span class="line">   <span class="built_in"> type </span>= models.ForeighKey(Type, <span class="attribute">on_delete</span>=models.CASCADE, <span class="attribute">verbose_name</span>=‘ 产品类型 ’)</span><br><span class="line">    # 设置返回值</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line">    class Meta:</span><br><span class="line">        # 如果只设置verbose_name，在Admin中会显示“产品信息 s”</span><br><span class="line">        verbose_name = ‘ 产品信息 ’</span><br><span class="line">        verbose_name_plural = ‘ 产品信息 ’</span><br></pre></td></tr></table></figure><h2 id="Admin后台的二次优化"><a href="#Admin后台的二次优化" class="headerlink" title="Admin后台的二次优化"></a>Admin后台的二次优化</h2><blockquote><p>在一个数据中存放了成千上万的数据，这个时候就需要对我们的Django后台进行适当的优化，代码如下(在admin.py文件中进行优化)：</p></blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># admin.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib import admin</span><br><span class="line"><span class="keyword">from</span> .models import *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Admin后台的title和header</span></span><br><span class="line">admin.site.site_title=‘Mydjango后台管理’</span><br><span class="line">admin.site.site_header=‘MyDjango’</span><br><span class="line"></span><br><span class="line">@admin.register(Product)</span><br><span class="line"><span class="built_in">class</span> ProductAdmin(admin.ModelAdmin):</span><br><span class="line">    <span class="comment"># 设置显示的字段,列表里都是你创建的模型里的字段</span></span><br><span class="line">    list_display = [‘<span class="built_in">id</span>’, ‘<span class="built_in">name</span>’, ‘weight’, ‘type’]</span><br><span class="line">    <span class="comment"># 设置可搜索的字段并在Admin后台数据生成搜索框，如外键，应使用双下划线连接两个模型的字段</span></span><br><span class="line">    search_fields = [‘<span class="built_in">id</span>’, ‘<span class="built_in">name</span>’, ‘type__type_name’]</span><br><span class="line">    <span class="comment"># 设置过滤器，在后台数据的右侧生成导航栏，如有外键，因使用双下划线连接两个模型的字段</span></span><br><span class="line">    list_filter = [‘<span class="built_in">name</span>’, ‘type__type_name’]</span><br><span class="line">    <span class="comment"># 设置排序方式，[‘id’]为升序，‘-id’为降序</span></span><br><span class="line">    ordering = [‘<span class="built_in">id</span>’]</span><br><span class="line">    <span class="comment"># 添加新的数据时，设置可添加数据的字段</span></span><br><span class="line">    fields = [‘<span class="built_in">name</span>’, ’weight’, ’type’]</span><br><span class="line">    <span class="comment"># 设置可读字段，在修改和新增数据时使其无法设置</span></span><br><span class="line">    readonly_fields = [‘<span class="built_in">name</span>’]</span><br></pre></td></tr></table></figure><blockquote><p>上述代码中，ProductAdmin类分别设置了<code>list_display</code>, <code>search_fields</code>, <code>list_filter</code>, <code>ordering</code>, <code>fields</code>, <code>readonly_fields</code>,每个都有注明方法。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Django-Admin后台管理&quot;&gt;&lt;a href=&quot;#Django-Admin后台管理&quot; class=&quot;headerlink&quot; title=&quot;Django Admin后台管理&quot;&gt;&lt;/a&gt;Django Admin后台管理&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Admin后台系统也称为网站后台管理系统，主要用于对网站前台的信息进行管理，如文字、图片、影音和其他日常使用文件的发布、更新、删除操作，也包括功能信息的统计和管理，如用户信息、订单信息和访客信息等。简单来说，就是对网站数据库和文件等快速操作和管理系统，以使网页内容能够及时得到更新和调整。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.lightfisher.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.lightfisher.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://www.lightfisher.cn/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Python实现免费发短信</title>
    <link href="http://www.lightfisher.cn/2019/01/04/thon%E5%AE%9E%E7%8E%B0%E5%85%8D%E8%B4%B9%E5%8F%91%E7%9F%AD%E4%BF%A1/"/>
    <id>http://www.lightfisher.cn/2019/01/04/thon实现免费发短信/</id>
    <published>2019-01-04T05:22:00.000Z</published>
    <updated>2019-01-04T06:15:31.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="twilio实现免费发短信"><a href="#twilio实现免费发短信" class="headerlink" title="twilio实现免费发短信"></a>twilio实现免费发短信</h1><blockquote><p>一直对这方面蛮感兴趣的，比如wxpy模块，登录微信。但是依旧有着小小的缺陷，所以，今天我要讲的是twilio模块实现免费发送短信，可以配合爬虫实现定时的小功能，比如，定时每天给你要发送的对象发天气预报什么的，emmm，这些就不是今天所讲的范围内了。</p></blockquote><a id="more"></a><h2 id="twilio-模块的安装"><a href="#twilio-模块的安装" class="headerlink" title="twilio 模块的安装"></a>twilio 模块的安装</h2><blockquote><p>安装<code>twilio</code>就和一般的安装一样，用<code>pip</code>， <code>pip install twilio</code>即可安装。</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fyuhqsnz6oj30ro0fztfv.jpg" alt="twilio"></p><blockquote><p>当然也会安装别的依赖库。。</p></blockquote><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><blockquote><p>1.安装好库，就需要带官网进行注册（PS：这里需要翻墙，毕竟是国外的网站）。这里我再重新注册一遍,这里就是填写你的一些信息，很简单，我就不多说了。</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fyuhwvpzm3j31h70qejtf.jpg" alt="img"></p><blockquote><p>2.注册完登录后，就是基本如下图。值得注意的是，<code>ACCOUNT SID</code>和<code>AUTH TOKEN</code>这两个参数是等会会用的。</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fyuhut2ynmj31hc0pstej.jpg" alt="img"></p><blockquote><p>3.登录后，要想发短信，当然要有发送方咯，所以我们要去获取它。第一次应该是没有的。所以你要去注册一个，放心是免费的</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fyui2h6deuj31gw0qldk0.jpg" alt="img"></p><blockquote><p>4.有了发送方，就要有接受方了。因为这个接收方是要验证的，所以并不可以进行什么短信轰炸。。点击下图的加号，就可以进行验证</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fyui61xcx5j31gt0pqacq.jpg" alt="img"></p><blockquote><p>5.点击加号后，会出现下一图，它是语音验证，你想进行短信验证就点击下<code>text you instead.</code>,记得修改你的国家地区，然后输入你要发送人的手机号码进行验证，会发一个验证码给你输入的手机号。</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fyuiaawq75j30h407uwew.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fyuiacol0yj30h107j3yw.jpg" alt="img"></p><blockquote><p>6.<strong>究极注意</strong>，你一定要去设置了进行设置中国地区，否则就是下面这个错误，国内网上教程都没有讲这里。</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fyuiirgiruj31fi08g0vx.jpg" alt="img"></p><blockquote><p>7.所以你要去<a href="https://www.twilio.com/console/sms/settings/geo-permissions" target="_blank" rel="noopener">这里</a>进行设置中国，默认我是没有的。我的界面左边那个图片是没有的，你也可以直接输入网址: <a href="https://www.twilio.com/console/sms/settings" target="_blank" rel="noopener">https://www.twilio.com/console/sms/settings</a></p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fyuilcwg6nj31h70qntdf.jpg" alt="img"></p><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><blockquote><p>代码部分就很简单，如下：</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">from</span> twilio.rest import Client</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的account和token就是你前面登录主页的那两个</span></span><br><span class="line">account = <span class="string">'Your ACCOUNT SID'</span></span><br><span class="line"><span class="keyword">token</span> = <span class="string">'Your AUTH TOKEN'</span></span><br><span class="line"></span><br><span class="line">client = Client(account,<span class="keyword">token</span>)</span><br><span class="line"></span><br><span class="line">message = client.messages.<span class="built_in">create</span>(</span><br><span class="line">    from_=<span class="string">'Your number'</span>, <span class="comment">#这里写你前面注册给你的手机号，上注册账号的第三步</span></span><br><span class="line">    <span class="built_in">to</span>=<span class="string">'+86*******'</span>, <span class="comment">#这里就是你前面验证的发送对象，上注册账号的第四步</span></span><br><span class="line">    body=<span class="string">'Hello, I\'m from Python...'</span> <span class="comment">#这里就是你要发送的信息</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">print(message.sid)</span><br></pre></td></tr></table></figure><p>截图如下：</p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fyuisad62mj30zm0khack.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fyuitvr8svj30yi1pcn2a.jpg" alt="img"></p><p>emmm,上面两条是我之前测试的。</p><blockquote><p>依然值得注意的就是注册账号中的第六、七步，异地要设置自己的国家哦~</p></blockquote><p><br><br><br><br>这次的博客就到这里了，So<br><br>Just Have Fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;twilio实现免费发短信&quot;&gt;&lt;a href=&quot;#twilio实现免费发短信&quot; class=&quot;headerlink&quot; title=&quot;twilio实现免费发短信&quot;&gt;&lt;/a&gt;twilio实现免费发短信&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一直对这方面蛮感兴趣的，比如wxpy模块，登录微信。但是依旧有着小小的缺陷，所以，今天我要讲的是twilio模块实现免费发送短信，可以配合爬虫实现定时的小功能，比如，定时每天给你要发送的对象发天气预报什么的，emmm，这些就不是今天所讲的范围内了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.lightfisher.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.lightfisher.cn/tags/Python/"/>
    
      <category term="twilio" scheme="http://www.lightfisher.cn/tags/twilio/"/>
    
  </entry>
  
  <entry>
    <title>Git 合并</title>
    <link href="http://www.lightfisher.cn/2018/12/26/Git-%E5%90%88%E5%B9%B6/"/>
    <id>http://www.lightfisher.cn/2018/12/26/Git-合并/</id>
    <published>2018-12-26T08:56:24.000Z</published>
    <updated>2019-01-06T07:45:10.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git中的合并操作"><a href="#Git中的合并操作" class="headerlink" title="Git中的合并操作"></a>Git中的合并操作</h1><blockquote><p>上次的博客，我们讲解了Git的分支基本作用，这里，我们就来拓展一下，Git中的合并操作</p></blockquote><a id="more"></a><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><blockquote><p>情景提要，上次我们是在<code>master</code>分支下有着<code>a.txt</code>和<code>README.md</code>，而创建的<code>feature1</code>分支下有<code>b.txt</code>文件</p></blockquote><blockquote><p>然后回归我们的主题，再次之前，我们先来学习一下<code>git log</code>的操作，这个操作是查看git操作的日志，所以，让我们学习一下,为了更好的讲解这个较为重要的命令行<code>git log</code>,我提前使用<code>git merge feature1</code>的合并操作。So</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwhmc3q0j30fx04paas.jpg" alt="img"></p><blockquote><p>在上图中，我们先是用了<code>git merge</code>操作将<code>feature1</code>分支合并到了<code>msater</code>的主分支,并用<code>git branch -d feature1</code>删除了分支</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwhmhbejj30fx060q41.jpg" alt="img"></p><blockquote><p><code>git log</code>查看当前分支的log日志，可以看到，有我前面合并操作的日志，因为<code>feature1</code>分支中只有<code>b.txt</code>所以就只有<code>add b.txt</code></p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwhmjhx9j30eq02bmxf.jpg" alt="img"></p><blockquote><p><code>git log --oneline</code> 这个命令就是上图，能让log界面更加的简洁,另外 <code>git log --oneline -3</code>就是查看前几位</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwirwc68j30gg0dzq57.jpg" alt="img"></p><blockquote><p><code>git show &lt;commit id&gt;</code> 如果你想看某个操作更加详细的日子，你就可以用这个命令，后面的的id就是你想看的日志id，可以清楚的看到，我们这个日志就只是添加了一个b.txt，而且b.txt的内容都有显示</p></blockquote><blockquote><p><code>git log --all --decorate --oneline --graph</code>，这个命令能让log日志看起来更加的顺眼,虽然现在看不出来，但是确实有用</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwiryv6aj30es02874n.jpg" alt="img"></p><blockquote><p>上述的<code>git log --all --decorate --oneline --graph</code>,虽然有用(emmm,等会再说哪有用),但是命令实在是太长了，所以我这里在教一点干货,输入</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vi ~<span class="string">/.gitconfig</span>  <span class="comment">#修改git的配置环境</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入以下代码</span></span><br><span class="line">[<span class="keyword">alias</span>]</span><br><span class="line">co = checkout</span><br><span class="line">br = branch</span><br><span class="line">ci = commit</span><br><span class="line">st = status</span><br><span class="line">dog = log <span class="params">--all</span> <span class="params">--decorate</span> <span class="params">--oneline</span> <span class="params">--graph</span></span><br></pre></td></tr></table></figure><blockquote><p>上述代码就是可以简易的输入，<code>git log --all --decorate --oneline --graph</code>就等于<code>git dog</code></p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwis1vtyj30gk0c03zd.jpg" alt="alias"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwjs4owtj30fi05i0tv.jpg" alt="img"></p><h2 id="log日志讲解"><a href="#log日志讲解" class="headerlink" title="log日志讲解"></a>log日志讲解</h2><blockquote><p>我们先<code>git checkout -b f1</code>创建分支并跳转到<code>f1</code>分支,然后在<code>f1</code>分支下生成<code>c.txt</code>，并添加<code>This is c.txt</code>,然后commit一下</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwjs8g63j30gi0dcju5.jpg" alt="img"></p><blockquote><p>因为前面我们配置了config，所以我们就可以使用简洁字母进行操作。另外我们可以看一眼log日志第一行的<code>Head -&gt; f1</code>,可以理解成指针指向f1分支，也就是在f1分支下进行了后面的<code>add c.txt</code>操作，我们用<code>git show 11293e0</code>可以详细查看我们进行了什么操作</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwjscechj30g208udhf.jpg" alt="img"></p><blockquote><p>上图中我们可以看到，<code>merge</code>用的是<code>Fast-foward</code>方式，这个方式是直接帮你提交了，逻辑并不是很好/有兴趣可以去研究一下，输入<code>git merge --help</code>就能看官方文档了。这里我就推荐大家用<code>git merge f1 --no-ff</code>,这个方法能让我们的日志看的更加的清晰。如下图</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwkt5wlwj30fg05njsb.jpg" alt="img"></p><blockquote><p>我先是跳转到f1的分支，创建了一个d.txt文件，并提交一次，然后<br></p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwkt9vn3j30ey084ta8.jpg" alt="img"></p><blockquote><p>回主master分支，它也提示了比master分支多了2个commits</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwktcjdyj30fw02fgly.jpg" alt="img"></p><blockquote><p>输入<code>git merge f1 --no-ff</code>时，它会提醒了进行适当的修改，你可以不改，按一下<code>esc</code>，并按<code>shift&#39;+:&#39;</code>，shift加冒号，输入<code>wq</code>退出,然后输入<code>git log</code>查看，你会发现它先是在f1的分支下add一次，然后合并到master主分支。如果你还是看不出来，这个时候你就可以输入<code>git log --all --decorate --oneline --graph</code>或者是配置完了的<code>git dog</code>，<code>git log --oneline</code>也还可以，但是显然前者更加的显而易见</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwlk510kj30gd0bc76s.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwlk934gj30fk045dgd.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwlkd3ntj30fr039q3g.jpg" alt="img"></p><h2 id="上传到远程仓库"><a href="#上传到远程仓库" class="headerlink" title="上传到远程仓库"></a>上传到远程仓库</h2><blockquote><p>我们用<code>git push</code>方法，上传到远程仓库，<strong>注意</strong>，这里的上传默认是<code>master</code>分支</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwqu14kuj31260byn16.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwqu4xxsj30wm0dyjt4.jpg" alt="img"></p><blockquote><p>所以我们用<code>git push origin f1:feature1</code>,本地是f1分支，仓库是feature1，如果名称不对，会自动创建一个。</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwqu96u1j30ej02lq3b.jpg" alt="img"></p><blockquote><p>我们先在远程仓库的master分支下修改a.txt，然后在本地的master分支下进行<code>git pull</code>操作，如果要在master分支下</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwrwl5tqj30tz08yab6.jpg" alt="img"></p><blockquote><p>上述的操作，只能将github上的修改的pull到master分支内，f1分支并没有修改</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwrwoe08j30gj0a375y.jpg" alt="img"></p><blockquote><p>所以我们如果想要f1分支和master分支同步，我们进入f1分支，然后执行<code>git merge</code>操作</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwrwr8e6j30g607jgmx.jpg" alt="img"></p><blockquote><p>但是我们也是可以用<code>git rebase master</code>的方法合并，因为我也是不是十分的清楚这两者的关系，所以我就简单得把我的理解阐述一遍</p></blockquote><h3 id="merge-rebase-区别"><a href="#merge-rebase-区别" class="headerlink" title="merge rebase 区别"></a>merge rebase 区别</h3><blockquote><p>merge 操作试讲两个分支的历史连接在一起;合并操作;更加关注历史记录</p></blockquote><blockquote><p>rebase 如上就是f1分支移动到master分支的最后一次commit，不会像merge一样又一次不必要的commit，没有提交操作，只是复制</p></blockquote><blockquote><p>rebase 黄金法则：绝对不要再公共分支使用rebase master</p></blockquote><h2 id="分支冲突"><a href="#分支冲突" class="headerlink" title="分支冲突"></a>分支冲突</h2><blockquote><p>我们先新建分支f2，并修改a.txt。然后切换到f1分支，修改a.txt文件。然后进入f2分支进行合并(merge)，这个时候就会发生冲突(记得修改要commit一次)，如下：</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwt6vy9uj30gi0e3go9.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwt6ylkwj30g407hmyc.jpg" alt="img"></p><blockquote><p>上图发生的，a.txt就变成第二个红线框，框内上面的就是本来自己的(Head),下面那个就是冲突的。所以我们就要修改，第一种方法就是直接用编辑器修改，另外一种就是输入<code>git mergetool</code>,并敲回车,就可以进去对所有发生冲突的文件进行修改(这里就不贴图了，记住这个<code>git mergetool</code>就行)</p></blockquote><blockquote><p>对了修改后，会生成一个<code>a.txt.orig</code>，这个就是发生冲突的记录</p></blockquote><p><br><br><br>这次的博客就到这里了，So<br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git中的合并操作&quot;&gt;&lt;a href=&quot;#Git中的合并操作&quot; class=&quot;headerlink&quot; title=&quot;Git中的合并操作&quot;&gt;&lt;/a&gt;Git中的合并操作&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;上次的博客，我们讲解了Git的分支基本作用，这里，我们就来拓展一下，Git中的合并操作&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Django 上传图片</title>
    <link href="http://www.lightfisher.cn/2018/12/24/jango-%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
    <id>http://www.lightfisher.cn/2018/12/24/jango-上传图片/</id>
    <published>2018-12-24T05:14:00.000Z</published>
    <updated>2019-01-06T07:51:46.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django后台获取前端post上传的文件方法"><a href="#Django后台获取前端post上传的文件方法" class="headerlink" title="Django后台获取前端post上传的文件方法"></a>Django后台获取前端post上传的文件方法</h1><blockquote><p>今天无聊就来写写django后台上传文件的方法</p></blockquote><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><p><code>django-admin startproject uploadimg</code> 新建django项目</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwwc0kmuj30b601gjre.jpg" alt="img"></p><blockquote><p><code>cd uploadimg</code> 进入自己创建的项目，然后<code>django-admin startapp index</code> 创建app，名字index</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwwc2iavj30cq01aq2y.jpg" alt="img"></p><blockquote><p>在项目根目录下创建一个静态文件夹 <code>pubstatic</code>,等会上传的文件就保存到这里</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwwc5qifj309p07ndgh.jpg" alt="img"></p><blockquote><p>修改<code>settings.py</code>文件，因为这次，只涉及上传图片到django后台，就只设置这几项</p></blockquote><ul><li>1.第一步当然是注册app咯~</li></ul><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwwc8g9ij30cq080wez.jpg" alt="img"></p><ul><li>2.设置模板路径</li></ul><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwwcaqeij30ms0bsgmz.jpg" alt="img"></p><ul><li>3.设置静态文件路径，<code>STATICFILES_DIRS</code>，这个就是为了查找静态文件，上面那个<code>STATIC_URL = &#39;/static/&#39;</code>这个本来就存在，它会自动到上面注册好的app下进行查看<code>static</code>静态文件夹</li></ul><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwxg8jzdj30l303zt92.jpg" alt="img"></p><blockquote><p>到这，对于这次的博客配置基本结束</p></blockquote><h2 id="URL改写"><a href="#URL改写" class="headerlink" title="URL改写"></a>URL改写</h2><blockquote><p>在<code>uploadimg</code>文件夹下的<code>urls.py</code>进行配置，<code>path(&#39;&#39;,include(&#39;index.urls&#39;))</code>,URL为空，将URL分发给index的<code>urls.py</code>处理</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwxgcqccj30h306imxo.jpg" alt="img"></p><blockquote><p>所以，我们要在<code>index</code>下创建<code>urls.py</code>文件，因为本来是不存在的，然后进行简单的代码</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwxglh27j30gy06yt95.jpg" alt="img"></p><blockquote><p>第一个<code>upload.html</code>就是简单的展示界面，展示一个form表单，<code>views.py</code>文件中<code>index</code>函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'form.html'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>form.html html文件代码基本如下，注意在<code>form</code>表单的定义中一定要加上<code>enctype＝ “multipart/form-data&quot;</code>属性，否则后台可能会取不到文件</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> static %&#125;</span><span class="xml">  #这个为了能够调用静态文件</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span> = <span class="string">"post"</span> <span class="attr">action</span> =<span class="string">"uploadimg"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span><span class="xml">  # 防止CSRF网站攻击 </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">selectric</span>"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"selectinput"</span> <span class="attr">name</span>=<span class="string">'images'</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"file_cselectpic"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"选择图片_text"</span>&gt;</span>只支持jpg、png和gif,且大小不超过2M<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">id</span>=<span class="string">"photo_confirm"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>上面那个form表单<code>action</code>就是跳转到uploadimg，<code>index</code>下的<code>urls.py</code>就接受这个url,调用<code>ChangImg</code>函数</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts <span class="keyword">import</span> render</span><br><span class="line">from django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line">from django.core.files.storage <span class="keyword">import</span> default_storage</span><br><span class="line">from django.core.files.base <span class="keyword">import</span> ContentFile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">from django.conf <span class="keyword">import</span> settings</span><br><span class="line">def ChangeImg(request):</span><br><span class="line">    <span class="built_in">try</span>:</span><br><span class="line">        <span class="built_in">image</span> = request.FILES.<span class="built_in">get</span>(<span class="string">'images'</span>)</span><br><span class="line">        <span class="built_in">if</span> <span class="built_in">image</span>.<span class="built_in">size</span> &gt; <span class="number">10000</span> <span class="keyword">and</span> <span class="built_in">image</span>.<span class="built_in">size</span> &lt; <span class="number">20480000</span>:</span><br><span class="line">            save_path = settings.STATICFILES_DIRS[<span class="number">0</span>]+<span class="string">'/upload/img/'</span>+<span class="built_in">image</span>.name</span><br><span class="line">            <span class="built_in">if</span> os.path.<span class="built_in">exists</span>(save_path):</span><br><span class="line">                os.<span class="built_in">remove</span>(save_path)</span><br><span class="line">            path = default_storage.save(save_path,ContentFile(<span class="built_in">image</span>.<span class="built_in">read</span>()))</span><br><span class="line">            <span class="built_in">print</span>(path)</span><br><span class="line">            <span class="built_in">return</span> HttpResponse(<span class="string">'Successful...'</span>)</span><br><span class="line">        <span class="built_in">else</span>:</span><br><span class="line">            <span class="built_in">return</span> HttpResponse(<span class="string">'Error...'</span>)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="built_in">return</span> HttpResponse(<span class="string">'Error...'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>当我们获取到图片img后，可以通过</p></blockquote><ul><li><p>image＝request.FILES.get(‘images’)去获取到该图片</p></li><li><p>image.name 获取到图片的名字</p></li><li><p>image.size获取到图片的大小</p></li><li><p>image.read()可以获取图片内容</p></li></ul><blockquote><p>通过<code>default_storage.save(save_path,ContentFile(image.read()))</code>把图片缓存到指定文件，save_path就是前面构造的存储路径，如果不存在路径会自动创建</p></blockquote><blockquote><p><code>from django.conf import settings</code> import的<code>settings</code>可以访问settings.py文件中的属性，<code>STATICFILES_DIRS[0]</code>，就是前面设置的静态文件路径 </p></blockquote><h2 id="成功截图"><a href="#成功截图" class="headerlink" title="成功截图"></a>成功截图</h2><blockquote><p>点击提交后，跳转到<code>uploadimg</code>url,接受后，调用<code>ChangeImg</code>函数，<code>request.FILES.get(&#39;images&#39;)</code>获取图片，这个<code>&#39;images&#39;</code>就是前面选图片的<code>input</code>标签的name属性值。</p></blockquote><blockquote><p>获取图片后 ，调用<code>default_storage.save(save_path,ContentFile(image.read()))</code>保存图片</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwxgnynkj31as0nfq42.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwxgskidj31b10potf0.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwxh384xj315u0k9wfn.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwxh8ko1j31580hd74v.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywwxhbmu2j30xd0indif.jpg" alt="img"></p><p><br><br><br>这次的博客就到这里了，So<br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Django后台获取前端post上传的文件方法&quot;&gt;&lt;a href=&quot;#Django后台获取前端post上传的文件方法&quot; class=&quot;headerlink&quot; title=&quot;Django后台获取前端post上传的文件方法&quot;&gt;&lt;/a&gt;Django后台获取前端post上传的文件方法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;今天无聊就来写写django后台上传文件的方法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="http://www.lightfisher.cn/categories/python/"/>
    
    
      <category term="python" scheme="http://www.lightfisher.cn/tags/python/"/>
    
      <category term="django" scheme="http://www.lightfisher.cn/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Python多线程</title>
    <link href="http://www.lightfisher.cn/2018/12/22/ython%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://www.lightfisher.cn/2018/12/22/ython多线程/</id>
    <published>2018-12-22T15:08:00.000Z</published>
    <updated>2019-01-06T07:32:20.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python多线程"><a href="#Python多线程" class="headerlink" title="Python多线程"></a>Python多线程</h1><blockquote><p>今天无聊就来写写Python多线程，至于多线程和多进程是什么，emmm，自行百度。</p></blockquote><a id="more"></a><h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><blockquote><p>再讲多线程之前，我先来讲讲单线程。在久远 的DOS时代，操作系统处理任务都是单线程的，所以，我们先来模拟一下。</p></blockquote><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">from <span class="keyword">time</span> import ctime,<span class="keyword">sleep</span>,<span class="keyword">time</span></span><br><span class="line"></span><br><span class="line">def music():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">2</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"I was listening to music. %s"</span> %ctime())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">sleep</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">def movie():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">2</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"I was at the movies! %s"</span> %ctime())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">sleep</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    start = <span class="keyword">time</span>()</span><br><span class="line"></span><br><span class="line">    music()</span><br><span class="line"></span><br><span class="line">    movie()</span><br><span class="line"></span><br><span class="line">    end = <span class="keyword">time</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"all over %ss"</span> % (end-start))</span><br></pre></td></tr></table></figure><blockquote><p>我们先是听了音乐，通过for循环了两次，每次<code>time.sleep()</code>了一秒，然后看了会电影，每场电影5秒。我通过<code>print(&quot;all over %ss&quot; % (end-start))</code>来获知我们花了多长时间，截图如下</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywsf0q7kij30k20f1mz7.jpg" alt="img"></p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><blockquote><p>时代在进步，我们的CPU也是越来越快，CPU就开始抱怨，”P点大的事，就要占用我一点时间，其实我可以同时干好多活的”。于是操作系统进入了多任务时代。我们听着音乐，吃着火锅就不再是dream了。</p></blockquote><blockquote><p>Python提供了两个模块来实现多线程，分别是<code>thread</code>和<code>threading</code>，thread有一点缺点，在threading上得到了弥补，所以我们就直接学习threading就好了，引用上面的 例子</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line"></span><br><span class="line">from time import ctime,<span class="built_in">sleep</span>,time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def music(<span class="function"><span class="keyword">func</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line"></span><br><span class="line">        print (<span class="string">"I was listening to %s. %s"</span> %(<span class="function"><span class="keyword">func</span>,<span class="title">ctime</span><span class="params">()</span>))</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">def movie(<span class="function"><span class="keyword">func</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line"></span><br><span class="line">        print (<span class="string">"I was at the %s! %s"</span> %(<span class="function"><span class="keyword">func</span>,<span class="title">ctime</span><span class="params">()</span>))</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">threads = []</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=music,args=(<span class="string">'爱情买卖'</span>,))</span><br><span class="line"></span><br><span class="line">threads.append(t1)</span><br><span class="line"></span><br><span class="line">t2 = threading.Thread(target=movie,args=(<span class="string">'阿凡达'</span>,))</span><br><span class="line"></span><br><span class="line">threads.append(t2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    start = time()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line"></span><br><span class="line">        t.setDaemon(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    end = time()</span><br><span class="line"></span><br><span class="line">    print (<span class="string">"all over %s"</span> % (end-start))</span><br></pre></td></tr></table></figure><blockquote><p>1.<code>import threading</code> 首先导入<code>threading</code>模块</p></blockquote><blockquote><p>2.<code>threads = [] t1 = threading.Thread(target=music,args=(&#39;爱情买卖&#39;,)) threads.append(t1)</code> 创建了threads数组，用来保存线程。用<code>threading.Thread()</code>方法，创建线程，在这个方法里调用music方法 <code>target=</code>music，注意,这里的music后面不能加括号，加括号了就是函数的实现。<code>args</code>方法是对music进行传参,<strong>注意</strong>，传出的参数是以<code>元组</code>类型</p></blockquote><blockquote><p>3.for循环遍历数组，并用<code>setDaemon</code>方法将线程声明为守护线程，必须在<code>start()</code>方法调用前设置，如果不设置为守护线程程序会被无限挂起。</p></blockquote><blockquote><p>4.在下图中应该可以看到，所用时间几乎为零。这是因为子线程启动后，父线程也继续执行下去，当父线程执行完最后一条语句时，没有等待子线程，直接退出，同时子线程也一同结束。ps:运行出来应该都是0.0，可能我电脑卡了会=。=</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywsfhch1oj30l90ehgod.jpg" alt="img"></p><blockquote><p>从执行结果来看，子线程<code>（muisc 、movie ）</code>和主线程<code>（print (&quot;all over %s&quot; % (end-start))）</code>都是同一时间启动，但由于主线程执行完结束，所以导致子线程也终止。</p></blockquote><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><blockquote><p>上面那方法显然不是我们想要的效果。想要解决这个问题很简单，只需要调用<code>join()</code>方法，用于等待线程终止。<code>join()</code>的作用是，在子线程完成运行之前，这个子线程的父线程将一直被阻塞。</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line"></span><br><span class="line">from time import ctime,<span class="built_in">sleep</span>,time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def music(<span class="function"><span class="keyword">func</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line"></span><br><span class="line">        print (<span class="string">"I was listening to %s. %s"</span> %(<span class="function"><span class="keyword">func</span>,<span class="title">ctime</span><span class="params">()</span>))</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">def movie(<span class="function"><span class="keyword">func</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line"></span><br><span class="line">        print (<span class="string">"I was at the %s! %s"</span> %(<span class="function"><span class="keyword">func</span>,<span class="title">ctime</span><span class="params">()</span>))</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">threads = []</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=music,args=(<span class="string">'爱情买卖'</span>,))</span><br><span class="line"></span><br><span class="line">threads.append(t1)</span><br><span class="line"></span><br><span class="line">t2 = threading.Thread(target=movie,args=(<span class="string">'阿凡达'</span>,))</span><br><span class="line"></span><br><span class="line">threads.append(t2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    start = time()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line"></span><br><span class="line">        t.setDaemon(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    t.join()</span><br><span class="line"></span><br><span class="line">    end = time()</span><br><span class="line"></span><br><span class="line">    print (<span class="string">"all over %s"</span> % (end-start))</span><br></pre></td></tr></table></figure><p>成功截图如下</p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywsfhja6gj30ph0ejacz.jpg" alt="img"></p><blockquote><p>把听歌sleep方法调到4秒，问现在运行完要几秒?</p></blockquote><blockquote><p>答案是10秒左右，因为两个进程同时运行啊。取最多的线程消耗时间就好了。</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywsfiaajzj30p10ewgok.jpg" alt="img"></p><h2 id="代码整合改进"><a href="#代码整合改进" class="headerlink" title="代码整合改进"></a>代码整合改进</h2><p>好好看，好好学</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">from time import <span class="keyword">sleep</span>, ctime </span><br><span class="line"></span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line">def super_player(<span class="keyword">file</span>,time):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'Start playing： %s! %s'</span> %(<span class="keyword">file</span>,ctime()))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">sleep</span>(time)</span><br><span class="line"></span><br><span class="line">#播放的文件与播放时长</span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span> = &#123;<span class="string">'爱情买卖.mp3'</span>:<span class="number">3</span>,<span class="string">'阿凡达.mp4'</span>:<span class="number">5</span>,<span class="string">'我和你.mp3'</span>:<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">threads = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">files</span> = <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="keyword">list</span>))</span><br><span class="line"></span><br><span class="line">#创建线程</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">file</span>,time in <span class="keyword">list</span>.<span class="built_in">items</span>():</span><br><span class="line"></span><br><span class="line">    t = threading.Thread(target=super_player,<span class="keyword">args</span>=(<span class="keyword">file</span>,time))</span><br><span class="line"></span><br><span class="line">    threads.<span class="keyword">append</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>: </span><br><span class="line"></span><br><span class="line">    #启动线程</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i in <span class="keyword">file</span><span class="variable">s:</span></span><br><span class="line"></span><br><span class="line">        threads[i].start() </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i in <span class="keyword">file</span><span class="variable">s:</span></span><br><span class="line"></span><br><span class="line">        threads[i].<span class="keyword">join</span>()</span><br><span class="line"></span><br><span class="line">    #主线程</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'end:%s'</span> %ctime())</span><br></pre></td></tr></table></figure><p>以上就是本次博客的全部内容了，基本参考博客 So</p><p>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python多线程&quot;&gt;&lt;a href=&quot;#Python多线程&quot; class=&quot;headerlink&quot; title=&quot;Python多线程&quot;&gt;&lt;/a&gt;Python多线程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;今天无聊就来写写Python多线程，至于多线程和多进程是什么，emmm，自行百度。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.lightfisher.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.lightfisher.cn/tags/Python/"/>
    
      <category term="多线程" scheme="http://www.lightfisher.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Pexels优秀图片下载</title>
    <link href="http://www.lightfisher.cn/2018/12/20/Pexels%E4%BC%98%E7%A7%80%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD/"/>
    <id>http://www.lightfisher.cn/2018/12/20/Pexels优秀图片下载/</id>
    <published>2018-12-20T12:51:00.000Z</published>
    <updated>2019-01-06T07:54:32.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pexels优秀图片下载"><a href="#Pexels优秀图片下载" class="headerlink" title="Pexels优秀图片下载"></a>Pexels优秀图片下载</h1><blockquote><p>在日常生活中，相信大家一定有过没有好的，有内涵的图片而烦恼，比如，做ppt的时候,没有好看的图片做背景；想换壁纸的时候也是没有好看、清新的图片做壁纸，今天我就用Python写一个爬虫，智能爬取优质图片。爬取的网站是<a href="https://www.pexels.com/" target="_blank" rel="noopener">pexels</a></p></blockquote><a id="more"></a><h2 id="有道翻译API"><a href="#有道翻译API" class="headerlink" title="有道翻译API"></a>有道翻译API</h2><blockquote><p>因为该网站是不支持中文输入的，所以，免得你们(wo)总是往返于翻译软件,所以我就直接又去写了个翻译API，这里我就感谢<a href="http://fanyi.youdao.com/" target="_blank" rel="noopener">有道翻译</a>的友情赞助(为什么要有道呢，因为有道简单)</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx16f475j31gc0gpabd.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx16jkgej31h20oln3w.jpg" alt="img"></p><blockquote><p>上图一就是我们熟悉的翻译操作，打开开发者调试，右键 检查，或者直接按<code>F12</code>进入(记得刷新哦~)。点击Network-All，就可以看见我们图二的数据，是一个<code>POST</code>请求，下面那个<code>From Data</code>就是我们发送的data，所以，算了，no bb show you the code</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面这些就是网站那复制下来构造的，虽然现在略有改动，应该也差不多，你也可以试试自己构造</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'i'</span>: <span class="string">'风景'</span>, <span class="comment"># 默认我加了风景，你也可以不加，但是要有i这个参数</span></span><br><span class="line">    <span class="string">'from'</span>: <span class="string">'AUTO'</span>, <span class="comment"># 你要翻译的,AUTO就是自适应</span></span><br><span class="line">    <span class="string">'to'</span>: <span class="string">'en'</span>, <span class="comment"># 翻译成什么语言，emm，按理是，但是依旧一样，还是百度翻译好</span></span><br><span class="line">    <span class="string">'smartresult'</span>: <span class="string">'dict'</span>, <span class="comment"># 返回类型 </span></span><br><span class="line">    <span class="string">'client'</span>: <span class="string">'fanyideskweb'</span>,</span><br><span class="line">    <span class="string">'salt'</span>: <span class="string">'1537680464627'</span>,</span><br><span class="line">    <span class="string">'sign'</span>: <span class="string">'c72a93599c0c533050645cbe45bfd391'</span>,</span><br><span class="line">    <span class="string">'doctype'</span>: <span class="string">'json'</span>,</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">2.1</span>,</span><br><span class="line">    <span class="string">'keyfrom'</span>: <span class="string">'fanyi.web'</span>,</span><br><span class="line">    <span class="string">'action'</span>: <span class="string">'FY_BY_REALTIME'</span>,</span><br><span class="line">    <span class="string">'typoResult'</span>: <span class="string">'false'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">YouDao</span><span class="params">()</span>:</span></span><br><span class="line">    content = input(<span class="string">'请输入你要翻译的单词或语句：'</span>)</span><br><span class="line">    data[<span class="string">'i'</span>] = content</span><br><span class="line">    html = requests.post(</span><br><span class="line">        <span class="string">'http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule'</span>,</span><br><span class="line">        data=data,</span><br><span class="line">        headers=headers)</span><br><span class="line">    html = json.loads(html.text)</span><br><span class="line">    print(<span class="string">'翻译：'</span>+html[<span class="string">'translateResult'</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="string">'tgt'</span>])</span><br><span class="line">    <span class="keyword">return</span> html[<span class="string">'translateResult'</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="string">'tgt'</span>]</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>，下面这个是疑难点，前年20分大题，去年没考，今年必考啊~~<br>就是你开发者模式下的访问地址是<code>http://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule</code>,但是你用这个去发POST请求是错的，要删了这个<code>_o</code></p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx16mm7dj310a0j1djj.jpg" alt="img"></p><h2 id="Pexels网站的图片地址构造"><a href="#Pexels网站的图片地址构造" class="headerlink" title="Pexels网站的图片地址构造"></a>Pexels网站的图片地址构造</h2><blockquote><p>首先，我们先进入pexels的<a href="https://www.pexels.com/" target="_blank" rel="noopener">网站</a>,输入你想要搜索的图片类型，如我搜索的是night，然后就是进入了night的搜索页面，这里你就能看见搜索页面的网址，就是原网站加”/search/night”或者你搜索的单词，这里就是你要构造的网址。emmmm，好像有点偏远了，我本来这一步不是讲这个的，算了。</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx16q871j31hb0peqa9.jpg" alt="img"></p><blockquote><p>因为这个网站是异步加载的，即使根据用户使用动态加载了，所以想要更多的获取它的图片，我们要分析它，获取它图片数据的由来途径。先保持在开发者调试下，不断往下翻，这个时候相信你一定看见了，当我们往下翻的时候，浏览器就会接受xhr数据，如下图</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx16v35dj31h00pkaif.jpg" alt="img"></p><blockquote><p>上面就是动态加载的数据来源地址，你去浏览器直接访问，就会发现，就是接着原来网页的下面，所以，而且像<code>&amp;format=js&amp;seed=2018-12-20%2001:54:27%20+0000</code>这种数据其实是可以删除的，不相信你可以删除再访问，是不是是一样的。这样就更加利于我们构造url地址</p></blockquote><h2 id="图片地址的获取"><a href="#图片地址的获取" class="headerlink" title="图片地址的获取"></a>图片地址的获取</h2><blockquote><p>相信到这里，你一定直接获取过它的html数据，没有我就来展示一下</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx16zejlj31000oedox.jpg" alt="img"></p><blockquote><p>别忘了<code>import requests</code>和像个请求头，没有是访问不到的。由于这样不明显，我就在网页上进行适当的分析，点击下图的左上角红框，然后选中网页上的一个图片，开发者调试界面就会出现你点击图片的属性等等，我们的图片地址就是在其中，比如在<code>data-big-src</code>属性内，你可以双击选中地址，浏览器直接访问查看，就是你点击的图片</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx176w0aj31h10phdzw.jpg" alt="img"></p><blockquote><p>So,接下来就是不断的分析了，查看每个图片的关联，这里我用的是<code>BeautifulSoup</code>,你也可以用正则、<code>xpath</code>等等,因为这里我发现每个<code>img</code>的class都是<code>photo-item__img</code>。</p></blockquote><blockquote><p>相信到这里你们都已经会了，下面就是代码的一些展示</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">author:lightfish</span></span><br><span class="line"><span class="string">Time:2018.11.18</span></span><br><span class="line"><span class="string">note:下载pexels图片</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'i'</span>: <span class="string">'风景'</span>,</span><br><span class="line">    <span class="string">'from'</span>: <span class="string">'AUTO'</span>,</span><br><span class="line">    <span class="string">'to'</span>: <span class="string">'en'</span>,</span><br><span class="line">    <span class="string">'smartresult'</span>: <span class="string">'dict'</span>,</span><br><span class="line">    <span class="string">'client'</span>: <span class="string">'fanyideskweb'</span>,</span><br><span class="line">    <span class="string">'salt'</span>: <span class="string">'1537680464627'</span>,</span><br><span class="line">    <span class="string">'sign'</span>: <span class="string">'c72a93599c0c533050645cbe45bfd391'</span>,</span><br><span class="line">    <span class="string">'doctype'</span>: <span class="string">'json'</span>,</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">2.1</span>,</span><br><span class="line">    <span class="string">'keyfrom'</span>: <span class="string">'fanyi.web'</span>,</span><br><span class="line">    <span class="string">'action'</span>: <span class="string">'FY_BY_REALTIME'</span>,</span><br><span class="line">    <span class="string">'typoResult'</span>: <span class="string">'false'</span></span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">YouDao</span><span class="params">()</span>:</span></span><br><span class="line">    content = input(<span class="string">'请输入你要的图片类型：'</span>)</span><br><span class="line">    data[<span class="string">'i'</span>] = content</span><br><span class="line">    html = requests.post(</span><br><span class="line">        <span class="string">'http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule'</span>,</span><br><span class="line">        data=data,</span><br><span class="line">        headers=headers)</span><br><span class="line">    html = json.loads(html.text)</span><br><span class="line">    print(<span class="string">'翻译：'</span>+html[<span class="string">'translateResult'</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="string">'tgt'</span>])</span><br><span class="line">    <span class="keyword">return</span> html[<span class="string">'translateResult'</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="string">'tgt'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page_urls</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = requests.get(url, headers=headers).text</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">        imgs = soup.find_all(<span class="string">'img'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'photo-item__img'</span>&#125;)</span><br><span class="line">        list = []</span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> imgs:</span><br><span class="line">            list.append(img.get(<span class="string">'data-big-src'</span>))</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadPic</span><span class="params">(name, pic_url, localPath, n)</span>:</span></span><br><span class="line">    path = localPath + <span class="string">'/'</span> + name + <span class="string">'/'</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path): </span><br><span class="line">        os.mkdir(path)</span><br><span class="line">    <span class="keyword">for</span> i, url <span class="keyword">in</span> enumerate(pic_url[:n]):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">            pic = requests.get(url, headers=headers)</span><br><span class="line">            print(path + name + str(i) + <span class="string">'.jpg'</span>)</span><br><span class="line">            <span class="keyword">with</span> open(path + name + str(i) + <span class="string">'.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(pic.content)</span><br><span class="line">            print(<span class="string">'loading &#123;&#125; pic...'</span>.format(str(i)))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'something error'</span>)</span><br><span class="line">            print(e)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPexelPic</span><span class="params">(search_word)</span>:</span></span><br><span class="line">    url = <span class="string">'https://www.pexels.com/search/'</span></span><br><span class="line">    pic_num = input(<span class="string">'请输出您要爬取的图片数(阿拉伯数字)：'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> pic_num.isdigit():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pic_num = input(</span><br><span class="line">                <span class="string">'I said just input a number! :'</span>)</span><br><span class="line">    page = math.ceil(int(pic_num)/<span class="number">30</span>)</span><br><span class="line">    url = url + search_word + <span class="string">'/'</span></span><br><span class="line">    pic_urls = []</span><br><span class="line">    page = int(page) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, int(page)):</span><br><span class="line">        re_url = url + <span class="string">'?page='</span> + str(x)</span><br><span class="line">        print(re_url)</span><br><span class="line">        pic_urls.extend(get_page_urls(re_url))</span><br><span class="line"></span><br><span class="line">    downloadPic(search_word, pic_urls, <span class="string">'E:/PythonPic'</span>,int(pic_num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    search_word = YouDao()</span><br><span class="line">    getPexelPic(search_word)</span><br></pre></td></tr></table></figure><blockquote><p>成功的截图</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx17fc3hj30sz0fcwhz.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx17kdodg30fa0jbdgd.jpg" alt="img"></p><p><br><br><br>由于是国外的网站，访问速度确实有点慢，而且有时候会断，emmm，可以重新来一遍，就好了。下次我写个百度图片的爬取，因为这个网站如果你想搜索具体的图片可能不行，当然你也可以对我的代码进行适当的扩展，如下载到本地的路径可以自己输入So<br><br>Just for fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Pexels优秀图片下载&quot;&gt;&lt;a href=&quot;#Pexels优秀图片下载&quot; class=&quot;headerlink&quot; title=&quot;Pexels优秀图片下载&quot;&gt;&lt;/a&gt;Pexels优秀图片下载&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在日常生活中，相信大家一定有过没有好的，有内涵的图片而烦恼，比如，做ppt的时候,没有好看的图片做背景；想换壁纸的时候也是没有好看、清新的图片做壁纸，今天我就用Python写一个爬虫，智能爬取优质图片。爬取的网站是&lt;a href=&quot;https://www.pexels.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pexels&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://www.lightfisher.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://www.lightfisher.cn/tags/Python/"/>
    
      <category term="spider" scheme="http://www.lightfisher.cn/tags/spider/"/>
    
  </entry>
  
  <entry>
    <title>VIP音乐免费下载</title>
    <link href="http://www.lightfisher.cn/2018/12/20/IP%E9%9F%B3%E4%B9%90%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD/"/>
    <id>http://www.lightfisher.cn/2018/12/20/IP音乐免费下载/</id>
    <published>2018-12-20T08:02:00.000Z</published>
    <updated>2019-01-06T08:01:44.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VIP音乐免费下载"><a href="#VIP音乐免费下载" class="headerlink" title="VIP音乐免费下载"></a>VIP音乐免费下载</h1><blockquote><p>好久没有更新博客了，今天我就来写一个爬虫吧。如果你是那种喜欢缓存歌，喜欢听歌的人，你一定遇到过这种情况，<code>由于版权原因无法播放(缓存)此歌曲</code>，或者是<code>请使用客户端下载</code>(emmm,有些下载客户端也不能下载)。所以，为了世界的幸福感，为了守护世界的和平，贯彻爱与真实的邪恶，可爱又迷人的反派角色，emmm，对不起跑题了，今天我就写一个，突破这种限制的小小小音乐爬虫，So Just have fun again…</p></blockquote><a id="more"></a><p>就拿杰伦的这首稻香，当你点击播放的时候，就显示下面这个界面，无法播放</p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx4qkemaj30w20pstd5.jpg" alt="img"></p><p>所以有了这篇博客的由来。</p><h3 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h3><blockquote><p>先拿一首能播放的音乐，就拿这首薛之谦的《刚刚好》来分析，进入这个页面右键<code>检查</code>,或者按<code>F12</code>进入开发者调试界面，再选中<code>Network</code>,你应该就能看到下面这个界面(如果不能，你就刷新页面)</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx4qof0cj31g40on45d.jpg" alt="img"></p><p>上面那个歌曲链接，如果你直接去访问应该是就直接下载了，但是这样对稻香这种歌，根本不能播放，就不会去接受数据播放音乐，也就是说不会有这个url链接</p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx4qu0blj31g60lztez.jpg" alt="img"></p><p><strong>但是</strong>，莫慌，慢慢来</p><blockquote><p>我们先来看看它是如何接受这首歌的地址，我们先你前面选中的<code>Media</code>换成<code>All</code>,然后刷新页面，这个时候你肯定看到乱七八糟的’东西’，如下</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx4r7s0aj31fz0ocn76.jpg" alt="img"></p><blockquote><p>这个时候不能脑壳疼，这些只是你刷新页面后接受的数据，我们要的东西一定就是在这里面，所以，我们就要进行筛选，这里我就简单说一种，你点击<code>size</code>,让它从大到小排序。。。这个时候，你应该就更能看清了，</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx4rd82tj30vp0j079g.jpg" alt="img"></p><blockquote><p>第一个数据那么大，你点击进去发现，就是前面我们找到的歌曲url，显然不是我们现在要的数据。所以，我们接着往下找，一个个点击进去，并点<code>Preview</code>(这样看更加直观)，分别是一个个图片，直到点到这个</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx4qylxdj31gr0phakg.jpg" alt="img"></p><blockquote><p>点<code>Preview</code>，我们就能更加肯定是我们要找的数据包</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx4r3fc7j31ev0obdrj.jpg" alt="img"></p><blockquote><p>把前面的URL地址复制下来直接去访问看看，发现就是我们要的数据(（。－_－。），总算找到了)</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx4rm4dvj31gq0qc12r.jpg" alt="img"></p><blockquote><p>找到了以后，这次的博客我们就可以写代码了</p></blockquote><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><blockquote><p>思路已经讲清，就简单展示下我们的code。因为每个人的写代码思路不同就不详述了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">author:lightfish</span></span><br><span class="line"><span class="string">time:2018.12.19</span></span><br><span class="line"><span class="string">note:千千音乐的批量下载</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_music_resource</span><span class="params">(songid)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param songid: 歌曲的id</span></span><br><span class="line"><span class="string">    :return: 因为我们爬取的数据并不是规范的json格式数据，所以我们就得进行适当的处理，让他变成</span></span><br><span class="line"><span class="string">    规范的json格式数据，这里，我用的是正则方法</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    search_url = <span class="string">'http://musicapi.taihe.com/v1/restserver/ting?method=baidu.ting.song.playAAC&amp;format=jsonp&amp;callback=jQuery172047648654448286276_1545221906467&amp;songid=&#123;&#125;'</span>.format(</span><br><span class="line">        songid)</span><br><span class="line">    response = requests.get(search_url).text</span><br><span class="line">    res = re.findall(<span class="string">r'\((.*)\)'</span>, response)[<span class="number">0</span>]</span><br><span class="line">    res_json = json.loads(res)</span><br><span class="line">    <span class="keyword">return</span> res_json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_music_info</span><span class="params">(jsondata)</span>:</span></span><br><span class="line">    songinfo = jsondata[<span class="string">'songinfo'</span>]</span><br><span class="line">    music_title = songinfo[<span class="string">'title'</span>]</span><br><span class="line">    print(<span class="string">'歌名: '</span> + music_title)</span><br><span class="line">    music_compose = songinfo[<span class="string">'compose'</span>]</span><br><span class="line">    print(<span class="string">'作者: '</span> + music_compose)</span><br><span class="line">    album_title = songinfo[<span class="string">'album_title'</span>]</span><br><span class="line">    print(<span class="string">'专辑: '</span> + album_title)</span><br><span class="line">    avatar = songinfo[<span class="string">'artist_list'</span>][<span class="number">0</span>][<span class="string">'avatar_s300'</span>] <span class="keyword">if</span> songinfo[<span class="string">'artist_list'</span>][<span class="number">0</span>][<span class="string">'avatar_s300'</span>] <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    print(<span class="string">'头像: '</span> + avatar)</span><br><span class="line">    music_language = songinfo[<span class="string">'language'</span>] <span class="keyword">if</span> songinfo[<span class="string">'language'</span>] <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    print(<span class="string">'语种: '</span> + music_language)</span><br><span class="line">    music_country = songinfo[<span class="string">'country'</span>] <span class="keyword">if</span> songinfo[<span class="string">'country'</span>] <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    print(<span class="string">'国家: '</span> + music_country)</span><br><span class="line">    music_url = jsondata[<span class="string">'bitrate'</span>][<span class="string">'file_link'</span>]</span><br><span class="line">    print(music_url)</span><br><span class="line">    <span class="keyword">return</span> music_title, music_url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">music_download</span><span class="params">(filename, url)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename + <span class="string">'.mp3'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(requests.get(url).content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    songid = input(<span class="string">'请输入歌曲的id: '</span>)</span><br><span class="line">    data = get_music_resource(songid)</span><br><span class="line">    music_title, music_url = get_music_info(data)</span><br><span class="line">    is_download = input(<span class="string">'是否下载(y/n): '</span>)</span><br><span class="line">    <span class="keyword">if</span> is_download.lower() == <span class="string">'y'</span>:</span><br><span class="line">        music_download(music_title, music_url)</span><br><span class="line">        print(<span class="string">'下载完成，Just for fun...'</span>)</span><br><span class="line">    <span class="keyword">elif</span> is_download.lower() == <span class="string">'n'</span>:</span><br><span class="line">        print(<span class="string">'Just for fun...'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'emmm ,exiting...'</span>)</span><br></pre></td></tr></table></figure><h3 id="成功截图"><a href="#成功截图" class="headerlink" title="成功截图"></a>成功截图</h3><blockquote><p>emmm,忽然发现都快忘了我们周董的《稻香》了，其实是一样的，也有着songid，你去访问也是能获得你想要的链接地址。anywhere，Just for fun…</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx4rragsj31gm0qf11s.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywx4rvc5dj31gr0qd48l.jpg" alt="img"></p><p><br><br><br>以上就是这次博客的一点小小内容了，你可以进行设当的扩展，如只需要输入歌手的名称就下载全部该歌手的音乐(emmm,本来想写的，乏了，这种重任就交给你们了)，可以给一点思路，获取页面，找到所有的歌曲id，搜索就更简单了，构造url 例如薛之谦的搜索界面是这样的 <a href="http://music.taihe.com/search?key=%E8%96%9B%E4%B9%8B%E8%B0%A6" target="_blank" rel="noopener">click me</a>,是不是很简单<br><br>So,Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;VIP音乐免费下载&quot;&gt;&lt;a href=&quot;#VIP音乐免费下载&quot; class=&quot;headerlink&quot; title=&quot;VIP音乐免费下载&quot;&gt;&lt;/a&gt;VIP音乐免费下载&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;好久没有更新博客了，今天我就来写一个爬虫吧。如果你是那种喜欢缓存歌，喜欢听歌的人，你一定遇到过这种情况，&lt;code&gt;由于版权原因无法播放(缓存)此歌曲&lt;/code&gt;，或者是&lt;code&gt;请使用客户端下载&lt;/code&gt;(emmm,有些下载客户端也不能下载)。所以，为了世界的幸福感，为了守护世界的和平，贯彻爱与真实的邪恶，可爱又迷人的反派角色，emmm，对不起跑题了，今天我就写一个，突破这种限制的小小小音乐爬虫，So Just have fun again…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://www.lightfisher.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://www.lightfisher.cn/tags/python/"/>
    
      <category term="spider" scheme="http://www.lightfisher.cn/tags/spider/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+github搭建个人博客四</title>
    <link href="http://www.lightfisher.cn/2018/12/16/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%9B%9B/"/>
    <id>http://www.lightfisher.cn/2018/12/16/Hexo-github搭建个人博客四/</id>
    <published>2018-12-16T08:26:00.000Z</published>
    <updated>2019-01-06T08:03:18.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-github搭建个人博客"><a href="#Hexo-github搭建个人博客" class="headerlink" title="Hexo+github搭建个人博客"></a>Hexo+github搭建个人博客</h1><blockquote><p>一直拖了很久，今天就来为你们来点干货，这次我会讲解一个干货，如，word文字统计，点击爱心效果展示，live2d可爱动漫人物的设置，网易云音乐的设置，添加网站运行时间</p></blockquote><a id="more"></a><h3 id="1-文字统计和阅读时长的设置"><a href="#1-文字统计和阅读时长的设置" class="headerlink" title="1.文字统计和阅读时长的设置"></a>1.文字统计和阅读时长的设置</h3><blockquote><p>这个动能其实已经集成过的，有兴趣的话看<a href="https://www.npmjs.com/package/hexo-wordcount" target="_blank" rel="noopener">官网介绍</a>。这里的话，我就简单描述一遍。</p></blockquote><h4 id="1-安装hexo-wordcount"><a href="#1-安装hexo-wordcount" class="headerlink" title="1.安装hexo-wordcount"></a>1.安装hexo-wordcount</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --<span class="keyword">save</span> hexo-<span class="built_in">wordcount</span></span><br></pre></td></tr></table></figure><h4 id="2-文件配置"><a href="#2-文件配置" class="headerlink" title="2.文件配置"></a>2.文件配置</h4><blockquote><p>在<code>Hexo\themes\yilia\layout\_partial\post</code>下创建word,ejs文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top:10px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-time"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-keyboard-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>  字数统计: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">wordcount</span>(<span class="attr">post.content</span>) %&gt;</span>字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-time"</span>&gt;</span></span><br><span class="line">      &amp;nbsp; | &amp;nbsp;</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-hourglass-half"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>  阅读时长: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">min2read</span>(<span class="attr">post.content</span>) %&gt;</span>分<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果基本应该和我一样</p><h3 id="2-点击爱心效果设置"><a href="#2-点击爱心效果设置" class="headerlink" title="2.点击爱心效果设置"></a>2.点击爱心效果设置</h3><h4 id="1-在yilia-source文件下创建clicklove-js-加入以下代码"><a href="#1-在yilia-source文件下创建clicklove-js-加入以下代码" class="headerlink" title="1.在yilia/source文件下创建clicklove.js,加入以下代码"></a>1.在yilia/source文件下创建clicklove.js,加入以下代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxbno7f7j30p60e5jta.jpg" alt="img"></p><h4 id="2-在Hexo-themes-yilia-layout-partial下配置"><a href="#2-在Hexo-themes-yilia-layout-partial下配置" class="headerlink" title="2.在Hexo\themes\yilia\layout\_partial下配置"></a>2.在<code>Hexo\themes\yilia\layout\_partial</code>下配置</h4><ul><li>修改<code>footer.ejs</code>文件，因为这个文件基本每个布局都会用到，所以在文件尾添加一下代码</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/clicklove.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxbns0roj30nl0fd0vs.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxbo19s1j30v805x74m.jpg" alt="img"></p><h3 id="3-设置可爱的动漫小人"><a href="#3-设置可爱的动漫小人" class="headerlink" title="3.设置可爱的动漫小人"></a>3.设置可爱的动漫小人</h3><h4 id="1-安装模块"><a href="#1-安装模块" class="headerlink" title="1.安装模块"></a>1.安装模块</h4><blockquote><p>hexo博客根目录选择<code>cmd</code>命令窗口或者<code>git bash</code> 输入以下代码，安装插件</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-helper-live2d</span></span><br></pre></td></tr></table></figure><blockquote><p>各种模型<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">展示</a></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-haru/02 (<span class="keyword">use</span> npm <span class="keyword">install</span> <span class="comment">--save live2d-widget-model-haru)</span></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-haruto</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-hibiki</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-hijiki</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-izumi</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-koharu</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-miku</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-ni-j</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nico</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nietzsche</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nipsilon</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nito</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-shizuku</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-tororo</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-tsumiki</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-unitychan</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-wanko</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-z16</span><br></pre></td></tr></table></figure><blockquote><p>选择好对应的模型，使用 <code>npm install</code> 模型的包名来安装，比如我选择的的是live2d-widget-model-koharu 模型包</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> live2d-widget-<span class="keyword">model</span>-koharu</span><br></pre></td></tr></table></figure><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><blockquote><p>打开个人Hexo博客文件根目录下的 <code>_config.yml</code> 文件，在最后添加一下代码</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#二次元</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  scriptFrom:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line"><span class="attr">  pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line"><span class="attr">  pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line"><span class="attr">  tagMode:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  debug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  model:</span></span><br><span class="line"><span class="attr">    use:</span> <span class="string">live2d-widget-model-haruto</span> <span class="comment">#这个是你要修改的</span></span><br><span class="line"><span class="attr">  display:</span></span><br><span class="line"><span class="attr">    position:</span> <span class="string">left</span> <span class="comment">#在屏幕上的显示位置</span></span><br><span class="line"><span class="attr">    width:</span> <span class="number">85</span> <span class="comment">#显示宽度</span></span><br><span class="line"><span class="attr">    height:</span> <span class="number">170</span> <span class="comment">#显示高度</span></span><br><span class="line"><span class="attr">  mobile:</span></span><br><span class="line"><span class="attr">    show:</span> <span class="literal">false</span> <span class="comment">#手机端是否显示</span></span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxbo3z7mj30zi0hb0xm.jpg" alt="img"></p><h4 id="3-注意"><a href="#3-注意" class="headerlink" title="3.注意"></a>3.<strong>注意</strong></h4><blockquote><p>当你换了动漫人物，发现在本地并没有展示出来的时候，或者明明设置了宽高时，不用慌，你可以<code>hexo clean</code>以下，再<code>hexo g</code>生成静态文件，<code>hexo s</code>启动本地服务看看，这样应该就行了。</p></blockquote><h3 id="4-网站运行时间的设置"><a href="#4-网站运行时间的设置" class="headerlink" title="4.网站运行时间的设置"></a>4.网站运行时间的设置</h3><h4 id="1-在前面提及到footer-ejs中修改，添加以下代码"><a href="#1-在前面提及到footer-ejs中修改，添加以下代码" class="headerlink" title="1.在前面提及到footer.ejs中修改，添加以下代码"></a>1.在前面提及到footer.ejs中修改，添加以下代码</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"timeDate"</span>&gt;</span>载入天数...<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"times"</span>&gt;</span>载入时分秒...<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  #这个就是显示的文字，注意加的位置，要显示出来</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">createtime</span><span class="params">()</span> </span>&#123; </span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"12/03/2018 12:49:00"</span>);<span class="comment">//此处修改你的建站时间或者网站上线时间 </span></span></span><br><span class="line"><span class="undefined">        now.setTime(now.getTime()+250); </span></span><br><span class="line"><span class="javascript">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="built_in">Math</span>.floor(days); </span></span><br><span class="line"><span class="javascript">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="built_in">Math</span>.floor(hours); </span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="built_in">String</span>(hnum).length ==<span class="number">1</span> )&#123;hnum = <span class="string">"0"</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum); </span></span><br><span class="line"><span class="javascript">        mnum = <span class="built_in">Math</span>.floor(minutes); <span class="keyword">if</span>(<span class="built_in">String</span>(mnum).length ==<span class="number">1</span> )&#123;mnum = <span class="string">"0"</span> + mnum;&#125; </span></span><br><span class="line"><span class="undefined">        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); </span></span><br><span class="line"><span class="javascript">        snum = <span class="built_in">Math</span>.round(seconds); <span class="keyword">if</span>(<span class="built_in">String</span>(snum).length ==<span class="number">1</span> )&#123;snum = <span class="string">"0"</span> + snum;&#125; </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"timeDate"</span>).innerHTML = <span class="string">"本站已安全运行 "</span>+dnum+<span class="string">" 天 "</span>; </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"times"</span>).innerHTML = hnum + <span class="string">" 小时 "</span> + mnum + <span class="string">" 分 "</span> + snum + <span class="string">" 秒"</span>; </span></span><br><span class="line"><span class="undefined">    &#125; </span></span><br><span class="line"><span class="actionscript">setInterval(<span class="string">"createtime()"</span>,<span class="number">250</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br><br>以上就是全部博客内容了，So<br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-github搭建个人博客&quot;&gt;&lt;a href=&quot;#Hexo-github搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo+github搭建个人博客&quot;&gt;&lt;/a&gt;Hexo+github搭建个人博客&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一直拖了很久，今天就来为你们来点干货，这次我会讲解一个干货，如，word文字统计，点击爱心效果展示，live2d可爱动漫人物的设置，网易云音乐的设置，添加网站运行时间&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.lightfisher.cn/categories/Hexo/"/>
    
    
      <category term="hexo搭建" scheme="http://www.lightfisher.cn/tags/hexo%E6%90%AD%E5%BB%BA/"/>
    
      <category term="hexo" scheme="http://www.lightfisher.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git分支</title>
    <link href="http://www.lightfisher.cn/2018/12/13/Git%E5%88%86%E6%94%AF/"/>
    <id>http://www.lightfisher.cn/2018/12/13/Git分支/</id>
    <published>2018-12-13T09:05:00.000Z</published>
    <updated>2019-01-06T08:07:21.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git分支的简单讲解"><a href="#Git分支的简单讲解" class="headerlink" title="Git分支的简单讲解"></a>Git分支的简单讲解</h1><blockquote><p>上一个博客也是写了Git的简单操作和使用，我也是好好的去恶习了一下，今天就来说一下Git的分支。</p></blockquote><a id="more"></a><h2 id="讲解环境"><a href="#讲解环境" class="headerlink" title="讲解环境"></a>讲解环境</h2><blockquote><p>我把上次github的仓库给删了，重新创建了一个,这样可能看的更加的清楚</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxd7ktkij31gg0q6n25.jpg" alt="img"></p><blockquote><p>在本地我也是删除了以上的那个文件夹，重新来一遍，理一下思路</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxd7nziej30gj09dac1.jpg" alt="img"></p><h2 id="讲解过程"><a href="#讲解过程" class="headerlink" title="讲解过程"></a>讲解过程</h2><blockquote><ol><li>先在<code>master</code>分支下创建<code>README.md</code>和<code>a.txt</code>，并输入一些信息<code>Hello Git</code>和<code>This is a.txt</code>。(初始化Git仓库就有<code>master</code>分支)</li></ol></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxd7qnf9j30gf0a640k.jpg" alt="img"></p><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><blockquote><p>创建分支是用<code>git branch &lt;branch_name&gt;</code></p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxd7tyxmj30bu01vaa7.jpg" alt="img"></p><blockquote><p>嘿嘿<code>fatal: Not a valid object name: &#39;master&#39;</code>,你如果出现这个错误，是因为没有提交对象，要先commit一次<code>master</code>分支才是真正的建立,所以我们就<code>commit</code>咯</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxd7wgaej30ga0ab76t.jpg" alt="img"></p><blockquote><p><strong>注意</strong> <code>git branch</code>就是参看当前的分支哦~</p></blockquote><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><blockquote><p>切换分支是用<code>git checkout &lt;branch_name&gt;</code></p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxd7z13kj30cf02p0t4.jpg" alt="img"></p><p>切换到<code>feature1</code></p><blockquote><p>这里可以再扩展一下 <code>git checkout -b &lt;branch_name&gt;</code> 就是创建并跳转 记住哦是<code>git checkout -b</code></p></blockquote><h3 id="删除本地的分支"><a href="#删除本地的分支" class="headerlink" title="删除本地的分支"></a>删除本地的分支</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">branch </span>-d feature1 <span class="comment"># 删除分支</span></span><br></pre></td></tr></table></figure><blockquote><p>如果你在要删除的分支下，创建一些东西但是没有合并到主分支，他就可能就显示一些小错误，你可以使用<code>git branch -D</code>加你要删除的分支名。一般大写的都有一定的强制型</p></blockquote><h3 id="分支的功能"><a href="#分支的功能" class="headerlink" title="分支的功能"></a>分支的功能</h3><blockquote><p>下面我们就用实例来了解git分支的作用和基本功能</p></blockquote><blockquote><p>我们先在<code>feature1</code>的分支下，创建一个<code>b.txt</code>，并输入信息用于等会辨认</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxd85khgj30ga0a4gnr.jpg" alt="img"></p><blockquote><p>在<code>feature1</code>分支下创建了b.txt并commit一次。commit完了后，我们就可以进行比较</p></blockquote><blockquote><p><code>ls</code>查看<code>feature1</code>分支下的文件，发现有<code>a.txt</code>,这是因为我们是在<code>master</code>分支下创建了<code>feature1</code>的分支，你可以理解成在<code>master</code>下又引申出去了一条<code>feature1</code>分支，所以有着master分支下的a.txt</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxd88h3bj30d001ujrf.jpg" alt="img"></p><blockquote><p>然后，我们在切换到master分支下查看</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxd8bba8j30gg049wf4.jpg" alt="img"></p><blockquote><p>上面可以看到，在<code>master</code>分支下，只有原先的<code>a.txt</code>和<code>README.md</code>文件，这是符合我上述的理解</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxd8fuxzj30tf08twf2.jpg" alt="img"></p><h2 id="上传到远程仓库"><a href="#上传到远程仓库" class="headerlink" title="上传到远程仓库"></a>上传到远程仓库</h2><blockquote><p>上传到github上</p></blockquote><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add <span class="built_in">origin</span> https://github.com/QGtiger/git_test.git</span><br><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxfobfvxj30g406zdhq.jpg" alt="img"></p><blockquote><p>相信这里我们就能很好的理解master的用意了，就是上传到远程仓库的master分支上，这个<code>-u</code>是为了第一次以后推送就只需要<code>git push</code>就行</p></blockquote><blockquote><p>那能不能上传到分支上呢? 相信大家都大致能推理出来，就是用下列的代码</p></blockquote><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">push</span> origin feature1 <span class="meta"># 后面这个feature1就是本地的分支名称哦</span></span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxfofaibj315s0ep0xa.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxfotsaaj310l0do0x0.jpg" alt="img"></p><blockquote><p>而且远程仓库的分支确实比master分支多了一个b.txt</p></blockquote><h3 id="上传的时候修改分支的名称"><a href="#上传的时候修改分支的名称" class="headerlink" title="上传的时候修改分支的名称"></a>上传的时候修改分支的名称</h3><blockquote><p>在后面加<code>:</code>和你想要的分支名称</p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">push </span>origin feature1:<span class="built_in">f2</span> # 后面这个feature1就是本地的分支名称哦</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxfoxfg6j31200fm434.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxfp3cqcj30e70f7756.jpg" alt="img"></p><h3 id="删除远程仓库的分支"><a href="#删除远程仓库的分支" class="headerlink" title="删除远程仓库的分支"></a>删除远程仓库的分支</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">push </span>origin :<span class="built_in">f2</span> # 在你要删除的分支前加<span class="string">':'</span></span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxfp6py6j31200fktcx.jpg" alt="img"></p><p><br><br><br>这次的博客就基本到这了，讲解了git仓库的基本操作，So<br><br>Just for fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git分支的简单讲解&quot;&gt;&lt;a href=&quot;#Git分支的简单讲解&quot; class=&quot;headerlink&quot; title=&quot;Git分支的简单讲解&quot;&gt;&lt;/a&gt;Git分支的简单讲解&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;上一个博客也是写了Git的简单操作和使用，我也是好好的去恶习了一下，今天就来说一下Git的分支。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Git" scheme="http://www.lightfisher.cn/categories/Git/"/>
    
    
      <category term="Git操作" scheme="http://www.lightfisher.cn/tags/Git%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Git 的一些基本操作和讲解</title>
    <link href="http://www.lightfisher.cn/2018/12/13/t-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%92%8C%E8%AE%B2%E8%A7%A3/"/>
    <id>http://www.lightfisher.cn/2018/12/13/t-的一些基本操作和讲解/</id>
    <published>2018-12-13T04:22:55.000Z</published>
    <updated>2019-01-06T08:13:14.300Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-的一些基本操作和讲解"><a href="#Git-的一些基本操作和讲解" class="headerlink" title="Git 的一些基本操作和讲解"></a>Git 的一些基本操作和讲解</h1><blockquote><p>Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 [1]  Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p></blockquote><a id="more"></a><h2 id="Git-很强大，接下来我就讲解一下简单强大的命令"><a href="#Git-很强大，接下来我就讲解一下简单强大的命令" class="headerlink" title="Git 很强大，接下来我就讲解一下简单强大的命令"></a>Git 很强大，接下来我就讲解一下简单强大的命令</h2><h4 id="1-git-version-查看当前git版本"><a href="#1-git-version-查看当前git版本" class="headerlink" title="1.git version 查看当前git版本"></a>1.<code>git version</code> 查看当前git版本</h4><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxhc2qh4j30g6054wf1.jpg" alt="img"></p><h4 id="2-全局设置用户"><a href="#2-全局设置用户" class="headerlink" title="2.全局设置用户"></a>2.全局设置用户</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"..."</span>  #你的账号，比如github</span><br><span class="line">git cinfig --global user.email <span class="string">"..."</span>  #你的邮箱地址，github账户邮箱</span><br></pre></td></tr></table></figure><p>查看你的账户哦~</p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxhc5aqtj30b102kglq.jpg" alt="img"></p><p><code>cat ~/.gitconfig</code> 查看你的git配置,上面就是查看</p><h4 id="3-初始化git仓库，并查看状态"><a href="#3-初始化git仓库，并查看状态" class="headerlink" title="3.初始化git仓库，并查看状态"></a>3.初始化git仓库，并查看状态</h4><ul><li><p><code>git init</code>初始化git仓库，初始化后会有一个.git的隐藏文件，下面我教一个如何命令行查看隐藏文件</p></li><li><p><code>ll -la</code> 查看隐藏文件</p></li></ul><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxhckd9wj30f803hq3l.jpg" alt="img"></p><ul><li><p><code>touch &lt;file&gt;</code> 命令相当于你新建一个文件 后面跟文件名(记得加后缀)</p></li><li><p><code>git status</code> 查看当前git仓库的一个状态</p></li></ul><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxhc93roj30gi0didir.jpg" alt="img"></p><h4 id="4-git暂存区"><a href="#4-git暂存区" class="headerlink" title="4.git暂存区"></a>4.git暂存区</h4><ul><li><code>git add &lt;file&gt;</code> 后面加文件名  就是把后面的文件放到暂存区，你可以用上述git status方法查看变化</li></ul><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxhcbnwbj30ft06pgmg.jpg" alt="img"></p><ul><li><p><strong>注意</strong>：上述方法只是放到git仓库的暂存区，还没有真正的提交，你也可以用</p></li><li><p><code>git rm --cached &lt;file&gt;</code> 的方法把暂存区的删除</p></li></ul><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxhcee3yj30g00cjtai.jpg" alt="img"></p><ul><li>上面的 <code>git add -A</code> -A 就是all，就是目录下所有文件加入暂存区</li></ul><h4 id="5-git的提交"><a href="#5-git的提交" class="headerlink" title="5.git的提交"></a>5.git的提交</h4><ul><li><code>git commit -m &quot;...&quot;</code>  git commit就是提交，-m 就是可以加备注，””里面写你要加的备注，告诉别人你干了什么</li></ul><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxhcvwv3j30fn059q3v.jpg" alt="img"></p><h4 id="6-git到你的仓库"><a href="#6-git到你的仓库" class="headerlink" title="6.git到你的仓库"></a>6.git到你的仓库</h4><blockquote><p>为了显示，我重新创建一个存储库</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxhczk4oj30ie0ezgnb.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxhd4vbvj30t40l2tdf.jpg" alt="img"></p><blockquote><p>1.<code>git remote add origin https://github.com/QGtiger/git_test.git</code>就是跟远程的github仓库创立链接，可以用户多个远程仓库,<code>origin</code> 是一个名字，意思是远程仓库，约定俗成的名字，约定俗成的东西就不建议修改</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxkb4ggwj30dt03y3zd.jpg" alt="img"></p><blockquote><p>创立链接以后，我们就可以进行<code>git push</code>操作</p></blockquote><ul><li><code>git push -u origin master</code> <strong>origin</strong>就是远程仓库的名称，<strong>master</strong>就是远程仓库的分支名称，默认就是master,<strong>-u</strong> 第一次以后推送就只需要git push就行，<strong>注意</strong> 当你git push的时候可能会叫你输入github的账号和密码，你也可以ssh免密上传,下次有空在讲</li></ul><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxkb7myij30gd04yaba.jpg" alt="img"></p><ul><li>登上github就可以看到变化</li></ul><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxkbixp7j30z10ceq8c.jpg" alt="img"></p><h4 id="7-除了上述，我们本地创建git，然后，与远程仓库建立连接，我们也可以直接克隆下来"><a href="#7-除了上述，我们本地创建git，然后，与远程仓库建立连接，我们也可以直接克隆下来" class="headerlink" title="7.除了上述，我们本地创建git，然后，与远程仓库建立连接，我们也可以直接克隆下来"></a>7.除了上述，我们本地创建git，然后，与远程仓库建立连接，我们也可以直接克隆下来</h4><blockquote><p><code>git clone https://github.com/QGtiger/git_test.git</code>  远程克隆一个仓库 后面那个就是远程克隆的仓库链接,git会克隆下来，文件名是git_test,因为我本地当前目录下有git_test文件夹，你可以在后面加空格+文件夹名字</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxkbs3hxj30fe05d0tv.jpg" alt="img"></p><blockquote><p>然后，我们可以简单查看目录，然后进行修改，<code>vi</code> 命令相当于进行文本文件的编辑,具体的使用方法你可以自行百度，这里不多详述</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxkburipj30fp04s757.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxkbx57hj30g80ajaam.jpg" alt="img"><br>检查是都修改成功<br><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxkc1tc5j30cl02rwer.jpg" alt="img"></p><blockquote><p><code>git push</code> 推送到github<br><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxkc4coij30gd0acjtp.jpg" alt="img"></p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxkcb43kj30ul0f70ux.jpg" alt="img"></p><h4 id="git-pull-将远程仓库的拉到本地，相当于更新"><a href="#git-pull-将远程仓库的拉到本地，相当于更新" class="headerlink" title="git pull 将远程仓库的拉到本地，相当于更新"></a><code>git pull</code> 将远程仓库的拉到本地，相当于更新</h4><blockquote><p>当远程仓库被别人修改的，也就是前面的<code>git_test</code>git本地仓库，这个时候，你就可以切换到git_test 目录下进行下列操作 </p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxkch14wj30fs08ptal.jpg" alt="img"></p><p><br><br><br><br>今天的Git简单操作就讲到这里,So<br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git-的一些基本操作和讲解&quot;&gt;&lt;a href=&quot;#Git-的一些基本操作和讲解&quot; class=&quot;headerlink&quot; title=&quot;Git 的一些基本操作和讲解&quot;&gt;&lt;/a&gt;Git 的一些基本操作和讲解&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 [1]  Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Git" scheme="http://www.lightfisher.cn/categories/Git/"/>
    
    
      <category term="Git操作" scheme="http://www.lightfisher.cn/tags/Git%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+github搭建个人博客三</title>
    <link href="http://www.lightfisher.cn/2018/12/12/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%89/"/>
    <id>http://www.lightfisher.cn/2018/12/12/Hexo-github搭建个人博客三/</id>
    <published>2018-12-12T07:16:00.000Z</published>
    <updated>2019-01-06T08:15:13.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-github搭建个人博客"><a href="#Hexo-github搭建个人博客" class="headerlink" title="Hexo+github搭建个人博客"></a>Hexo+github搭建个人博客</h1><blockquote><p>前两个博客已经大概讲述了，hexo博客的搭建和基本的设置。今天，我就来教你如何写hexo搭建的博客。</p></blockquote><a id="more"></a><h2 id="1-原生方式新建文章"><a href="#1-原生方式新建文章" class="headerlink" title="1.原生方式新建文章"></a>1.原生方式新建文章</h2><blockquote><p>Hexo的项目结构是在网站根目录的source/_posts目录下存放你的博客文档，以.md文档格式存储，默认已存在一个hello-world.md文章,这个文章就是刚开始搭建博客展现出来的，相信你已经看过了。</p></blockquote><blockquote><p>新建文章可以用<code>hexo new &lt;title&gt;</code>,也可以指定一个layout属性，指定文章作为其他形式存放在别的目录，例如page新页面、draft草稿等。详细参考<a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">hexo|写作</a></p></blockquote><blockquote><p>然后可以直接去那个文件下,打开进行编辑，网上有很多这些markdown编辑器，如小书匠等等(支持在线)，我使用sublime Text的。基本截图如下：</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxni4lt1j30g30agabc.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxnibk10j311j0eggp4.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxnig7skj31h70btmyb.jpg" alt="img"></p><blockquote><p>emmmm,至于如何写markdown格式的文章，emmmm，网上应该有相关的教程，我就不献丑，可以参看这几篇<a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">博客</a></p></blockquote><h2 id="2-使用Hexo-Admin插件"><a href="#2-使用Hexo-Admin插件" class="headerlink" title="2.使用Hexo Admin插件"></a>2.使用Hexo Admin插件</h2><blockquote><p><a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener">Hexo Admin</a> 是一个本地在线式文章管理器，可以用直观可视化的方式新建、编辑博客文章、page页面，添加标签、分类等，并且支持剪贴板粘贴图片（自动在source_images_目录中创建文件),是不是感觉很棒，接下来我就简单讲述下Hexo Admin插件的安装</p></blockquote><p>1.在你的hexo站点目录下，输入以下代码进行安装</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-admin</span></span><br></pre></td></tr></table></figure><p>2.下面你就可以启动服务，进行检查是否安装成功,<strong>注意</strong>，浏览器输入网址是:localhost:4000/admin,后面记得加<code>/admin</code>,4000是你的端口号，记得改成你的启动端口号</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo s -d</span></span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxniix4nj31ha0jmtbk.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxnin23zj31g30oognu.jpg" alt="img"></p><p><br><br><br><br>以上就是本篇博客的全部内容了，祝你写博客愉快，So<br><br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-github搭建个人博客&quot;&gt;&lt;a href=&quot;#Hexo-github搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo+github搭建个人博客&quot;&gt;&lt;/a&gt;Hexo+github搭建个人博客&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;前两个博客已经大概讲述了，hexo博客的搭建和基本的设置。今天，我就来教你如何写hexo搭建的博客。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.lightfisher.cn/categories/Hexo/"/>
    
    
      <category term="Hexo搭建" scheme="http://www.lightfisher.cn/tags/Hexo%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>wordcloud词云</title>
    <link href="http://www.lightfisher.cn/2018/12/11/rdcloud%E8%AF%8D%E4%BA%91/"/>
    <id>http://www.lightfisher.cn/2018/12/11/rdcloud词云/</id>
    <published>2018-12-11T14:02:19.000Z</published>
    <updated>2018-12-11T14:06:04.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WordCloud中英文词云绘制"><a href="#WordCloud中英文词云绘制" class="headerlink" title="WordCloud中英文词云绘制"></a>WordCloud中英文词云绘制</h1><blockquote><p>摘要：当我们手上有一篇文档，比如小说、书籍、电影剧本，若想快速了解其主要内容，你这个时候就可以用到WordCloud词云图，显示主要的关键词(配合jieba.analyse更佳)。本博客将介绍常见的词云图绘制，以及Frequency频词云图。</p></blockquote><a id="more"></a><h5 id="首先，我们得准备好我们的文本文件"><a href="#首先，我们得准备好我们的文本文件" class="headerlink" title="首先，我们得准备好我们的文本文件"></a>首先，我们得准备好我们的文本文件</h5><blockquote><p>这里我就用我服务器上的<a href="http://39.108.219.55:8080/bkcontent?url=https://www.qu.la/book/746/10632452.html" target="_blank" rel="noopener">链接</a>文本,然后爬下来，当做测试文本。</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com/1.jpg" alt="截图"></p><ul><li>以下代码实现获取文本<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">content = requests.get(<span class="string">'http://39.108.219.55:8080/bkcontent?url=https://www.qu.la/book/746/10632452.html'</span>).text</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>获取文本后就是对着文本进行分析，这里我介绍是jieba模块的一个函数，<code>jieba.analyse.extract_tags()</code>,其中第一个参数是传进去的文本，<code>topK</code>是获取词频的最大词数，<code>allowPOS</code>是获取词频的词语类型，详情可查看这片<a href="https://blog.csdn.net/HHTNAN/article/details/77650128" target="_blank" rel="noopener">博客</a>,<code>withWeight</code>是 是否展示权重，返回的是频词和权重的元组列表。</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com/2.jpg" alt="img"></p><p><img src="http://pjas65wzi.bkt.clouddn.com/3.jpg" alt="img"></p><blockquote><p>利用的是<code>generate_from_text()</code>方法生成词云，传入的参数是以<code>空格</code>为间隔,所以基本代码实现如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">content = requests.get(<span class="string">'http://39.108.219.55:8080/bkcontent?url=https://www.qu.la/book/746/10632452.html'</span>).text</span><br><span class="line">tags = jieba.analyse.extract_tags(</span><br><span class="line">    content, topK=<span class="number">100</span>, allowPOS=(</span><br><span class="line">        <span class="string">'ns'</span>, <span class="string">'n'</span>, <span class="string">'vn'</span>, <span class="string">'v'</span>, <span class="string">'nr'</span>))</span><br><span class="line">contents = <span class="string">' '</span>.join(tags)</span><br><span class="line">print(contents)</span><br><span class="line">wc = WordCloud(</span><br><span class="line">    background_color=<span class="string">'white'</span>,</span><br><span class="line">    font_path=<span class="string">r'C:\Windows\font\kaiu.ttf'</span>,</span><br><span class="line">    width=<span class="number">800</span>,</span><br><span class="line">    height=<span class="number">400</span>,</span><br><span class="line">    margin=<span class="number">2</span>,</span><br><span class="line">    max_words=<span class="number">100</span>,</span><br><span class="line">    min_font_size=<span class="number">15</span>,</span><br><span class="line">    random_state=<span class="number">100</span>,</span><br><span class="line">    mode=<span class="string">'RGB'</span>,</span><br><span class="line">    repeat=<span class="keyword">False</span></span><br><span class="line">)</span><br><span class="line">wc.generate_from_text(contents)</span><br><span class="line">plt.imshow(wc)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://pjas65wzi.bkt.clouddn.com/4.jpg" alt="img"></p><blockquote><p>通过上面的词云图，你可能会有几个问题：</p><ul><li>可不可以换背景</li><li>词云图能不能换成其他的形状</li><li>有些词汇能不能去掉</li></ul></blockquote><blockquote><p>以上这些都是可以更改的，所以，接下来，我就先了解一下WordCloud的API参数及其它 一些方法</p></blockquote><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>font_path</td><td>字体的路径，英文不需要设置，中文需要</td></tr><tr><td>width</td><td>宽度，默认400</td></tr><tr><td>height</td><td>高度，默认200</td></tr><tr><td>margin</td><td>边缘，如2</td></tr><tr><td>ranks_only</td><td>…</td></tr><tr><td>mask</td><td>背景图形，如果想根据图片绘制，则需要设置</td></tr><tr><td>scale</td><td>缩放</td></tr><tr><td>max_words</td><td>最多显示词汇</td></tr><tr><td>min_font_size</td><td>最小字号</td></tr><tr><td>stopwords</td><td>停止词的设置</td></tr><tr><td>random_state</td><td>可以理解为词汇的杂乱度</td></tr><tr><td>background_color</td><td>背景颜色，可以16进制</td></tr><tr><td>colormap</td><td>matplotlib 色图，可更改名称进而更改整体风格</td></tr><tr><td>repeat</td><td>默认False</td></tr></tbody></table><p>关于更详细的用法，您可以去官网了解</p><h3 id="图片背景的词云实现-白底"><a href="#图片背景的词云实现-白底" class="headerlink" title="图片背景的词云实现(白底)"></a>图片背景的词云实现(白底)</h3><ul><li><p>图片展示<br><img src="http://pjas65wzi.bkt.clouddn.com/5.jpg" width="300"></p></li><li><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud,STOPWORDS,ImageColorGenerator</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">content = requests.get(<span class="string">'http://39.108.219.55:8080/bkcontent?url=https://www.qu.la/book/746/10632452.html'</span>).text</span><br><span class="line">tags = jieba.analyse.extract_tags(</span><br><span class="line">    content, topK=<span class="number">40</span>, allowPOS=(</span><br><span class="line">        <span class="string">'ns'</span>, <span class="string">'n'</span>, <span class="string">'vn'</span>, <span class="string">'v'</span>, <span class="string">'nr'</span>))</span><br><span class="line">contents = <span class="string">' '</span>.join(tags)</span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">background_image = np.array(Image.open(<span class="string">'5.JPG'</span>))</span><br><span class="line"><span class="comment">#提取背景图片的颜色</span></span><br><span class="line">img_color = ImageColorGenerator(background_image)</span><br><span class="line"><span class="comment">#设置停止词</span></span><br><span class="line">stopword = set(STOPWORDS)</span><br><span class="line">wc = WordCloud(</span><br><span class="line">    mask=background_image,</span><br><span class="line">    font_path=<span class="string">r'C:\Windows\font\kaiu.ttf'</span>,</span><br><span class="line">    background_color=<span class="string">'white'</span>,</span><br><span class="line">    width=<span class="number">800</span>,</span><br><span class="line">    height=<span class="number">400</span>,</span><br><span class="line">    margin=<span class="number">2</span>,</span><br><span class="line">    max_words=<span class="number">100</span>,</span><br><span class="line">    min_font_size=<span class="number">15</span>,</span><br><span class="line">    random_state=<span class="number">100</span>,</span><br><span class="line">    repeat=<span class="keyword">False</span></span><br><span class="line">)</span><br><span class="line">wc.generate_from_text(contents) <span class="comment"># 等价于wc.gernerate(contents)</span></span><br><span class="line"><span class="comment"># #根据图片色设置背景色</span></span><br><span class="line"><span class="comment"># wc.recolor(color_func=img_color)</span></span><br><span class="line">wc.to_file(<span class="string">'yoona.jpg'</span>)</span><br><span class="line"><span class="comment">#显示图片</span></span><br><span class="line">plt.imshow(wc)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>截图 ,emm基本实现，可能是图片的质量不行<br><img src="http://pjas65wzi.bkt.clouddn.com/yoona.jpg" width="300"><br><br><br><br>Just have fun…</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;WordCloud中英文词云绘制&quot;&gt;&lt;a href=&quot;#WordCloud中英文词云绘制&quot; class=&quot;headerlink&quot; title=&quot;WordCloud中英文词云绘制&quot;&gt;&lt;/a&gt;WordCloud中英文词云绘制&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;摘要：当我们手上有一篇文档，比如小说、书籍、电影剧本，若想快速了解其主要内容，你这个时候就可以用到WordCloud词云图，显示主要的关键词(配合jieba.analyse更佳)。本博客将介绍常见的词云图绘制，以及Frequency频词云图。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.lightfisher.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.lightfisher.cn/tags/Python/"/>
    
      <category term="wordcloud" scheme="http://www.lightfisher.cn/tags/wordcloud/"/>
    
  </entry>
  
  <entry>
    <title>MySql数据库操作</title>
    <link href="http://www.lightfisher.cn/2018/12/07/MySql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.lightfisher.cn/2018/12/07/MySql数据库操作/</id>
    <published>2018-12-07T10:04:11.000Z</published>
    <updated>2019-01-06T08:16:31.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySql数据库的基本操作"><a href="#MySql数据库的基本操作" class="headerlink" title="MySql数据库的基本操作"></a>MySql数据库的基本操作</h1><blockquote><p>MySql是关系型数据，关系型数据库是基于关系模型的数据库，而关系模型是通过二维表来保存的，所以它的存储方式就是行列组成的表，每一列是一个字段，每一行是一条记录。<br><br><br>在Python2中连接MySql的库大多是MySQLdb，但是这个库在Python3中不在支持，所以这里我推荐是PyMySQL。相信PyMySQL的安装大家都懂，只需要<code>pip install pymysql</code>下载到本地，然后安装，这里就不详述了。=.=</p></blockquote><a id="more"></a><h3 id="1-数据库的连接等简单操作"><a href="#1-数据库的连接等简单操作" class="headerlink" title="1.数据库的连接等简单操作"></a>1.数据库的连接等简单操作</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(</span><br><span class="line">    <span class="attribute">host</span>=<span class="string">'localhost'</span>, #本地就是localhost或者127.0.0.1</span><br><span class="line">    <span class="attribute">user</span>=<span class="string">'root'</span>, #你的MySql登录用户名</span><br><span class="line">    <span class="attribute">password</span>=<span class="string">''</span>, #登录密码</span><br><span class="line">    <span class="attribute">port</span>=3306  #默认端口是3306</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><blockquote><p>取数据库的游标</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cursor</span> = db.<span class="built_in">cursor</span>()</span><br><span class="line"><span class="built_in">cursor</span>.<span class="keyword">execute</span>(<span class="string">'SELECT VERSION()'</span>) #查看数据库的版本号 注意<span class="keyword">execute</span>就是执行mysql语句</span><br></pre></td></tr></table></figure><blockquote><p>取数据库的版本</p></blockquote><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> = cursor.fetchone() #fetchone()就是获取第一条数据，也就是上面的那个版本号</span></span><br><span class="line"><span class="title">print</span>('<span class="type">Database</span> version:' + <span class="class"><span class="keyword">data</span>[0])</span></span><br></pre></td></tr></table></figure><blockquote><p>建了一个名为spider 的数据库，并且默认编码是utf-8</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute('<span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> spider <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8<span class="string">') #default character set utf8 注意没有'</span>-<span class="string">'哦</span></span><br></pre></td></tr></table></figure><blockquote><p>选中数据库</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cursor</span>.<span class="keyword">execute</span>(<span class="string">'USE spider'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>建表</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sql = '<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> students (<span class="keyword">id</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,<span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">25</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span>,age <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>))<span class="string">'</span></span><br><span class="line"><span class="string">cursor.execute(sql)</span></span><br></pre></td></tr></table></figure><p>这里就是成功截图</p><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxpx0ffqj30r10iq42f.jpg" alt="img"></p><p>emmm，我用的是mysql的一个可视化工具<code>navicat</code>,你可以到这来<a href="https://pan.baidu.com/s/13BDqu8idklKPbYO1HPO5TQ" target="_blank" rel="noopener">下载</a> 密码: 5w3y<br>下面就是真正的mysql基本操作了</p><h3 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2.插入数据"></a>2.插入数据</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">id</span> = <span class="string">'2016210405068'</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">'言语'</span></span><br><span class="line"><span class="attr">age</span> = <span class="number">18</span></span><br><span class="line"><span class="attr">sql</span> = <span class="string">'INSERT INTO students(id,name,age) values(%s,%s,%s)'</span> #sql语句</span><br></pre></td></tr></table></figure><blockquote><p>插入数据的标准写法</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql, (id, name, age))</span><br><span class="line">    <span class="comment"># 需要执行db对象的commit()方法才能实现数据的插入，对于数据的插入、更新、删除操作都需要调用</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'Sucessful insert...'</span>)</span><br><span class="line">    db.commit()</span><br><span class="line">except <span class="keyword">Exception</span> <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">print</span>(e)</span><br><span class="line">    <span class="comment"># 加了一层异常处理，如果执行失败，则调用rollback()函数来执行数据的回滚，相当于什么都没有发生</span></span><br><span class="line">    db.rollback()</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong> 在很多情况下我们要达到的效果是插入方法无需改动，只需要传入一个字典就行，比如构造这个字典：</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'2016210405068'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'lightfish'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line">table = <span class="string">'students'</span> #数据库表</span><br><span class="line"><span class="built_in">keys</span> = <span class="string">','</span>.<span class="keyword">join</span>(data.<span class="built_in">keys</span>())  # str类型</span><br><span class="line"><span class="built_in">values</span> = <span class="string">','</span>.<span class="keyword">join</span>([<span class="string">'%s'</span>] * <span class="built_in">len</span>(data))</span><br><span class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;key&#125;) VALUES(&#123;values&#125;)'</span>.format(table=table, key=<span class="built_in">keys</span>, <span class="built_in">values</span>=<span class="built_in">values</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql, tuple(data.<span class="built_in">values</span>)): #元组类型</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">'Sucessful insert'</span>)</span><br><span class="line">        db.commit</span><br><span class="line">except Exception <span class="keyword">as</span> <span class="keyword">e</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">e</span>)</span><br><span class="line">    db.rollback()</span><br></pre></td></tr></table></figure><h3 id="更改数据"><a href="#更改数据" class="headerlink" title="更改数据"></a>更改数据</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sql = <span class="string">'UPDATE students SET age=%s WHERE name=%s'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql, (<span class="number">22</span>, <span class="string">'Bob'</span>))</span><br><span class="line">    db.commit()</span><br><span class="line">except Exception <span class="keyword">as</span> <span class="keyword">e</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">e</span>)</span><br><span class="line">    db.rollback()</span><br></pre></td></tr></table></figure><blockquote><h4 id="注意-下面这个很重要"><a href="#注意-下面这个很重要" class="headerlink" title="注意 下面这个很重要"></a><strong>注意</strong> 下面这个很重要</h4></blockquote><blockquote><p>更新数据的时候，我们关心会不会出现重复的问题。所以我们这里可以再实现一种去重的方法，如果数据存在，则更新数据；否则插入数据</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'2016210405068'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'辰东'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">33</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line"><span class="built_in">keys</span> = <span class="string">','</span>.<span class="keyword">join</span>(data.<span class="built_in">keys</span>())</span><br><span class="line"><span class="built_in">values</span> = <span class="string">','</span>.<span class="keyword">join</span>([<span class="string">'%s'</span>] * <span class="built_in">len</span>(data))</span><br><span class="line"></span><br><span class="line"># <span class="keyword">on</span> duplicate key <span class="keyword">update</span></span><br><span class="line"></span><br><span class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;) ON DUPLICATE KEY UPDATE'</span>.format(table=table, <span class="built_in">keys</span>=<span class="built_in">keys</span>,</span><br><span class="line">                                                                                     <span class="built_in">values</span>=<span class="built_in">values</span>)</span><br><span class="line"><span class="keyword">update</span> = <span class="string">','</span>.<span class="keyword">join</span>([<span class="string">' &#123;key&#125;=%s'</span>.format(key=key) <span class="keyword">for</span> key in data.<span class="built_in">keys</span>()])</span><br><span class="line">sql += <span class="keyword">update</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql, tuple(data.<span class="built_in">values</span>()) * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'Sucessfull insert...'</span>)</span><br><span class="line">    db.commit()</span><br><span class="line">except Exception <span class="keyword">as</span> <span class="keyword">e</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">e</span>)</span><br><span class="line">    db.rollback()</span><br></pre></td></tr></table></figure><blockquote><p>完整的SQL语句是<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students(<span class="keyword">id</span>, <span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (%s, %s, %s) <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> <span class="keyword">id</span> = %s, <span class="keyword">name</span> = %s, age = %s</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><blockquote><p>删除数据就相对简单了直接用<code>DELETE</code>，但是依然要用<code>commit()</code>函数才能生效</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">table</span> = <span class="string">'students'</span></span><br><span class="line">conditions = <span class="string">'age&gt;20'</span></span><br><span class="line">sql = <span class="string">'DELETE FROM &#123;table&#125; WHERE &#123;condition&#125;'</span>.<span class="built_in">format</span>(<span class="built_in">table</span>=<span class="built_in">table</span>, condition=conditions)</span><br><span class="line">try:</span><br><span class="line">    cursor.<span class="built_in">execute</span>(sql)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Delete sucessfull...'</span>)</span><br><span class="line">    db.commit()</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    db.rollback()</span><br></pre></td></tr></table></figure><h3 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h3><blockquote><p><strong>注意</strong><code>fetch</code>方法内部实现有一个偏移，开始的<code>fetchone()</code>就获取了一条数据，所以后面的<code>fetchall()</code>只获取了总数减一条，因此我推荐后面一种方法，用<code>while</code>方法加<code>fetchone()</code>,<code>fetchall()</code>会将结果以元组的形式全部返回，如果数据很大就占用的开销很大。</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql)</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'Counts: '</span>+<span class="built_in">cursor</span>.rowcount)</span><br><span class="line">    one = <span class="built_in">cursor</span>.fetchone()</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'One: '</span>+one)</span><br><span class="line">    results = <span class="built_in">cursor</span>.fetchall()</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'Results: '</span>+results)</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'The type of results: '</span>+<span class="built_in">type</span>(results))</span><br><span class="line">    <span class="keyword">for</span> row in result<span class="variable">s:</span></span><br><span class="line">        <span class="keyword">print</span>(row)</span><br><span class="line">except Exception <span class="keyword">as</span> <span class="keyword">e</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">e</span>)</span><br></pre></td></tr></table></figure><blockquote><p>第二种方法</p></blockquote><pre><code>try:    cursor.execute(sql)    print(&apos;Counts: &apos;+cursor.rowcount)    one = cursor.fetchone() #one是一个元组    while one:        print(&apos;Row: &apos;,one)        one = cursor.fetchone()except Exception as e:    print(e)</code></pre><p><br><br><br><br>以上就是Mysql的基本操作，So<br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySql数据库的基本操作&quot;&gt;&lt;a href=&quot;#MySql数据库的基本操作&quot; class=&quot;headerlink&quot; title=&quot;MySql数据库的基本操作&quot;&gt;&lt;/a&gt;MySql数据库的基本操作&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;MySql是关系型数据，关系型数据库是基于关系模型的数据库，而关系模型是通过二维表来保存的，所以它的存储方式就是行列组成的表，每一列是一个字段，每一行是一条记录。&lt;br&gt;&lt;br&gt;&lt;br&gt;在Python2中连接MySql的库大多是MySQLdb，但是这个库在Python3中不在支持，所以这里我推荐是PyMySQL。相信PyMySQL的安装大家都懂，只需要&lt;code&gt;pip install pymysql&lt;/code&gt;下载到本地，然后安装，这里就不详述了。=.=&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.lightfisher.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.lightfisher.cn/tags/Python/"/>
    
      <category term="MySql" scheme="http://www.lightfisher.cn/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB数据库基本操作</title>
    <link href="http://www.lightfisher.cn/2018/12/07/MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.lightfisher.cn/2018/12/07/MongoDB数据库基本操作/</id>
    <published>2018-12-07T09:11:04.000Z</published>
    <updated>2019-01-06T08:19:53.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB的操作"><a href="#MongoDB的操作" class="headerlink" title="MongoDB的操作"></a>MongoDB的操作</h1><h4 id="1-连接MongoDB"><a href="#1-连接MongoDB" class="headerlink" title="1.连接MongoDB"></a>1.连接MongoDB</h4><blockquote><p>Python 想要连接MongoDB需要安装pymongo，emm，安装方法可以在cmd下，pip安装(<code>pip install pymongo</code>)<br>安装完了后你就可以用一下代码连接MongoDB</p></blockquote><a id="more"></a><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line"><span class="keyword">client</span> = pymongo.MongoClient(host=<span class="string">'localhost'</span>,port=<span class="string">'27017'</span>) <span class="meta">#默认端口27017</span></span><br><span class="line">db = <span class="keyword">client</span>[<span class="string">'mydb'</span>] <span class="meta">#指定mydb这个数据库，如果没有会自动创建</span></span><br><span class="line">collection = db[<span class="string">'students'</span>]  <span class="meta">#指定students这个集合，如果没有会自动创建一个</span></span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxqlkdgrj30tr0drtcv.jpg" alt="img"></p><h4 id="2-MongoDB数据库，数据的插入"><a href="#2-MongoDB数据库，数据的插入" class="headerlink" title="2.MongoDB数据库，数据的插入"></a>2.MongoDB数据库，数据的插入</h4><blockquote><p>插入数据，注意是已字典的形式。比如插入以下数据</p></blockquote><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">student=&#123;</span><br><span class="line">  <span class="string">'id'</span>:<span class="number">20180101</span>,</span><br><span class="line">  <span class="string">'name'</span>:<span class="string">'Jack'</span>,</span><br><span class="line">  <span class="string">'age'</span>:<span class="number">18</span>,</span><br><span class="line">  <span class="string">'gender'</span>:<span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">用 collection.<span class="keyword">insert</span>(student)</span><br></pre></td></tr></table></figure><p>如下图<br><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxqlo9zej314809tq5e.jpg" alt="img"></p><blockquote><p>最新官方推荐<code>insert_one()</code>插入一条数据，返回的不同，是InsertOneResult对象<br>在MongoDB中都有一个_id属性来唯一标识，如果没有就会自动产生一个ObjectId类型的_id属性，返回_id值<br>当然也可以一次性插入多条数据  最新官方推荐 <code>insert_many()</code>来插入多条数据,或者依旧用<code>insert</code>,<code>collection.insert([student1,student2])</code>,注意是列表形式。</p></blockquote><h4 id="3-MongoDB数据库的查询"><a href="#3-MongoDB数据库的查询" class="headerlink" title="3.MongoDB数据库的查询"></a>3.MongoDB数据库的查询</h4><blockquote><p>我们可以用<code>find_one()</code>或者<code>find()</code>方法来进行查询，find()返回一个生成器对象<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">result</span> = collection.find_one(&#123;<span class="string">'name'</span>:<span class="string">'Mike'</span>&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>返回的是<code>字典类型</code>  查询不存在时，则会返回<code>none</code> 记住哦： 是字典类型<br>比如你想查询age等于20的若干数据，你会用什么呢<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">results = collection.<span class="built_in">find</span>(&#123;<span class="string">'age'</span>:<span class="number">20</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">  <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查询大于20呢<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">results = collection.<span class="built_in">find</span>(&#123;<span class="string">'age'</span>:&#123;<span class="string">'$gt'</span>: <span class="number">20</span>&#125;&#125;)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">  <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这里查询的条件键值已经不是单纯的数字，而是一个字典，比较符号<code>$gt</code> 大于<br>下面是这些比较符号的总结</p></blockquote><table><thead><tr><th>符号</th><th>含 义</th><th>实 例</th></tr></thead><tbody><tr><td>$gt</td><td>大于</td><td>{‘age’:{‘$gt’:20}}</td></tr><tr><td>$lt</td><td>小于</td><td>{‘age’:{‘$lt’:20}}</td></tr><tr><td>$gte</td><td>&gt;=</td><td>{‘age’:{‘$gte’:20}}</td></tr><tr><td>$lte</td><td>&lt;=</td><td>{‘age’:{‘$lte’:20}}</td></tr><tr><td>$ne</td><td>!=</td><td>{‘age’:{‘$ne’:20}}</td></tr><tr><td>$in</td><td>在范围内</td><td>{‘age’:{‘$in’:[20,23]}}</td></tr><tr><td>$nin</td><td>不在范围内</td><td>{‘age’:{‘$nin’:[20,23]}}</td></tr></tbody></table><blockquote><p>还支持正则表达式，如查询以’M’开头名字的数据</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">results</span> = collection.find(&#123;<span class="string">'name'</span>:&#123;<span class="string">'$regex'</span>:<span class="string">'^M.*'</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>还有简单的功能符号</p></blockquote><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$exists   属性是否存在    &#123;<span class="string">'name'</span>:&#123;<span class="string">'$exists'</span>:True&#125;&#125;   name属性存在</span><br><span class="line">$where    高级条件查询    &#123;<span class="string">'$where'</span>:<span class="string">'obj.fans_counts == obj.follows_counts'</span>&#125;   自身粉丝数等于关注数</span><br></pre></td></tr></table></figure><h4 id="4-计数"><a href="#4-计数" class="headerlink" title="4.计数"></a>4.计数</h4><ul><li><p>要统计查询结果有多少条数据，可以用<code>count()</code>方法，比如统计有多少数据</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">count</span> = collection.<span class="keyword">find</span>().<span class="keyword">count</span>()</span><br></pre></td></tr></table></figure></li><li><p>或者统计符合某种条件的数据数,例如统计名字以a开头的</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">count</span> = collection.<span class="keyword">find</span>(&#123;<span class="string">'name'</span>:&#123;<span class="string">'$regex'</span>:<span class="string">'^a.*'</span>&#125;&#125;).<span class="keyword">count</span>()</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-排序"><a href="#5-排序" class="headerlink" title="5.排序"></a>5.排序</h4><blockquote><p>排序，直接调用<code>sort()</code>方法，并在其中传入排序的字段以及升降标志<br><code>pymongo.ASCENDING</code> 升序  <code>pymongo.DESCENDING</code>  降序<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">results  = collection.find().<span class="built_in">sort</span>(<span class="string">'name'</span>,pymongo.ASCENDING)</span><br><span class="line">print(<span class="built_in">result</span>[<span class="string">'name'</span>] <span class="keyword">for</span> <span class="built_in">result</span> <span class="keyword">in</span> results)</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="6-偏移"><a href="#6-偏移" class="headerlink" title="6.偏移"></a>6.偏移</h4><blockquote><p>在某些情况，我们只需要提取其中的几个元素，我就可以调用<code>skip()</code>方法，示例如下:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">results = collection.<span class="keyword">find</span>().<span class="keyword">sort</span>(<span class="string">'name'</span>,pymongo.DESCENDING).skip(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这样我们就可以跳过前两个<br>另外，我们还可以用<code>limit()</code>方法来指定要去的个数,只取两个数据<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">results = collection.<span class="keyword">find</span>(&#123;<span class="string">'age'</span>:&#123;<span class="string">'$gt'</span>:<span class="number">20</span>&#125;&#125;).<span class="keyword">sort</span>(<span class="string">'name'</span>,pymongo.ASCENDING).skip(<span class="number">2</span>).limit(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="7-数据的更新"><a href="#7-数据的更新" class="headerlink" title="7.数据的更新"></a>7.数据的更新</h4><blockquote><p>对于数据的更新，我们可以用<code>upodate()</code>方法<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">condition=&#123;'name':'Mike'&#125;</span><br><span class="line">student = collection.find_one(condition)</span><br><span class="line">student['age'] = 25</span><br><span class="line">result = collection.update(condition,student) <span class="comment">#update()方法是将原条件和修改后的数据传入</span></span><br><span class="line">print(result)  <span class="comment">#返回的是字典类型</span></span><br></pre></td></tr></table></figure></p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxqlv74vj30v309r765.jpg" alt="img"></p><blockquote><p>官方推荐 <code>update_one()</code>但是如果使用<code>update_one()</code>方法，第二个参数就不能传入字典，应该用<code>$</code>类型操作符作为字典的键名,示例如下：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">result</span> = collection.update_one(condition,&#123;<span class="string">'$set'</span>:student&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxta6g26j30v809nmyz.jpg" alt="img"></p><h4 id="8-数据的删除"><a href="#8-数据的删除" class="headerlink" title="8.数据的删除"></a>8.数据的删除</h4><blockquote><p>删除的话，可以直接用<code>remove()</code>方法，符合条件的数据全部删除<br>这里依然推荐两个官方推荐方法  <code>delete_one()</code>和 <code>elete_many()</code><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">results = collection.delete_many(&#123;<span class="string">'age'</span>:&#123;<span class="string">'$gt'</span>:<span class="number">20</span>&#125;&#125;)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(results)</span></span>  #返回的字典形式</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(results.deleted_count)</span></span>  #删除的个数</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxta9ry4j30o006j0te.jpg" alt="img"><br>此时也只有一条数据</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MongoDB的操作&quot;&gt;&lt;a href=&quot;#MongoDB的操作&quot; class=&quot;headerlink&quot; title=&quot;MongoDB的操作&quot;&gt;&lt;/a&gt;MongoDB的操作&lt;/h1&gt;&lt;h4 id=&quot;1-连接MongoDB&quot;&gt;&lt;a href=&quot;#1-连接MongoDB&quot; class=&quot;headerlink&quot; title=&quot;1.连接MongoDB&quot;&gt;&lt;/a&gt;1.连接MongoDB&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Python 想要连接MongoDB需要安装pymongo，emm，安装方法可以在cmd下，pip安装(&lt;code&gt;pip install pymongo&lt;/code&gt;)&lt;br&gt;安装完了后你就可以用一下代码连接MongoDB&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.lightfisher.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.lightfisher.cn/tags/Python/"/>
    
      <category term="MongoDB" scheme="http://www.lightfisher.cn/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB数据库</title>
    <link href="http://www.lightfisher.cn/2018/12/06/ongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://www.lightfisher.cn/2018/12/06/ongoDB数据库/</id>
    <published>2018-12-06T12:58:18.000Z</published>
    <updated>2019-01-06T08:18:10.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="非关系型数据库MongoDB的安装"><a href="#非关系型数据库MongoDB的安装" class="headerlink" title="非关系型数据库MongoDB的安装"></a>非关系型数据库MongoDB的安装</h1><blockquote><p>MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。</p></blockquote><a id="more"></a><h3 id="1-数据库的下载和安装"><a href="#1-数据库的下载和安装" class="headerlink" title="1.数据库的下载和安装"></a>1.数据库的下载和安装</h3><blockquote><p>直接去<a href="https://www.mongodb.com/" target="_blank" rel="noopener">mongodb官网</a>进行下载</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxqked0pj31gb0qiag0.jpg" alt="img"></p><blockquote><p>下载完成以后，双击它开始安装，指定安装路径，例如我指定的安装路径是E:\mongodb,如图</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxqkl443j30xb0inju5.jpg" alt="img"></p><blockquote><p>安装完成之后，进入MongoDB的安装目录，在bin同目录下新建文件夹data，如上图<br>然后进入data文件夹，新建文件夹db来存储数据目录如图</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxqko0h0j30xa0ixtb5.jpg" alt="img"></p><blockquote><p>然后进入到之前bin目录下(是bin目录下哦，不是同bin目录)，打开shift+右键打开命令行，如图(emm，我用的是cmder，蛮好的，有空出个博客):</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxqkt5xfj30xs0iy418.jpg" alt="img"></p><blockquote><p>输入以下代码：</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath E:<span class="regexp">//m</span>ongodb<span class="regexp">/data/</span>db  <span class="comment">#后面这个目录就是你前面创建的data/db目录</span></span><br></pre></td></tr></table></figure><blockquote><p>运行之后，会出现一些输出信息，看到下图就是你启动了mongodb服务</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxqkwoifj30rh0gtqbg.jpg" alt="mongodb"></p><blockquote><p>然后点击bin目录下的<code>mongo.exe</code>，就进入了mongodb界面，输入show dbs；看看里面的数据库，基本就成功了</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006bO2RVly1fywxql48vsj30xf0imwjo.jpg" alt="img"></p><p><img src="/img/mongodb/7.jpg" alt="img"></p><h3 id="2-可视化工具Robo-3T的下载和安装"><a href="#2-可视化工具Robo-3T的下载和安装" class="headerlink" title="2.可视化工具Robo 3T的下载和安装"></a>2.可视化工具Robo 3T的下载和安装</h3><blockquote><p>Robo 3T是针对MongoDB的的可视化工具，由于篇幅问题，可以看这篇<a href="https://blog.csdn.net/qq_36070288/article/details/73822101" target="_blank" rel="noopener">博客</a></p></blockquote><p><br><br><br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;非关系型数据库MongoDB的安装&quot;&gt;&lt;a href=&quot;#非关系型数据库MongoDB的安装&quot; class=&quot;headerlink&quot; title=&quot;非关系型数据库MongoDB的安装&quot;&gt;&lt;/a&gt;非关系型数据库MongoDB的安装&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.lightfisher.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.lightfisher.cn/tags/Python/"/>
    
      <category term="MongoDB" scheme="http://www.lightfisher.cn/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Python入门问题二</title>
    <link href="http://www.lightfisher.cn/2018/12/06/Python%E5%85%A5%E9%97%A8%E9%97%AE%E9%A2%98%E4%BA%8C/"/>
    <id>http://www.lightfisher.cn/2018/12/06/Python入门问题二/</id>
    <published>2018-12-05T16:25:48.000Z</published>
    <updated>2018-12-06T12:51:35.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python入门问题二"><a href="#Python入门问题二" class="headerlink" title="Python入门问题二"></a>Python入门问题二</h1><h3 id="1-简述Django的ORM"><a href="#1-简述Django的ORM" class="headerlink" title="1.简述Django的ORM"></a>1.简述Django的ORM</h3><blockquote><p>ORM，全拼Object-Relation Mapping，意为对象-关系映射实现了数据模型与数据库的解耦，通过简单的配置就可以轻松跟换数据库，而不需要修改代码只需要面向对象编程，ORM操作本质上会根据对接的数据库引擎，翻译成相对应的sql语句，所有使用Django开发的项目无需关系程序底层使用的是MySql、Oracle、sqlite…，如果数据库迁移，只需要更换Django的数据库引擎就好了</p></blockquote><a id="more"></a><h3 id="2-一行代码展开二维列表"><a href="#2-一行代码展开二维列表" class="headerlink" title="2.一行代码展开二维列表"></a>2.一行代码展开二维列表</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"><span class="selector-tag">a</span> = [[np<span class="selector-class">.random</span><span class="selector-class">.randint</span>(<span class="number">1</span>,<span class="number">10</span>),np<span class="selector-class">.random</span><span class="selector-class">.randint</span>(<span class="number">1</span>,<span class="number">10</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(a)</span></span></span><br><span class="line">x = [j <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="selector-tag">a</span> <span class="keyword">for</span> j <span class="keyword">in</span> i]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(x)</span></span></span><br></pre></td></tr></table></figure><p><img src="https://lightfisher.github.io/img/Python_question/26.jpg" alt="img"></p><ul><li>将列表装换成numpy矩阵，通过numpy的flatten()方法<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as <span class="built_in">np</span></span><br><span class="line">a = [[<span class="built_in">np</span>.<span class="built_in">random</span>.randint(<span class="number">1</span>,<span class="number">10</span>),<span class="built_in">np</span>.<span class="built_in">random</span>.randint(<span class="number">1</span>,<span class="number">10</span>)] <span class="keyword">for</span> <span class="symbol">_</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">np</span>.<span class="built_in">array</span>(a).<span class="built_in">flatten</span>().tolist())</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://lightfisher.github.io/img/Python_question/27.jpg" alt="img"></p><h3 id="3-举例说明异常模块中try，except，else，finally的相关意义"><a href="#3-举例说明异常模块中try，except，else，finally的相关意义" class="headerlink" title="3.举例说明异常模块中try，except，else，finally的相关意义"></a>3.举例说明异常模块中try，except，else，finally的相关意义</h3><ul><li>try…except…else 没有获取异常，执行else语句</li><li>try…except…finally 不管有没有获取异常都会执行finally语句</li></ul><h3 id="4-举例说明zip函数的用法"><a href="#4-举例说明zip函数的用法" class="headerlink" title="4.举例说明zip函数的用法"></a>4.举例说明zip函数的用法</h3><ul><li>zip()函数在运算的时候，会以一个或多个序列(可迭代对象)作为参数，返回一个元组的列表。同时将这些序列中并排的元素配对</li><li>zip()参数可以接受任何类型的序列，同时还可以有两个以上的参数；当传入参数不等时，zip能够自动以最短序列长度为准进行截取，并获得元组</li></ul><p><img src="https://lightfisher.github.io/img/Python_question/28.jpg" alt="zip"></p><h3 id="5-列出常见的状态吗和意义"><a href="#5-列出常见的状态吗和意义" class="headerlink" title="5.列出常见的状态吗和意义"></a>5.列出常见的状态吗和意义</h3><ul><li><code>200</code> <code>OK</code> 请求正常处理完毕</li><li><code>204</code> <code>No Content</code> 请求成功处理，没有实体的主体返回</li><li><code>206</code> <code>Partial Content</code> GET范围请求已成功处理</li><li><code>301</code> <code>Moved Permanently</code> 永久重定向，资源已永久分配新URL</li><li><code>302</code> <code>Found</code> 临时重定向，资源已临时分配新URL</li><li><code>303</code> <code>See Other</code> 临时重定向，期望使用GET定向获取</li><li><code>304</code> <code>Not Modified</code> 发送的附带条件不足请求为满足</li><li><code>307</code> <code>Temporary Redirect</code> 临时重定向，POST不会变成GET</li><li><code>400</code> <code>Bad Request</code> 请求报文错误或参数不足</li><li><code>401</code> <code>Unauthorized</code> 需要通过HTTP认证，或认证失败</li><li><code>403</code> <code>Forbidden</code> 请求资源被拒绝</li><li><code>404</code> <code>Not Found</code> 无法找到请求资源(服务器无法拒绝)</li><li><code>500</code> <code>Internal Server Error</code> 服务器故障或Web应用故障</li><li><code>503</code> <code>Service Unavailable</code> 服务器超负载或停机维修</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python入门问题二&quot;&gt;&lt;a href=&quot;#Python入门问题二&quot; class=&quot;headerlink&quot; title=&quot;Python入门问题二&quot;&gt;&lt;/a&gt;Python入门问题二&lt;/h1&gt;&lt;h3 id=&quot;1-简述Django的ORM&quot;&gt;&lt;a href=&quot;#1-简述Django的ORM&quot; class=&quot;headerlink&quot; title=&quot;1.简述Django的ORM&quot;&gt;&lt;/a&gt;1.简述Django的ORM&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;ORM，全拼Object-Relation Mapping，意为对象-关系映射实现了数据模型与数据库的解耦，通过简单的配置就可以轻松跟换数据库，而不需要修改代码只需要面向对象编程，ORM操作本质上会根据对接的数据库引擎，翻译成相对应的sql语句，所有使用Django开发的项目无需关系程序底层使用的是MySql、Oracle、sqlite…，如果数据库迁移，只需要更换Django的数据库引擎就好了&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.lightfisher.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.lightfisher.cn/tags/Python/"/>
    
      <category term="Python基础" scheme="http://www.lightfisher.cn/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+github搭建个人博客二</title>
    <link href="http://www.lightfisher.cn/2018/12/05/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BA%8C/"/>
    <id>http://www.lightfisher.cn/2018/12/05/Hexo-github搭建个人博客二/</id>
    <published>2018-12-05T15:22:18.000Z</published>
    <updated>2018-12-12T08:08:43.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-github搭建个人博客"><a href="#Hexo-github搭建个人博客" class="headerlink" title="Hexo+github搭建个人博客"></a>Hexo+github搭建个人博客</h1><h4 id="头像的设置和-yilia-主题的安装和简单配置"><a href="#头像的设置和-yilia-主题的安装和简单配置" class="headerlink" title="头像的设置和 yilia 主题的安装和简单配置"></a>头像的设置和 <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a> 主题的安装和简单配置</h4><a id="more"></a><ul><li>今天就来写写如何让你的博客更像一个博客</li></ul><h5 id="1-安装主题"><a href="#1-安装主题" class="headerlink" title="1.安装主题"></a>1.安装主题</h5><p>第一步当然是安装主题啦，相信在官方文档中也有详细的记录，我就简单总结下：</p><blockquote><p>在你的博客下输入以下代码进行安装</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><blockquote><p>然后修改站点文件下的<code>_config.yml</code>文件(用文本程序打开就行了，notepad++、sublime等)，对其中的<code>theme:</code>属性修改成我们的<code>yilia</code>,如下图：</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/1.jpg" alt="theme"></p><p>上图的Hexo就是我创建的博客目录，介个<code>_config.yml</code>就是这个博客的配置文件，emmmm，才想起来我应该先讲这个配置文件的，该你的博客名等等就在这里，我马上讲。然后你现在<code>hexo g</code>一下，再启动你的hexo服务看看<code>hexo s</code>。</p><blockquote><p><strong>注意:</strong>对了，你第一次运行的时候应该会出现一个错误，就是那个显示全部文章的目录会显示不出来，但它会显示解决方案，我就不献丑了，成功截图如下：</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/2.jpg" alt="yilia"></p><p><img src="http://lightfisher.github.io/img/hexo2/17.jpg" alt="img"></p><p>相信你已经完成了我们的主题成就，如果没有，出门后拐。<br>成功截图如下，emmm，如果你发现，你怎么没有头像，没有那个好看的动漫等等，emm，莫慌，这是我添加了其他的第三方脚本才这样，后面会讲。</p><h5 id="2-站点配置文件的最最最基本讲解"><a href="#2-站点配置文件的最最最基本讲解" class="headerlink" title="2.站点配置文件的最最最基本讲解"></a>2.站点配置文件的最最最基本讲解</h5><ul><li>网站</li></ul><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>title</td><td>网站的标题</td></tr><tr><td>subtitle</td><td>网站的副标题</td></tr><tr><td>description</td><td>网站的描述</td></tr><tr><td>author</td><td>你的名字</td></tr><tr><td>language</td><td>网站使用的语言(中文：zh-CN)</td></tr><tr><td>timezone</td><td>时区，默认电脑时区</td></tr><tr><td>theme</td><td>主题</td></tr></tbody></table><blockquote><p>emmm，你先就改改这几个就可以了，那有些我下次有机会在分享，或者你现在一定要专研，你可以看看这个 <a href="https://blog.csdn.net/gyq1998/article/details/78294689" target="_blank" rel="noopener">博客</a>，修改大致如下：</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/3.jpg" alt="setting"></p><p>现在你应该看上去又舒服了点，有了自己的网站名，和简单的自我描述，但是我没有头像很难受，下面我就讲一哈头像的设置</p><h5 id="3-头像的设置和网站图标设置"><a href="#3-头像的设置和网站图标设置" class="headerlink" title="3.头像的设置和网站图标设置"></a>3.头像的设置和网站图标设置</h5><blockquote><p>可能是我愚钝，我使用的方法是直接在源文件中修改，暴力解决，找到themes-&gt;yilia-&gt;layout-&gt;_partial文件夹下，修改left-col.ejs文件</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/4.jpg" alt="layout"></p><blockquote><p>然后修改，其中的属性。头像地址有了，当然是去目标文件夹下放图片啦，放在public-&gt;img文件夹下，修改头像路径(是你的头像名称啊~~)，截图如下：</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/6.jpg" alt="img"></p><p><img src="http://lightfisher.github.io/img/hexo2/5.jpg" alt="avatar"></p><blockquote><p>再然后就是网站图标的设置了，如果你没有ico图标文件，你可以去<a href="http://www.bitbug.net/" target="_blank" rel="noopener">比特虫</a>做个你喜欢的图标，然后放在Hexo\public\img文件夹下，和上面一样。至于，这个网站图标的设置当然还是暴力解决啦，找到themes\yilia\layout_partial\head.ejs，修改如下代码(你的图标名字啊~~)：</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/8.jpg" alt="img"></p><p><img src="http://lightfisher.github.io/img/hexo2/7.jpg" alt="img"></p><blockquote><p>你先<code>hexo g</code>然后启动hexo服务<code>hexo s</code>看看效果(如果端口冲突,用<code>hexo s -p +你的端口号</code>),我成功截图如下</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com/hexo122.jpg" alt="img"></p><p>移动端也可以</p><p><img src="http://lightfisher.github.io/img/hexo2/9.jpg" alt="img"></p><h5 id="4-主题的配置"><a href="#4-主题的配置" class="headerlink" title="4.主题的配置"></a>4.主题的配置</h5><blockquote><p>这个是我最想吐槽的，我上网查询的时候都是说<code>_config.yml</code>文件，虽说没有错，但是，没说哪个，要知道，一个是站点的，也就是你创建那个博客文件目录下。但其实，是要修改themes\yilia文件夹下的<code>_config.yml</code>文件，=。=我还是无聊看主题的布局文件的时候看到的=。=</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/10.jpg" alt="img"></p><blockquote><p>然后就是对其中文件的修改和理解，这里我就不阐述了，因为里面都有中文的解释，但是我还是无聊说一下吧，看见这个subnav了不，这就是为什么你点击那些什么github，简书图标没用的原因，你可以改成你想要的网址,不想要的可以注释掉，想要的当然可以取消注释=。=</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/11.jpg" alt="img"></p><blockquote><p>想加友链，你就修改如下图,名字也可以改，你也可以加加我的博客链接看看，应该可以=.=</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/12.jpg" alt="img"></p><blockquote><p>想改自己的更多描述，你可以修改aboutme</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/13.jpg" alt="img"></p><blockquote><p>这个就有点难了，就是添加 标签和分类，实现我是实现了，但是菜单那个就没有实现，看看下次我能不能更新吧，如果你想现在就简单实现，你可以看看这个<a href="https://blog.csdn.net/ganzhilin520/article/details/79047249" target="_blank" rel="noopener">博客</a>,我的问题是单击左边菜单中的分类，里面不显示，而我单机那个分类小图片反而是大致显示的(标签类似)</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/14.jpg" alt="img"><br><br><br><img src="http://lightfisher.github.io/img/hexo2/15.jpg" alt="img"><br>单击这个<br><br><br><img src="http://lightfisher.github.io/img/hexo2/16.jpg" alt="img"><br><br><br><br><br>下次讲如何写属于自己的博客=.=<br><br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-github搭建个人博客&quot;&gt;&lt;a href=&quot;#Hexo-github搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo+github搭建个人博客&quot;&gt;&lt;/a&gt;Hexo+github搭建个人博客&lt;/h1&gt;&lt;h4 id=&quot;头像的设置和-yilia-主题的安装和简单配置&quot;&gt;&lt;a href=&quot;#头像的设置和-yilia-主题的安装和简单配置&quot; class=&quot;headerlink&quot; title=&quot;头像的设置和 yilia 主题的安装和简单配置&quot;&gt;&lt;/a&gt;头像的设置和 &lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;yilia&lt;/a&gt; 主题的安装和简单配置&lt;/h4&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.lightfisher.cn/categories/Hexo/"/>
    
    
      <category term="hexo搭建" scheme="http://www.lightfisher.cn/tags/hexo%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+github搭建个人博客一</title>
    <link href="http://www.lightfisher.cn/2018/12/05/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%80/"/>
    <id>http://www.lightfisher.cn/2018/12/05/Hexo-github搭建个人博客一/</id>
    <published>2018-12-05T13:33:52.000Z</published>
    <updated>2018-12-24T13:56:35.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-github搭建个人博客"><a href="#Hexo-github搭建个人博客" class="headerlink" title="Hexo+github搭建个人博客"></a>Hexo+github搭建个人博客</h1><blockquote><p>一直想搭建个人博客来着，本来想用Python，Django在自己的服务器上自己搭建，忽然想起来，以前好像见过同学用过Hexo框架搭建个人博客，所以我就先用Hexo搭建看看。因为网上的教程或多或少有时候都有点参差不齐，自己也是看得脑壳疼，所以下面我简单把我这两天搭建出现的问题和方法，写成博客，就当自己练手吧。</p></blockquote><a id="more"></a><h5 id="1-环境的搭建-node-js-git的安装"><a href="#1-环境的搭建-node-js-git的安装" class="headerlink" title="1.环境的搭建 node.js  git的安装"></a>1.环境的搭建 node.js  git的安装</h5><p>这些依赖环境的安装，相信网上别的CSDN博客都有，也肯定写得比我好，我就不献丑了-.-,下面是我觉得写的蛮好的<br><br><br>NodeJS的安装<a href="https://blog.csdn.net/muzidigbig/article/details/80493880" target="_blank" rel="noopener">教程</a><br><br><br>Git 的安装<a href="https://blog.csdn.net/it_hfzj/article/details/80693965" target="_blank" rel="noopener">教程</a><br><br><br><img src="/img/hexo1/1.jpg" alt="nodejs"></p><p><img src="https://lightfisher.github.io/img/hexo1/2.jpg" alt="git"><br><br>以上是nodejs和git的安装成功截图</p><h5 id="2-github的注册"><a href="#2-github的注册" class="headerlink" title="2.github的注册"></a>2.github的注册</h5><pre><code>emmm，相信这些那么应该都有了吧，我就不进行这些无聊的操作了，我就讲一下注册完后的操作吧。注册完后，你得创建一个存储库，名字就是你 username.github.io (username是你注册的名字)</code></pre><p><img src="https://lightfisher.github.io/img/hexo1/3.jpg" alt="emm"></p><p>如上</p><h5 id="3-Hexo的安装"><a href="#3-Hexo的安装" class="headerlink" title="3.Hexo的安装"></a>3.Hexo的安装</h5><ul><li>1.首先你要先进入git bash界面(应该桌面右键就有了，如果没有，你进入到开始菜单那里找到git，下面就有了)进入后的界面如下</li></ul><p><img src="https://lightfisher.github.io/img/hexo1/4.jpg" alt="git bash"></p><ul><li>然后全局配置设置到淘宝源<br></li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> registry <span class="comment">https:</span>//<span class="comment">registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><p><img src="https://lightfisher.github.io/img/hexo1/5.jpg" alt="registry"></p><ul><li>全局设置 user.email 和user.name<br></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"your_emaill"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"your_name"</span></span><br></pre></td></tr></table></figure><p>这里的<code>your_email</code>和<code>your_name</code>就是你注册github的邮箱和用户名，截图如下：<br></p><p><img src="https://lightfisher.github.io/img/hexo1/6.jpg" alt="git config"></p><ul><li>生成ssh密钥</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.ssh</span> </span><br><span class="line">ssh-keygen -t rsa -C “your_email” <span class="comment">#打自己的邮箱</span></span><br></pre></td></tr></table></figure><p><img src="https://lightfisher.github.io/img/hexo1/7.jpg" alt="ssh-key"></p><ul><li>设置ssh key到GitHub 默认生成ssh key在C:\Users\username.ssh文件夹中，复制 id_rsa.pub文件到 github-&gt;settings-&gt;SSH and GPG key-&gt;new ssh key 如图 </li></ul><p><img src="https://lightfisher.github.io/img/hexo1/8.jpg" alt="img"></p><p><img src="https://lightfisher.github.io/img/hexo1/9.jpg" alt="setting"></p><p><img src="https://lightfisher.github.io/img/hexo1/10.jpg" alt="img"></p><p><img src="https://lightfisher.github.io/img/hexo1/11.jpg" alt="img"></p><p><img src="https://lightfisher.github.io/img/hexo1/12.jpg" alt="img"></p><ul><li>检查ssh设置是否成功<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://lightfisher.github.io/img/hexo1/13.jpg" alt="check ssh"></p><h5 id="4-安装hexo插件"><a href="#4-安装hexo插件" class="headerlink" title="4.安装hexo插件"></a>4.安装hexo插件</h5><ul><li>输入以下代码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> / <span class="comment">#进入根目录，实际上就是git安装的根目录</span></span><br><span class="line"><span class="built_in">pwd</span> /</span><br><span class="line">npm install hexo-cli -g <span class="comment">#安装hexo</span></span><br></pre></td></tr></table></figure><p><img src="https://lightfisher.github.io/img/hexo1/14.jpg" alt="install hexo"></p><ul><li>安装以后呢，你可以输入以下代码</li></ul><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /  </span><br><span class="line">hexo init Hexo #我创建了一个他的项目框架</span><br><span class="line">cd Hexo #进入你创建的那个目录</span><br><span class="line">hexo generate <span class="function"><span class="keyword">#</span><span class="params">(可简写成 <span class="variable">hexo</span> <span class="variable">g</span>)</span></span></span><br><span class="line">hexo server <span class="function"><span class="keyword">#</span><span class="params">(可简写成 <span class="variable">hexo</span> <span class="variable">s</span>)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>这个就是在你Git安装目录下进行初始化一个hexo博客项目，你可以直接到自己想要创建的地方进行<code>hexo init +&lt;你的项目名称&gt;</code> </p></blockquote><p>由于我懒得重新创了，我就用网上别人的截图，下面我会注明</p><p><img src="https://lightfisher.github.io/img/hexo1/15.jpg" alt="img"></p><p><img src="https://lightfisher.github.io/img/hexo1/16.jpg" alt="img"></p><p><img src="https://lightfisher.github.io/img/hexo1/17.jpg" alt="img"></p><p>emmm，上面我之所以我输入hexo s -p 4005，相信聪明的人已经看出来了，因为默认4000被占用了，所以输入-p+端口号，后面这个-d相当于debug模式，基本不用管</p><ul><li>到现在为止你已经完成了hexo的基本配置，你可以输入下面那个本地网址进行查看 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>,相信你一定是下面这张图，如果不是打电话联系，咳，开玩笑，如果真的出错，emmmm，下次我开个评论 TAT</li></ul><p><img src="https://lightfisher.github.io/img/hexo1/18.jpg" alt="img"></p><h5 id="5-上传到自己的github"><a href="#5-上传到自己的github" class="headerlink" title="5.上传到自己的github"></a>5.上传到自己的github</h5><ul><li>首先安装部署到github插件依赖</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> –<span class="keyword">save</span> hexo-deployer-git</span><br></pre></td></tr></table></figure><p><img src="https://lightfisher.github.io/img/hexo1/20.jpg" alt="img"></p><ul><li>打开你创建的项目下的配置文件(如果你跟着我做的话，应该是Hexo)</li></ul><p><img src="https://lightfisher.github.io/img/hexo1/21.jpg" alt="img"></p><ul><li>然后修改其中的配置</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> git@github.com:lightfisher/lightfisher.github.io.git  <span class="meta">#改成自己的用户名和用户名加域名</span></span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure><ul><li>然后在部署到你的github<br></li></ul><p><code>hexo deploy</code>可以简写成<code>hexo d</code>,代码我就不贴了</p><ul><li>这是最关键的，你可以登上自己的网址<code>your_name.github.io</code>,your_name是你的github用户名。你可能要等个十几分钟，才可以看见,下面是我自己的博客</li></ul><p><img src="https://lightfisher.github.io/img/hexo1/22.jpg" alt="finish"></p><p><br><br><br><br>以上就是hexo+github的基本搭建，有空我会写，其他的配置，如,主题的配置，头像的设置，标签和分类的设置引用，第三发插件的设置等。<br><br>So，Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-github搭建个人博客&quot;&gt;&lt;a href=&quot;#Hexo-github搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo+github搭建个人博客&quot;&gt;&lt;/a&gt;Hexo+github搭建个人博客&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一直想搭建个人博客来着，本来想用Python，Django在自己的服务器上自己搭建，忽然想起来，以前好像见过同学用过Hexo框架搭建个人博客，所以我就先用Hexo搭建看看。因为网上的教程或多或少有时候都有点参差不齐，自己也是看得脑壳疼，所以下面我简单把我这两天搭建出现的问题和方法，写成博客，就当自己练手吧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.lightfisher.cn/categories/Hexo/"/>
    
    
      <category term="hexo搭建" scheme="http://www.lightfisher.cn/tags/hexo%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Python入门问题</title>
    <link href="http://www.lightfisher.cn/2018/12/04/Python%E5%85%A5%E9%97%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://www.lightfisher.cn/2018/12/04/Python入门问题/</id>
    <published>2018-12-04T14:35:40.000Z</published>
    <updated>2018-12-06T12:48:15.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础要点一"><a href="#Python基础要点一" class="headerlink" title="Python基础要点一"></a>Python基础要点一</h1><h3 id="1-一行代码实现1–100之和"><a href="#1-一行代码实现1–100之和" class="headerlink" title="1.一行代码实现1–100之和"></a>1.一行代码实现1–100之和</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="name">range</span>(<span class="number">101</span>))</span><br></pre></td></tr></table></figure><p><img src="https://lightfisher.github.io/img/Python_question/1.jpg" alt="img"></p><a id="more"></a><h3 id="2-如何在一个函数内部修改全局变量"><a href="#2-如何在一个函数内部修改全局变量" class="headerlink" title="2.如何在一个函数内部修改全局变量"></a>2.如何在一个函数内部修改全局变量</h3><p>利用<code>global</code>修改全局变量<br></p><p><img src="https://lightfisher.github.io/img/Python_question/2.jpg" alt="global"></p><h3 id="3-列出5个Python的标准库"><a href="#3-列出5个Python的标准库" class="headerlink" title="3.列出5个Python的标准库"></a>3.列出5个Python的标准库</h3><ul><li><code>os</code>: 提供了不少于操作系统相关联的函数</li><li><code>sys</code>: 通常用于命令行参数</li><li><code>re</code>: 正则匹配</li><li><code>math</code>: 数学运算</li><li><code>datetime</code>: 处理日期时间</li></ul><h3 id="4-字典如何删除键和合并两个字典"><a href="#4-字典如何删除键和合并两个字典" class="headerlink" title="4.字典如何删除键和合并两个字典"></a>4.字典如何删除键和合并两个字典</h3><pre><code>删除用 del,合并用 update</code></pre><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'name'</span>:<span class="string">'qg'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;</span><br><span class="line">del dic[<span class="string">'name'</span>]</span><br><span class="line">dic2 = &#123;<span class="string">'name'</span>:<span class="string">'fh'</span>&#125;</span><br><span class="line">dic.<span class="keyword">update</span>(dic2)</span><br></pre></td></tr></table></figure><p><br><br><img src="https://lightfisher.github.io/img/Python_question/3.jpg" alt="del update"><br><br></p><h3 id="5-谈下python的GIL"><a href="#5-谈下python的GIL" class="headerlink" title="5.谈下python的GIL"></a>5.谈下python的GIL</h3><ul><li>GIL是Python的全局解释器锁，同一个进程加入由多个线程运行，一个线程在运行python程序的时候会霸占python解释器(加了一个锁即GIL)<br>，使进程内的其他线程无法运行，等该线程运行完后其他线程才能运行。如果线程运行过程中遇到耗时操作，则解释器锁解开，使其他线程<br>运行。所以在多线程中，线程的运行仍是有先后顺序，并不是同时运行。</li><li>多进程中因为每个进程都能被喜用分批资源，相当于每个进程有了个python解释器，多以多进程可以实现多个进程的同时运行，缺点是金城系统资源开销大</li></ul><h3 id="6-python实现列表去重的方法"><a href="#6-python实现列表去重的方法" class="headerlink" title="6.python实现列表去重的方法"></a>6.python实现列表去重的方法</h3><blockquote><p>熟悉使用<code>set</code></p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list=[np<span class="selector-class">.random</span><span class="selector-class">.randint</span>(<span class="number">10</span>,<span class="number">15</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(list)</span></span></span><br><span class="line"><span class="selector-tag">a</span> = set(list)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(a)</span></span></span><br><span class="line">[<span class="selector-tag">i</span> <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> a]</span><br></pre></td></tr></table></figure><p><br><br><img src="https://lightfisher.github.io/img/Python_question/6.jpg" alt="set"><br><br></p><h3 id="7-fun-args-kwargs-中args，-kwargs是什么意思？"><a href="#7-fun-args-kwargs-中args，-kwargs是什么意思？" class="headerlink" title="7.fun(args,**kwargs)中args，**kwargs是什么意思？"></a>7.fun(<em>args,**kwargs)中</em>args，**kwargs是什么意思？</h3><ul><li><em>args和</em>kwargs主要用于函数的定义。你可以将不定数量的参数传递给一个函数。这里的不定的意思是：预先并不知道，函数使用者会传递多少个参数给你，所以在这个场景下使用这两个关键字。*args是用来发送一个非键值对的可变数量的参数列表给一个函数。这里有一个例子</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(args_f,*args_v)</span>:</span></span><br><span class="line">    print(args_f)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> args_v:</span><br><span class="line">        print(x)</span><br><span class="line">demo(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,e<span class="string">')</span></span><br></pre></td></tr></table></figure><p><br><br><img src="https://lightfisher.github.io/img/Python_question/7.jpg" alt="*args"><br><br></p><ul><li><strong>kwargs 允许你将不定长度的键值对传递给一个函数。如果你想要一个函数里处理带名字的参数，你因该使用</strong>kwargs，这里有一个例子</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def demo(*<span class="number">*a</span>rgs_v):</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> args_v.items():</span><br><span class="line">        <span class="builtin-name">print</span>(k,v)</span><br><span class="line">demo(<span class="attribute">name</span>=<span class="string">'light'</span>,name='fish)</span><br></pre></td></tr></table></figure><p><br><br><img src="https://lightfisher.github.io/img/Python_question/7-2.jpg" alt="*kwargs"><br><br></p><h3 id="8-python2和python3的range的区别"><a href="#8-python2和python3的range的区别" class="headerlink" title="8.python2和python3的range的区别"></a>8.python2和python3的range的区别</h3><blockquote><p>python2返回一个列表，python3返回一个迭代器，节约内存</p></blockquote><h3 id="9-一句话解释什么样的语言能过用装饰器"><a href="#9-一句话解释什么样的语言能过用装饰器" class="headerlink" title="9.一句话解释什么样的语言能过用装饰器"></a>9.一句话解释什么样的语言能过用装饰器</h3><blockquote><p>函数可以作为参数传递的语言，可以使用装饰器</p></blockquote><h3 id="10-python内建函数类型有哪些"><a href="#10-python内建函数类型有哪些" class="headerlink" title="10.python内建函数类型有哪些"></a>10.python内建函数类型有哪些</h3><ul><li>整型 – <code>int</code></li><li>布尔型 – <code>bool</code></li><li>字符串 – <code>str</code></li><li>列表 – <code>list</code></li><li>元组 – <code>tuple</code></li><li>字典 – <code>dict</code></li><li>集合 – <code>set</code></li></ul><h3 id="11-简述面向对象中new和init的区别"><a href="#11-简述面向对象中new和init的区别" class="headerlink" title="11.简述面向对象中new和init的区别"></a>11.简述面向对象中<strong>new</strong>和<strong>init</strong>的区别</h3><ul><li><p><strong>init</strong>是初始化方法，创建对象后，就立刻被默认调用，相当于C语言的构造函数，可接受参数，如下图：<br><br><br><img src="https://lightfisher.github.io/img/Python_question/11-1.jpg" alt="__init__"><br><br></p></li><li><p><strong>new</strong>至少要有一个参数cls，代表是当前类，此参数在实例化的时候由Python解释器自动识别</p></li><li><strong>new</strong>必须要有返回值，返回实例化出来的实例，这点在自己实现<strong>new</strong>时要特别注意，可以return父类(通过super(当前类，cls)) <strong>new</strong>出来的实例，或者直接是object的<strong>new</strong>出来的实例</li><li><strong>init</strong>有一个参数self,就是这个<strong>new</strong>返回的实例，<strong>init</strong>在<strong>new</strong>的基础上可以完成一些其他初始化的动作，<strong>init</strong>不需要返回值</li><li>如果<strong>new</strong>创建的是当前类的实例，会自动调用<strong>init</strong>函数，通过return语句里面调用<strong>new</strong>函数的第一个参数cls来保证是当前类实例，如果是其他类的类名；那么实际创建返回的就是其他类的实例，其实就不会调用当前类的<strong>init</strong>函数，也不会调用其他类的<strong>init</strong>函数<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'这是 init 方法'</span>,self)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">'这是cls的ID'</span>,id(cls))</span><br><span class="line">        print(<span class="string">'这是 new 方法'</span>,object.__new__(cls))</span><br><span class="line">        <span class="keyword">return</span> object.__new__(cls)</span><br><span class="line">Test()</span><br><span class="line">print(<span class="string">'这是A的ID'</span>,id(Test))</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://lightfisher.github.io/img/Python_question/11.jpg" alt="__new__"></p><h3 id="12-列表-1-2-3-4-5-请使用map函数输出-1-4-9-16-25-并使用列表推导式提取出大于10的数"><a href="#12-列表-1-2-3-4-5-请使用map函数输出-1-4-9-16-25-并使用列表推导式提取出大于10的数" class="headerlink" title="12.列表[1,2,3,4,5],请使用map函数输出[1,4,9,16,25],并使用列表推导式提取出大于10的数"></a>12.列表[1,2,3,4,5],请使用map函数输出[1,4,9,16,25],并使用列表推导式提取出大于10的数</h3><ul><li><code>map()</code>函数的第一个参数是fun</li><li><code>map()</code>生成的生成器，只能使用一次<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = list(range(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line">res = map(lambda x: x**<span class="number">2</span>,list1)</span><br><span class="line">res_list = [<span class="selector-tag">i</span> <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> res <span class="keyword">if</span> <span class="selector-tag">i</span> &gt; <span class="number">10</span>]</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://lightfisher.github.io/img/Python_question/12.jpg" alt="map"></p><h3 id="13-python中生成随机数的若干方法"><a href="#13-python中生成随机数的若干方法" class="headerlink" title="13.python中生成随机数的若干方法"></a>13.python中生成随机数的若干方法</h3><ul><li>random.uniform(a,b) 闭区间取浮点数,a,b可换序</li><li>random.randint(q,b) 闭区间取整型数，a,b不可换序</li><li>random.randrange(a,b,c) b开,取a向上递增2数的随机数</li><li>random.choice(‘12345asd?”‘) 随机取数</li><li>random.sample(‘abcdefg’,3) 随机取三个数</li></ul><h3 id="14-避免转义给字符串加什么字符表示原是字符串？"><a href="#14-避免转义给字符串加什么字符表示原是字符串？" class="headerlink" title="14.避免转义给字符串加什么字符表示原是字符串？"></a>14.避免转义给字符串加什么字符表示原是字符串？</h3><ul><li><code>r</code>,表示需要原始字符串</li></ul><h3 id="15-python中断言的方法"><a href="#15-python中断言的方法" class="headerlink" title="15.python中断言的方法"></a>15.python中断言的方法</h3><ul><li>assert()方法，断言成功程序继续运行，断言失败，则程序报错<br><img src="https://lightfisher.github.io/img/Python_question/15.jpg" alt="assert"></li></ul><h3 id="16-数据库中student有重复的name，消除重复，请写sql语句"><a href="#16-数据库中student有重复的name，消除重复，请写sql语句" class="headerlink" title="16.数据库中student有重复的name，消除重复，请写sql语句"></a>16.数据库中student有重复的name，消除重复，请写sql语句</h3><pre><code>select distinct name from studnet</code></pre><h3 id="17-10个Linux常用命令"><a href="#17-10个Linux常用命令" class="headerlink" title="17.10个Linux常用命令"></a>17.10个Linux常用命令</h3><pre><code>ls pwd cd touch rm mkdir tree cp mv cat vi more echo grep</code></pre><h3 id="18-python2和python3的区别"><a href="#18-python2和python3的区别" class="headerlink" title="18.python2和python3的区别?"></a>18.python2和python3的区别?</h3><ul><li>Python3使用print必须要用小括号包裹打印内容，Python2可以使用小括号也可以空格</li><li>Python2 range(10) 返回的实列表，Python3返回的是迭代器，节约内存</li><li>Python2中使用ascii编码，Python3中使用utf-8编码</li><li>Python3中str表示字符串序列，byte表示字节序列</li><li>Python2中unicode表示字符串序列，str表示字节序列</li><li>Python2为了正常显示中文，要coding申明，Python3不需要</li><li>Python2是raw_input(),Python 是input()</li></ul><h3 id="19-列出Python中可变数据和不可变数据类型，并简述原理"><a href="#19-列出Python中可变数据和不可变数据类型，并简述原理" class="headerlink" title="19.列出Python中可变数据和不可变数据类型，并简述原理"></a>19.列出Python中可变数据和不可变数据类型，并简述原理</h3><ul><li>不可变数据类型：数值型、字符串型string和元组tuple<br>不允许变量的值发生变化，如果改变了变量的值，相当于创建了一个对象，而对于相同的值的对象，在内存中则只有一个对象(一个地址)<br><br><img src="https://lightfisher.github.io/img/Python_question/19.jpg" alt="assert"></li><li>可变数据类型：列表list和字典dict；<br>允许变量的值发生变化，而不会新建一个对象，变量引用的对象的地址也不会发生变化，不过对于相同的值的不同对象，在内存中则会存在不同的对象，即每个对象都有自己的地址，相当于内存中对于同值的对象保存了多份，这里不存在引用计数，是实实在在的对象<br><br><img src="https://lightfisher.github.io/img/Python_question/20.jpg" alt="assert"></li></ul><h3 id="20-去重并从小到大排序输出"><a href="#20-去重并从小到大排序输出" class="headerlink" title="20.去重并从小到大排序输出"></a>20.去重并从小到大排序输出</h3><ul><li>相信你肯定学过<code>set</code>集合，<code>set</code>是可以实现去重的，不失为一种好的方法，然后利用sort方法进行排序，默认参数reverse = False就是从小到大排序，为True，是从大到小</li><li><p>list是可变数据类型，所以list.sort()没有返回值，所以注释掉的代码写法不正确</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = 'amnshgisabcd'</span><br><span class="line">s = set(s)</span><br><span class="line">s = list(s)</span><br><span class="line">s.sort()</span><br><span class="line"><span class="comment"># s = s.sort()</span></span><br><span class="line">res = ''.join(s)</span><br></pre></td></tr></table></figure></li><li><p>利用集合或者生成器解决问题，去重并保持顺序</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def dupe(<span class="keyword">items</span>):</span><br><span class="line">seen = <span class="built_in">set</span>() <span class="comment">#创建一个空的集合</span></span><br><span class="line">      <span class="keyword">for</span> <span class="keyword">item</span> <span class="keyword">in</span> <span class="keyword">items</span>:</span><br><span class="line">         <span class="keyword">if</span> <span class="keyword">item</span> <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">        yield <span class="keyword">item</span></span><br><span class="line">            seen.<span class="built_in">add</span>(<span class="keyword">item</span>)</span><br><span class="line"><span class="keyword">a</span> = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line">list(dupe(<span class="keyword">a</span>))</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://lightfisher.github.io/img/Python_question/21.jpg" alt="yield"></p><ul><li>消除元素不可哈希：如字典类型</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def rem(items, key=None):</span><br><span class="line">    seen = <span class="keyword">set</span>()  <span class="comment"># 创建一个空的集合</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        va = item <span class="keyword">if</span> <span class="keyword">key</span> <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> <span class="keyword">key</span>(item)</span><br><span class="line">        <span class="keyword">if</span> va <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">            yield item</span><br><span class="line">            seen.add(va)</span><br><span class="line">a = [&#123;<span class="string">'x'</span>:<span class="number">1</span>, <span class="string">'y'</span>:<span class="number">2</span>&#125;, &#123;<span class="string">'x'</span>:<span class="number">1</span>,<span class="string">'y'</span>: <span class="number">3</span>&#125;, &#123;<span class="string">'x'</span>:<span class="number">1</span>, <span class="string">'y'</span>:<span class="number">2</span>&#125;, &#123;<span class="string">'x'</span>:<span class="number">2</span>, <span class="string">'y'</span>:<span class="number">4</span>&#125;]</span><br><span class="line"><span class="keyword">list</span>(<span class="keyword">rem</span>(a, <span class="keyword">key</span>=lambda d: (d[<span class="string">'x'</span>],d[<span class="string">'y'</span>])))</span><br></pre></td></tr></table></figure><p><img src="https://lightfisher.github.io/img/Python_question/22.jpg" alt="set"></p><h3 id="21-lambda的基本使用，字典根据键值从小到大排序，用sorted函数"><a href="#21-lambda的基本使用，字典根据键值从小到大排序，用sorted函数" class="headerlink" title="21.lambda的基本使用，字典根据键值从小到大排序，用sorted函数"></a>21.lambda的基本使用，字典根据键值从小到大排序，用sorted函数</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">'name'</span>: <span class="string">'zs'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'city'</span>: <span class="string">'杭州'</span>, <span class="string">'tel'</span>: <span class="string">'1234'</span>&#125;</span><br><span class="line">list1 = sorted(</span><br><span class="line">    dict1.<span class="built_in">keys</span>(),</span><br><span class="line">    key=lambda d: d[<span class="number">0</span>],</span><br><span class="line">    <span class="built_in">reverse</span>=False)  # <span class="built_in">reverse</span> 为True是降序</span><br><span class="line"><span class="keyword">print</span>(list1)</span><br><span class="line"><span class="keyword">print</span>(dict1.<span class="built_in">items</span>())</span><br><span class="line"><span class="keyword">print</span>(dict1.<span class="built_in">keys</span>())</span><br><span class="line"><span class="keyword">print</span>(dict1.<span class="built_in">values</span>())</span><br></pre></td></tr></table></figure><p><img src="https://lightfisher.github.io/img/Python_question/23.jpg" alt="img"></p><h3 id="22-利用collections库的Counter方法统计字符串每个单词的出现次数"><a href="#22-利用collections库的Counter方法统计字符串每个单词的出现次数" class="headerlink" title="22.利用collections库的Counter方法统计字符串每个单词的出现次数"></a>22.利用collections库的Counter方法统计字符串每个单词的出现次数</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from collections import Counter</span><br><span class="line"><span class="selector-tag">a</span> = <span class="string">'amsjdasduqwenasdlaqiasmd'</span></span><br><span class="line">res = Counter(a)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(res)</span></span></span><br></pre></td></tr></table></figure><p><img src="https://lightfisher.github.io/img/Python_question/24.jpg" alt="collection"></p><h3 id="23-filter函数的简单用法"><a href="#23-filter函数的简单用法" class="headerlink" title="23.filter函数的简单用法"></a>23.filter函数的简单用法</h3><ul><li>a = list(range(1,10)) 求出所有奇数，并构造新列表<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = list(range(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">newlist = [<span class="selector-tag">i</span> <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="attribute">filter</span>(lambda x: x % <span class="number">2</span>, a)]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(newlist)</span></span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://lightfisher.github.io/img/Python_question/25.jpg" alt="filter"></p><h3 id="24-列表推导式求上述问题"><a href="#24-列表推导式求上述问题" class="headerlink" title="24.列表推导式求上述问题"></a>24.列表推导式求上述问题</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = list(range(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line"><span class="keyword">new</span><span class="type">list</span> = [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>]</span><br><span class="line">print(<span class="keyword">new</span><span class="type">list</span>)</span><br></pre></td></tr></table></figure><h3 id="25-1-、-1-、-“1”-分别是什么类型"><a href="#25-1-、-1-、-“1”-分别是什么类型" class="headerlink" title="25. (1,)、(1)、(“1”)分别是什么类型"></a>25. (1,)、(1)、(“1”)分别是什么类型</h3><ul><li>(1) 是int类型</li><li>(“1”) 是str类型</li><li>(1,) 是元组类型</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python基础要点一&quot;&gt;&lt;a href=&quot;#Python基础要点一&quot; class=&quot;headerlink&quot; title=&quot;Python基础要点一&quot;&gt;&lt;/a&gt;Python基础要点一&lt;/h1&gt;&lt;h3 id=&quot;1-一行代码实现1–100之和&quot;&gt;&lt;a href=&quot;#1-一行代码实现1–100之和&quot; class=&quot;headerlink&quot; title=&quot;1.一行代码实现1–100之和&quot;&gt;&lt;/a&gt;1.一行代码实现1–100之和&lt;/h3&gt;&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sum(&lt;span class=&quot;name&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;101&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lightfisher.github.io/img/Python_question/1.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.lightfisher.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.lightfisher.cn/tags/Python/"/>
    
      <category term="Python基础" scheme="http://www.lightfisher.cn/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://www.lightfisher.cn/2018/12/04/test/"/>
    <id>http://www.lightfisher.cn/2018/12/04/test/</id>
    <published>2018-12-04T13:18:00.000Z</published>
    <updated>2018-12-05T10:37:25.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="这是一个简单的测试blog"><a href="#这是一个简单的测试blog" class="headerlink" title="这是一个简单的测试blog"></a>这是一个简单的测试blog</h3><p><a href="https://www.baidu.com" target="_blank" rel="noopener">emm</a><br><br></p><h2 id="Yoona"><a href="#Yoona" class="headerlink" title="Yoona"></a>Yoona</h2><a id="more"></a><p><img src="https://lightfisher.github.io/img/test/10.jpg" alt="Yoona"></p><p><a href="https://postimg.cc/YvcztZCR" target="_blank" rel="noopener"><img src="https://i.postimg.cc/L85C3Mdc/10.jpg" alt="10.jpg"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;这是一个简单的测试blog&quot;&gt;&lt;a href=&quot;#这是一个简单的测试blog&quot; class=&quot;headerlink&quot; title=&quot;这是一个简单的测试blog&quot;&gt;&lt;/a&gt;这是一个简单的测试blog&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;emm&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Yoona&quot;&gt;&lt;a href=&quot;#Yoona&quot; class=&quot;headerlink&quot; title=&quot;Yoona&quot;&gt;&lt;/a&gt;Yoona&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
