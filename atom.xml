<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lightfish&#39;s Blog</title>
  
  <subtitle>是非天天有，不听自然无</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-20T09:18:27.706Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lightfish</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VIP音乐免费下载</title>
    <link href="http://yoursite.com/2018/12/20/IP%E9%9F%B3%E4%B9%90%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/2018/12/20/IP音乐免费下载/</id>
    <published>2018-12-20T08:02:00.000Z</published>
    <updated>2018-12-20T09:18:27.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VIP音乐免费下载"><a href="#VIP音乐免费下载" class="headerlink" title="VIP音乐免费下载"></a>VIP音乐免费下载</h1><blockquote><p>好久没有更新博客了，今天我就来写一个爬虫吧。如果你是那种喜欢缓存歌，喜欢听歌的人，你一定遇到过这种情况，<code>由于版权原因无法播放(缓存)此歌曲</code>，或者是<code>请使用客户端下载</code>(emmm,有些下载客户端也不能下载)。所以，为了世界的幸福感，为了守护世界的和平，贯彻爱与真实的邪恶，可爱又迷人的反派角色，emmm，对不起跑题了，今天我就写一个，突破这种限制的小小小音乐爬虫，So Just have fun again…</p></blockquote><a id="more"></a><p>就拿杰伦的这首稻香，当你点击播放的时候，就显示下面这个界面，无法播放</p><p><img src="http://pjas65wzi.bkt.clouddn.com\qianqian_music%5C1.jpg" alt="img"></p><p>所以有了这篇博客的由来。</p><h3 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h3><blockquote><p>先拿一首能播放的音乐，就拿这首薛之谦的《刚刚好》来分析，进入这个页面右键<code>检查</code>,或者按<code>F12</code>进入开发者调试界面，再选中<code>Network</code>,你应该就能看到下面这个界面(如果不能，你就刷新页面)</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com\qianqian_music%5C2.jpg" alt="img"></p><p>上面那个歌曲链接，如果你直接去访问应该是就直接下载了，但是这样对稻香这种歌，根本不能播放，就不会去接受数据播放音乐，也就是说不会有这个url链接</p><p><img src="http://pjas65wzi.bkt.clouddn.com\qianqian_music%5C3.jpg" alt="img"></p><p><strong>但是</strong>，莫慌，慢慢来</p><blockquote><p>我们先来看看它是如何接受这首歌的地址，我们先你前面选中的<code>Media</code>换成<code>All</code>,然后刷新页面，这个时候你肯定看到乱七八糟的’东西’，如下</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com\qianqian_music%5C6.jpg" alt="img"></p><blockquote><p>这个时候不能脑壳疼，这些只是你刷新页面后接受的数据，我们要的东西一定就是在这里面，所以，我们就要进行筛选，这里我就简单说一种，你点击<code>size</code>,让它从大到小排序。。。这个时候，你应该就更能看清了，</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com\qianqian_music%5C7.jpg" alt="img"></p><blockquote><p>第一个数据那么大，你点击进去发现，就是前面我们找到的歌曲url，显然不是我们现在要的数据。所以，我们接着往下找，一个个点击进去，并点<code>Preview</code>(这样看更加直观)，分别是一个个图片，直到点到这个</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com\qianqian_music%5C4.jpg" alt="img"></p><blockquote><p>点<code>Preview</code>，我们就能更加肯定是我们要找的数据包</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com\qianqian_music%5C5.jpg" alt="img"></p><blockquote><p>把前面的URL地址复制下来直接去访问看看，发现就是我们要的数据(（。－_－。），总算找到了)</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com\qianqian_music%5C8.jpg" alt="img"></p><blockquote><p>找到了以后，这次的博客我们就可以写代码了</p></blockquote><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><blockquote><p>思路已经讲清，就简单展示下我们的code。因为每个人的写代码思路不同就不详述了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">author:lightfish</span></span><br><span class="line"><span class="string">time:2018.12.19</span></span><br><span class="line"><span class="string">note:千千音乐的批量下载</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_music_resource</span><span class="params">(songid)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param songid: 歌曲的id</span></span><br><span class="line"><span class="string">    :return: 因为我们爬取的数据并不是规范的json格式数据，所以我们就得进行适当的处理，让他变成</span></span><br><span class="line"><span class="string">    规范的json格式数据，这里，我用的是正则方法</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    search_url = <span class="string">'http://musicapi.taihe.com/v1/restserver/ting?method=baidu.ting.song.playAAC&amp;format=jsonp&amp;callback=jQuery172047648654448286276_1545221906467&amp;songid=&#123;&#125;'</span>.format(</span><br><span class="line">        songid)</span><br><span class="line">    response = requests.get(search_url).text</span><br><span class="line">    res = re.findall(<span class="string">r'\((.*)\)'</span>, response)[<span class="number">0</span>]</span><br><span class="line">    res_json = json.loads(res)</span><br><span class="line">    <span class="keyword">return</span> res_json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_music_info</span><span class="params">(jsondata)</span>:</span></span><br><span class="line">    songinfo = jsondata[<span class="string">'songinfo'</span>]</span><br><span class="line">    music_title = songinfo[<span class="string">'title'</span>]</span><br><span class="line">    print(<span class="string">'歌名: '</span> + music_title)</span><br><span class="line">    music_compose = songinfo[<span class="string">'compose'</span>]</span><br><span class="line">    print(<span class="string">'作者: '</span> + music_compose)</span><br><span class="line">    album_title = songinfo[<span class="string">'album_title'</span>]</span><br><span class="line">    print(<span class="string">'专辑: '</span> + album_title)</span><br><span class="line">    avatar = songinfo[<span class="string">'artist_list'</span>][<span class="number">0</span>][<span class="string">'avatar_s300'</span>] <span class="keyword">if</span> songinfo[<span class="string">'artist_list'</span>][<span class="number">0</span>][<span class="string">'avatar_s300'</span>] <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    print(<span class="string">'头像: '</span> + avatar)</span><br><span class="line">    music_language = songinfo[<span class="string">'language'</span>] <span class="keyword">if</span> songinfo[<span class="string">'language'</span>] <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    print(<span class="string">'语种: '</span> + music_language)</span><br><span class="line">    music_country = songinfo[<span class="string">'country'</span>] <span class="keyword">if</span> songinfo[<span class="string">'country'</span>] <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    print(<span class="string">'国家: '</span> + music_country)</span><br><span class="line">    music_url = jsondata[<span class="string">'bitrate'</span>][<span class="string">'file_link'</span>]</span><br><span class="line">    print(music_url)</span><br><span class="line">    <span class="keyword">return</span> music_title, music_url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">music_download</span><span class="params">(filename, url)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename + <span class="string">'.mp3'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(requests.get(url).content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    songid = input(<span class="string">'请输入歌曲的id: '</span>)</span><br><span class="line">    data = get_music_resource(songid)</span><br><span class="line">    music_title, music_url = get_music_info(data)</span><br><span class="line">    is_download = input(<span class="string">'是否下载(y/n): '</span>)</span><br><span class="line">    <span class="keyword">if</span> is_download.lower() == <span class="string">'y'</span>:</span><br><span class="line">        music_download(music_title, music_url)</span><br><span class="line">        print(<span class="string">'下载完成，Just for fun...'</span>)</span><br><span class="line">    <span class="keyword">elif</span> is_download.lower() == <span class="string">'n'</span>:</span><br><span class="line">        print(<span class="string">'Just for fun...'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'emmm ,exiting...'</span>)</span><br></pre></td></tr></table></figure><h3 id="成功截图"><a href="#成功截图" class="headerlink" title="成功截图"></a>成功截图</h3><blockquote><p>emmm,忽然发现都快忘了我们周董的《稻香》了，其实是一样的，也有着songid，你去访问也是能获得你想要的链接地址。anywhere，Just for fun…</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com\qianqian_music%5C9.jpg" alt="img"></p><p><img src="http://pjas65wzi.bkt.clouddn.com\qianqian_music%5C10.jpg" alt="img"></p><p><br><br><br>以上就是这次博客的一点小小内容了，你可以进行设当的扩展，如只需要输入歌手的名称就下载全部该歌手的音乐(emmm,本来想写的，乏了，这种重任就交给你们了)，可以给一点思路，获取页面，找到所有的歌曲id，搜索就更简单了，构造url 例如薛之谦的搜索界面是这样的 <a href="http://music.taihe.com/search?key=%E8%96%9B%E4%B9%8B%E8%B0%A6" target="_blank" rel="noopener">click me</a>,是不是很简单<br><br>So,Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;VIP音乐免费下载&quot;&gt;&lt;a href=&quot;#VIP音乐免费下载&quot; class=&quot;headerlink&quot; title=&quot;VIP音乐免费下载&quot;&gt;&lt;/a&gt;VIP音乐免费下载&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;好久没有更新博客了，今天我就来写一个爬虫吧。如果你是那种喜欢缓存歌，喜欢听歌的人，你一定遇到过这种情况，&lt;code&gt;由于版权原因无法播放(缓存)此歌曲&lt;/code&gt;，或者是&lt;code&gt;请使用客户端下载&lt;/code&gt;(emmm,有些下载客户端也不能下载)。所以，为了世界的幸福感，为了守护世界的和平，贯彻爱与真实的邪恶，可爱又迷人的反派角色，emmm，对不起跑题了，今天我就写一个，突破这种限制的小小小音乐爬虫，So Just have fun again…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="spider" scheme="http://yoursite.com/tags/spider/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+github搭建个人博客四</title>
    <link href="http://yoursite.com/2018/12/16/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%9B%9B/"/>
    <id>http://yoursite.com/2018/12/16/Hexo-github搭建个人博客四/</id>
    <published>2018-12-16T08:26:00.000Z</published>
    <updated>2018-12-16T09:15:00.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-github搭建个人博客"><a href="#Hexo-github搭建个人博客" class="headerlink" title="Hexo+github搭建个人博客"></a>Hexo+github搭建个人博客</h1><blockquote><p>一直拖了很久，今天就来为你们来点干货，这次我会讲解一个干货，如，word文字统计，点击爱心效果展示，live2d可爱动漫人物的设置，网易云音乐的设置，添加网站运行时间</p></blockquote><a id="more"></a><h3 id="1-文字统计和阅读时长的设置"><a href="#1-文字统计和阅读时长的设置" class="headerlink" title="1.文字统计和阅读时长的设置"></a>1.文字统计和阅读时长的设置</h3><blockquote><p>这个动能其实已经集成过的，有兴趣的话看<a href="https://www.npmjs.com/package/hexo-wordcount" target="_blank" rel="noopener">官网介绍</a>。这里的话，我就简单描述一遍。</p></blockquote><h4 id="1-安装hexo-wordcount"><a href="#1-安装hexo-wordcount" class="headerlink" title="1.安装hexo-wordcount"></a>1.安装hexo-wordcount</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --<span class="keyword">save</span> hexo-<span class="built_in">wordcount</span></span><br></pre></td></tr></table></figure><h4 id="2-文件配置"><a href="#2-文件配置" class="headerlink" title="2.文件配置"></a>2.文件配置</h4><blockquote><p>在<code>Hexo\themes\yilia\layout\_partial\post</code>下创建word,ejs文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top:10px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-time"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-keyboard-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>  字数统计: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">wordcount</span>(<span class="attr">post.content</span>) %&gt;</span>字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-time"</span>&gt;</span></span><br><span class="line">      &amp;nbsp; | &amp;nbsp;</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-hourglass-half"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>  阅读时长: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">min2read</span>(<span class="attr">post.content</span>) %&gt;</span>分<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果基本应该和我一样</p><h3 id="2-点击爱心效果设置"><a href="#2-点击爱心效果设置" class="headerlink" title="2.点击爱心效果设置"></a>2.点击爱心效果设置</h3><h4 id="1-在yilia-source文件下创建clicklove-js-加入以下代码"><a href="#1-在yilia-source文件下创建clicklove-js-加入以下代码" class="headerlink" title="1.在yilia/source文件下创建clicklove.js,加入以下代码"></a>1.在yilia/source文件下创建clicklove.js,加入以下代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><p><img src="http://pjas65wzi.bkt.clouddn.com\hexo4%5C1.jpg" alt="img"></p><h4 id="2-在Hexo-themes-yilia-layout-partial下配置"><a href="#2-在Hexo-themes-yilia-layout-partial下配置" class="headerlink" title="2.在Hexo\themes\yilia\layout\_partial下配置"></a>2.在<code>Hexo\themes\yilia\layout\_partial</code>下配置</h4><ul><li>修改<code>footer.ejs</code>文件，因为这个文件基本每个布局都会用到，所以在文件尾添加一下代码</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/clicklove.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://pjas65wzi.bkt.clouddn.com\hexo4%5C2.jpg" alt="img"></p><p><img src="http://pjas65wzi.bkt.clouddn.com\hexo4%5C3.jpg" alt="img"></p><h3 id="3-设置可爱的动漫小人"><a href="#3-设置可爱的动漫小人" class="headerlink" title="3.设置可爱的动漫小人"></a>3.设置可爱的动漫小人</h3><h4 id="1-安装模块"><a href="#1-安装模块" class="headerlink" title="1.安装模块"></a>1.安装模块</h4><blockquote><p>hexo博客根目录选择<code>cmd</code>命令窗口或者<code>git bash</code> 输入以下代码，安装插件</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-helper-live2d</span></span><br></pre></td></tr></table></figure><blockquote><p>各种模型<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">展示</a></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-haru/02 (<span class="keyword">use</span> npm <span class="keyword">install</span> <span class="comment">--save live2d-widget-model-haru)</span></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-haruto</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-hibiki</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-hijiki</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-izumi</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-koharu</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-miku</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-ni-j</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nico</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nietzsche</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nipsilon</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nito</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-shizuku</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-tororo</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-tsumiki</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-unitychan</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-wanko</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-z16</span><br></pre></td></tr></table></figure><blockquote><p>选择好对应的模型，使用 <code>npm install</code> 模型的包名来安装，比如我选择的的是live2d-widget-model-koharu 模型包</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> live2d-widget-<span class="keyword">model</span>-koharu</span><br></pre></td></tr></table></figure><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><blockquote><p>打开个人Hexo博客文件根目录下的 <code>_config.yml</code> 文件，在最后添加一下代码</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#二次元</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  scriptFrom:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line"><span class="attr">  pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line"><span class="attr">  pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line"><span class="attr">  tagMode:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  debug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  model:</span></span><br><span class="line"><span class="attr">    use:</span> <span class="string">live2d-widget-model-haruto</span> <span class="comment">#这个是你要修改的</span></span><br><span class="line"><span class="attr">  display:</span></span><br><span class="line"><span class="attr">    position:</span> <span class="string">left</span> <span class="comment">#在屏幕上的显示位置</span></span><br><span class="line"><span class="attr">    width:</span> <span class="number">85</span> <span class="comment">#显示宽度</span></span><br><span class="line"><span class="attr">    height:</span> <span class="number">170</span> <span class="comment">#显示高度</span></span><br><span class="line"><span class="attr">  mobile:</span></span><br><span class="line"><span class="attr">    show:</span> <span class="literal">false</span> <span class="comment">#手机端是否显示</span></span><br></pre></td></tr></table></figure><p><img src="http://pjas65wzi.bkt.clouddn.com\hexo4%5C4.jpg" alt="img"></p><h4 id="3-注意"><a href="#3-注意" class="headerlink" title="3.注意"></a>3.<strong>注意</strong></h4><blockquote><p>当你换了动漫人物，发现在本地并没有展示出来的时候，或者明明设置了宽高时，不用慌，你可以<code>hexo clean</code>以下，再<code>hexo g</code>生成静态文件，<code>hexo s</code>启动本地服务看看，这样应该就行了。</p></blockquote><h3 id="4-网站运行时间的设置"><a href="#4-网站运行时间的设置" class="headerlink" title="4.网站运行时间的设置"></a>4.网站运行时间的设置</h3><h4 id="1-在前面提及到footer-ejs中修改，添加以下代码"><a href="#1-在前面提及到footer-ejs中修改，添加以下代码" class="headerlink" title="1.在前面提及到footer.ejs中修改，添加以下代码"></a>1.在前面提及到footer.ejs中修改，添加以下代码</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"timeDate"</span>&gt;</span>载入天数...<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"times"</span>&gt;</span>载入时分秒...<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  #这个就是显示的文字，注意加的位置，要显示出来</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">createtime</span><span class="params">()</span> </span>&#123; </span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"12/03/2018 12:49:00"</span>);<span class="comment">//此处修改你的建站时间或者网站上线时间 </span></span></span><br><span class="line"><span class="undefined">        now.setTime(now.getTime()+250); </span></span><br><span class="line"><span class="javascript">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="built_in">Math</span>.floor(days); </span></span><br><span class="line"><span class="javascript">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="built_in">Math</span>.floor(hours); </span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="built_in">String</span>(hnum).length ==<span class="number">1</span> )&#123;hnum = <span class="string">"0"</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum); </span></span><br><span class="line"><span class="javascript">        mnum = <span class="built_in">Math</span>.floor(minutes); <span class="keyword">if</span>(<span class="built_in">String</span>(mnum).length ==<span class="number">1</span> )&#123;mnum = <span class="string">"0"</span> + mnum;&#125; </span></span><br><span class="line"><span class="undefined">        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); </span></span><br><span class="line"><span class="javascript">        snum = <span class="built_in">Math</span>.round(seconds); <span class="keyword">if</span>(<span class="built_in">String</span>(snum).length ==<span class="number">1</span> )&#123;snum = <span class="string">"0"</span> + snum;&#125; </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"timeDate"</span>).innerHTML = <span class="string">"本站已安全运行 "</span>+dnum+<span class="string">" 天 "</span>; </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"times"</span>).innerHTML = hnum + <span class="string">" 小时 "</span> + mnum + <span class="string">" 分 "</span> + snum + <span class="string">" 秒"</span>; </span></span><br><span class="line"><span class="undefined">    &#125; </span></span><br><span class="line"><span class="actionscript">setInterval(<span class="string">"createtime()"</span>,<span class="number">250</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br><br>以上就是全部博客内容了，So<br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-github搭建个人博客&quot;&gt;&lt;a href=&quot;#Hexo-github搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo+github搭建个人博客&quot;&gt;&lt;/a&gt;Hexo+github搭建个人博客&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一直拖了很久，今天就来为你们来点干货，这次我会讲解一个干货，如，word文字统计，点击爱心效果展示，live2d可爱动漫人物的设置，网易云音乐的设置，添加网站运行时间&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="hexo搭建" scheme="http://yoursite.com/tags/hexo%E6%90%AD%E5%BB%BA/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git 的一些基本操作和讲解</title>
    <link href="http://yoursite.com/2018/12/13/t-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%92%8C%E8%AE%B2%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/12/13/t-的一些基本操作和讲解/</id>
    <published>2018-12-13T04:22:55.000Z</published>
    <updated>2018-12-13T09:11:20.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-的一些基本操作和讲解"><a href="#Git-的一些基本操作和讲解" class="headerlink" title="Git 的一些基本操作和讲解"></a>Git 的一些基本操作和讲解</h1><blockquote><p>Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 [1]  Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p></blockquote><a id="more"></a><h2 id="Git-很强大，接下来我就讲解一下简单强大的命令"><a href="#Git-很强大，接下来我就讲解一下简单强大的命令" class="headerlink" title="Git 很强大，接下来我就讲解一下简单强大的命令"></a>Git 很强大，接下来我就讲解一下简单强大的命令</h2><h4 id="1-git-version-查看当前git版本"><a href="#1-git-version-查看当前git版本" class="headerlink" title="1.git version 查看当前git版本"></a>1.<code>git version</code> 查看当前git版本</h4><p><img src="http://pjas65wzi.bkt.clouddn.com\git_test%5C1.jpg" alt="img"></p><h4 id="2-全局设置用户"><a href="#2-全局设置用户" class="headerlink" title="2.全局设置用户"></a>2.全局设置用户</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"..."</span>  #你的账号，比如github</span><br><span class="line">git cinfig --global user.email <span class="string">"..."</span>  #你的邮箱地址，github账户邮箱</span><br></pre></td></tr></table></figure><p>查看你的账户哦~</p><p><img src="http://pjas65wzi.bkt.clouddn.com\git_test%5C2.jpg" alt="img"></p><p><code>cat ~/.gitconfig</code> 查看你的git配置,上面就是查看</p><h4 id="3-初始化git仓库，并查看状态"><a href="#3-初始化git仓库，并查看状态" class="headerlink" title="3.初始化git仓库，并查看状态"></a>3.初始化git仓库，并查看状态</h4><ul><li><p><code>git init</code>初始化git仓库，初始化后会有一个.git的隐藏文件，下面我教一个如何命令行查看隐藏文件</p></li><li><p><code>ll -la</code> 查看隐藏文件</p></li></ul><p><img src="http://pjas65wzi.bkt.clouddn.com\git_test%5C6.jpg" alt="img"></p><ul><li><p><code>touch &lt;file&gt;</code> 命令相当于你新建一个文件 后面跟文件名(记得加后缀)</p></li><li><p><code>git status</code> 查看当前git仓库的一个状态</p></li></ul><p><img src="http://pjas65wzi.bkt.clouddn.com\git_test%5C3.jpg" alt="img"></p><h4 id="4-git暂存区"><a href="#4-git暂存区" class="headerlink" title="4.git暂存区"></a>4.git暂存区</h4><ul><li><code>git add &lt;file&gt;</code> 后面加文件名  就是把后面的文件放到暂存区，你可以用上述git status方法查看变化</li></ul><p><img src="http://pjas65wzi.bkt.clouddn.com\git_test%5C4.jpg" alt="img"></p><ul><li><p><strong>注意</strong>：上述方法只是放到git仓库的暂存区，还没有真正的提交，你也可以用</p></li><li><p><code>git rm --cached &lt;file&gt;</code> 的方法把暂存区的删除</p></li></ul><p><img src="http://pjas65wzi.bkt.clouddn.com\git_test%5C5.jpg" alt="img"></p><ul><li>上面的 <code>git add -A</code> -A 就是all，就是目录下所有文件加入暂存区</li></ul><h4 id="5-git的提交"><a href="#5-git的提交" class="headerlink" title="5.git的提交"></a>5.git的提交</h4><ul><li><code>git commit -m &quot;...&quot;</code>  git commit就是提交，-m 就是可以加备注，””里面写你要加的备注，告诉别人你干了什么</li></ul><p><img src="http://pjas65wzi.bkt.clouddn.com\git_test%5C8.jpg" alt="img"></p><h4 id="6-git到你的仓库"><a href="#6-git到你的仓库" class="headerlink" title="6.git到你的仓库"></a>6.git到你的仓库</h4><blockquote><p>为了显示，我重新创建一个存储库</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com\git_test%5C9.jpg" alt="img"></p><p><img src="http://pjas65wzi.bkt.clouddn.com\git_test%5C10.jpg" alt="img"></p><blockquote><p>1.<code>git remote add origin https://github.com/QGtiger/git_test.git</code>就是跟远程的github仓库创立链接，可以用户多个远程仓库,<code>origin</code> 是一个名字，意思是远程仓库，约定俗成的名字，约定俗成的东西就不建议修改</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com\git_test%5C11.jpg" alt="img"></p><blockquote><p>创立链接以后，我们就可以进行<code>git push</code>操作</p></blockquote><ul><li><code>git push -u origin master</code> <strong>origin</strong>就是远程仓库的名称，<strong>master</strong>就是远程仓库的分支名称，默认就是master,<strong>-u</strong> 第一次以后推送就只需要git push就行，<strong>注意</strong> 当你git push的时候可能会叫你输入github的账号和密码，你也可以ssh免密上传,下次有空在讲</li></ul><p><img src="http://pjas65wzi.bkt.clouddn.com\git_test%5C12.jpg" alt="img"></p><ul><li>登上github就可以看到变化</li></ul><p><img src="http://pjas65wzi.bkt.clouddn.com\git_test%5C13.jpg" alt="img"></p><h4 id="7-除了上述，我们本地创建git，然后，与远程仓库建立连接，我们也可以直接克隆下来"><a href="#7-除了上述，我们本地创建git，然后，与远程仓库建立连接，我们也可以直接克隆下来" class="headerlink" title="7.除了上述，我们本地创建git，然后，与远程仓库建立连接，我们也可以直接克隆下来"></a>7.除了上述，我们本地创建git，然后，与远程仓库建立连接，我们也可以直接克隆下来</h4><blockquote><p><code>git clone https://github.com/QGtiger/git_test.git</code>  远程克隆一个仓库 后面那个就是远程克隆的仓库链接,git会克隆下来，文件名是git_test,因为我本地当前目录下有git_test文件夹，你可以在后面加空格+文件夹名字</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com\git_test%5C14.jpg" alt="img"></p><blockquote><p>然后，我们可以简单查看目录，然后进行修改，<code>vi</code> 命令相当于进行文本文件的编辑,具体的使用方法你可以自行百度，这里不多详述</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com\git_test%5C15.jpg" alt="img"></p><p><img src="http://pjas65wzi.bkt.clouddn.com\git_test%5C16.jpg" alt="img"><br>检查是都修改成功<br><img src="http://pjas65wzi.bkt.clouddn.com\git_test%5C17.jpg" alt="img"></p><blockquote><p><code>git push</code> 推送到github<br><img src="http://pjas65wzi.bkt.clouddn.com\git_test%5C18.jpg" alt="img"></p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com\git_test%5C19.jpg" alt="img"></p><h4 id="git-pull-将远程仓库的拉到本地，相当于更新"><a href="#git-pull-将远程仓库的拉到本地，相当于更新" class="headerlink" title="git pull 将远程仓库的拉到本地，相当于更新"></a><code>git pull</code> 将远程仓库的拉到本地，相当于更新</h4><blockquote><p>当远程仓库被别人修改的，也就是前面的<code>git_test</code>git本地仓库，这个时候，你就可以切换到git_test 目录下进行下列操作 </p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com/git_test/20.jpg" alt="img"></p><p><br><br><br><br>今天的Git简单操作就讲到这里,So<br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git-的一些基本操作和讲解&quot;&gt;&lt;a href=&quot;#Git-的一些基本操作和讲解&quot; class=&quot;headerlink&quot; title=&quot;Git 的一些基本操作和讲解&quot;&gt;&lt;/a&gt;Git 的一些基本操作和讲解&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 [1]  Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git操作" scheme="http://yoursite.com/tags/Git%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+github搭建个人博客三</title>
    <link href="http://yoursite.com/2018/12/12/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%89/"/>
    <id>http://yoursite.com/2018/12/12/Hexo-github搭建个人博客三/</id>
    <published>2018-12-12T07:16:00.000Z</published>
    <updated>2018-12-12T08:19:47.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-github搭建个人博客"><a href="#Hexo-github搭建个人博客" class="headerlink" title="Hexo+github搭建个人博客"></a>Hexo+github搭建个人博客</h1><blockquote><p>前两个博客已经大概讲述了，hexo博客的搭建和基本的设置。今天，我就来教你如何写hexo搭建的博客。</p></blockquote><a id="more"></a><h2 id="1-原生方式新建文章"><a href="#1-原生方式新建文章" class="headerlink" title="1.原生方式新建文章"></a>1.原生方式新建文章</h2><blockquote><p>Hexo的项目结构是在网站根目录的source/_posts目录下存放你的博客文档，以.md文档格式存储，默认已存在一个hello-world.md文章,这个文章就是刚开始搭建博客展现出来的，相信你已经看过了。</p></blockquote><blockquote><p>新建文章可以用<code>hexo new &lt;title&gt;</code>,也可以指定一个layout属性，指定文章作为其他形式存放在别的目录，例如page新页面、draft草稿等。详细参考<a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">hexo|写作</a></p></blockquote><blockquote><p>然后可以直接去那个文件下,打开进行编辑，网上有很多这些markdown编辑器，如小书匠等等(支持在线)，我使用sublime Text的。基本截图如下：</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com/hexo31.jpg" alt="img"></p><p><img src="http://pjas65wzi.bkt.clouddn.com/hexo32.jpg" alt="img"></p><p><img src="http://pjas65wzi.bkt.clouddn.com/hexo33.jpg" alt="img"></p><blockquote><p>emmmm,至于如何写markdown格式的文章，emmmm，网上应该有相关的教程，我就不献丑，可以参看这几篇<a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">博客</a></p></blockquote><h2 id="2-使用Hexo-Admin插件"><a href="#2-使用Hexo-Admin插件" class="headerlink" title="2.使用Hexo Admin插件"></a>2.使用Hexo Admin插件</h2><blockquote><p><a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener">Hexo Admin</a> 是一个本地在线式文章管理器，可以用直观可视化的方式新建、编辑博客文章、page页面，添加标签、分类等，并且支持剪贴板粘贴图片（自动在source_images_目录中创建文件),是不是感觉很棒，接下来我就简单讲述下Hexo Admin插件的安装</p></blockquote><p>1.在你的hexo站点目录下，输入以下代码进行安装</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-admin</span></span><br></pre></td></tr></table></figure><p>2.下面你就可以启动服务，进行检查是否安装成功,<strong>注意</strong>，浏览器输入网址是:localhost:4000/admin,后面记得加<code>/admin</code>,4000是你的端口号，记得改成你的启动端口号</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo s -d</span></span><br></pre></td></tr></table></figure><p><img src="http://pjas65wzi.bkt.clouddn.com/hexo34.jpg" alt="img"></p><p><img src="http://pjas65wzi.bkt.clouddn.com/hexo35.jpg" alt="img"></p><p><br><br><br><br>以上就是本篇博客的全部内容了，祝你写博客愉快，So<br><br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-github搭建个人博客&quot;&gt;&lt;a href=&quot;#Hexo-github搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo+github搭建个人博客&quot;&gt;&lt;/a&gt;Hexo+github搭建个人博客&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;前两个博客已经大概讲述了，hexo博客的搭建和基本的设置。今天，我就来教你如何写hexo搭建的博客。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo搭建" scheme="http://yoursite.com/tags/Hexo%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>wordcloud词云</title>
    <link href="http://yoursite.com/2018/12/11/rdcloud%E8%AF%8D%E4%BA%91/"/>
    <id>http://yoursite.com/2018/12/11/rdcloud词云/</id>
    <published>2018-12-11T14:02:19.000Z</published>
    <updated>2018-12-11T14:06:04.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WordCloud中英文词云绘制"><a href="#WordCloud中英文词云绘制" class="headerlink" title="WordCloud中英文词云绘制"></a>WordCloud中英文词云绘制</h1><blockquote><p>摘要：当我们手上有一篇文档，比如小说、书籍、电影剧本，若想快速了解其主要内容，你这个时候就可以用到WordCloud词云图，显示主要的关键词(配合jieba.analyse更佳)。本博客将介绍常见的词云图绘制，以及Frequency频词云图。</p></blockquote><a id="more"></a><h5 id="首先，我们得准备好我们的文本文件"><a href="#首先，我们得准备好我们的文本文件" class="headerlink" title="首先，我们得准备好我们的文本文件"></a>首先，我们得准备好我们的文本文件</h5><blockquote><p>这里我就用我服务器上的<a href="http://39.108.219.55:8080/bkcontent?url=https://www.qu.la/book/746/10632452.html" target="_blank" rel="noopener">链接</a>文本,然后爬下来，当做测试文本。</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com/1.jpg" alt="截图"></p><ul><li>以下代码实现获取文本<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">content = requests.get(<span class="string">'http://39.108.219.55:8080/bkcontent?url=https://www.qu.la/book/746/10632452.html'</span>).text</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>获取文本后就是对着文本进行分析，这里我介绍是jieba模块的一个函数，<code>jieba.analyse.extract_tags()</code>,其中第一个参数是传进去的文本，<code>topK</code>是获取词频的最大词数，<code>allowPOS</code>是获取词频的词语类型，详情可查看这片<a href="https://blog.csdn.net/HHTNAN/article/details/77650128" target="_blank" rel="noopener">博客</a>,<code>withWeight</code>是 是否展示权重，返回的是频词和权重的元组列表。</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com/2.jpg" alt="img"></p><p><img src="http://pjas65wzi.bkt.clouddn.com/3.jpg" alt="img"></p><blockquote><p>利用的是<code>generate_from_text()</code>方法生成词云，传入的参数是以<code>空格</code>为间隔,所以基本代码实现如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">content = requests.get(<span class="string">'http://39.108.219.55:8080/bkcontent?url=https://www.qu.la/book/746/10632452.html'</span>).text</span><br><span class="line">tags = jieba.analyse.extract_tags(</span><br><span class="line">    content, topK=<span class="number">100</span>, allowPOS=(</span><br><span class="line">        <span class="string">'ns'</span>, <span class="string">'n'</span>, <span class="string">'vn'</span>, <span class="string">'v'</span>, <span class="string">'nr'</span>))</span><br><span class="line">contents = <span class="string">' '</span>.join(tags)</span><br><span class="line">print(contents)</span><br><span class="line">wc = WordCloud(</span><br><span class="line">    background_color=<span class="string">'white'</span>,</span><br><span class="line">    font_path=<span class="string">r'C:\Windows\font\kaiu.ttf'</span>,</span><br><span class="line">    width=<span class="number">800</span>,</span><br><span class="line">    height=<span class="number">400</span>,</span><br><span class="line">    margin=<span class="number">2</span>,</span><br><span class="line">    max_words=<span class="number">100</span>,</span><br><span class="line">    min_font_size=<span class="number">15</span>,</span><br><span class="line">    random_state=<span class="number">100</span>,</span><br><span class="line">    mode=<span class="string">'RGB'</span>,</span><br><span class="line">    repeat=<span class="keyword">False</span></span><br><span class="line">)</span><br><span class="line">wc.generate_from_text(contents)</span><br><span class="line">plt.imshow(wc)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://pjas65wzi.bkt.clouddn.com/4.jpg" alt="img"></p><blockquote><p>通过上面的词云图，你可能会有几个问题：</p><ul><li>可不可以换背景</li><li>词云图能不能换成其他的形状</li><li>有些词汇能不能去掉</li></ul></blockquote><blockquote><p>以上这些都是可以更改的，所以，接下来，我就先了解一下WordCloud的API参数及其它 一些方法</p></blockquote><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>font_path</td><td>字体的路径，英文不需要设置，中文需要</td></tr><tr><td>width</td><td>宽度，默认400</td></tr><tr><td>height</td><td>高度，默认200</td></tr><tr><td>margin</td><td>边缘，如2</td></tr><tr><td>ranks_only</td><td>…</td></tr><tr><td>mask</td><td>背景图形，如果想根据图片绘制，则需要设置</td></tr><tr><td>scale</td><td>缩放</td></tr><tr><td>max_words</td><td>最多显示词汇</td></tr><tr><td>min_font_size</td><td>最小字号</td></tr><tr><td>stopwords</td><td>停止词的设置</td></tr><tr><td>random_state</td><td>可以理解为词汇的杂乱度</td></tr><tr><td>background_color</td><td>背景颜色，可以16进制</td></tr><tr><td>colormap</td><td>matplotlib 色图，可更改名称进而更改整体风格</td></tr><tr><td>repeat</td><td>默认False</td></tr></tbody></table><p>关于更详细的用法，您可以去官网了解</p><h3 id="图片背景的词云实现-白底"><a href="#图片背景的词云实现-白底" class="headerlink" title="图片背景的词云实现(白底)"></a>图片背景的词云实现(白底)</h3><ul><li><p>图片展示<br><img src="http://pjas65wzi.bkt.clouddn.com/5.jpg" width="300"></p></li><li><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud,STOPWORDS,ImageColorGenerator</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">content = requests.get(<span class="string">'http://39.108.219.55:8080/bkcontent?url=https://www.qu.la/book/746/10632452.html'</span>).text</span><br><span class="line">tags = jieba.analyse.extract_tags(</span><br><span class="line">    content, topK=<span class="number">40</span>, allowPOS=(</span><br><span class="line">        <span class="string">'ns'</span>, <span class="string">'n'</span>, <span class="string">'vn'</span>, <span class="string">'v'</span>, <span class="string">'nr'</span>))</span><br><span class="line">contents = <span class="string">' '</span>.join(tags)</span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">background_image = np.array(Image.open(<span class="string">'5.JPG'</span>))</span><br><span class="line"><span class="comment">#提取背景图片的颜色</span></span><br><span class="line">img_color = ImageColorGenerator(background_image)</span><br><span class="line"><span class="comment">#设置停止词</span></span><br><span class="line">stopword = set(STOPWORDS)</span><br><span class="line">wc = WordCloud(</span><br><span class="line">    mask=background_image,</span><br><span class="line">    font_path=<span class="string">r'C:\Windows\font\kaiu.ttf'</span>,</span><br><span class="line">    background_color=<span class="string">'white'</span>,</span><br><span class="line">    width=<span class="number">800</span>,</span><br><span class="line">    height=<span class="number">400</span>,</span><br><span class="line">    margin=<span class="number">2</span>,</span><br><span class="line">    max_words=<span class="number">100</span>,</span><br><span class="line">    min_font_size=<span class="number">15</span>,</span><br><span class="line">    random_state=<span class="number">100</span>,</span><br><span class="line">    repeat=<span class="keyword">False</span></span><br><span class="line">)</span><br><span class="line">wc.generate_from_text(contents) <span class="comment"># 等价于wc.gernerate(contents)</span></span><br><span class="line"><span class="comment"># #根据图片色设置背景色</span></span><br><span class="line"><span class="comment"># wc.recolor(color_func=img_color)</span></span><br><span class="line">wc.to_file(<span class="string">'yoona.jpg'</span>)</span><br><span class="line"><span class="comment">#显示图片</span></span><br><span class="line">plt.imshow(wc)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>截图 ,emm基本实现，可能是图片的质量不行<br><img src="http://pjas65wzi.bkt.clouddn.com/yoona.jpg" width="300"><br><br><br><br>Just have fun…</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;WordCloud中英文词云绘制&quot;&gt;&lt;a href=&quot;#WordCloud中英文词云绘制&quot; class=&quot;headerlink&quot; title=&quot;WordCloud中英文词云绘制&quot;&gt;&lt;/a&gt;WordCloud中英文词云绘制&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;摘要：当我们手上有一篇文档，比如小说、书籍、电影剧本，若想快速了解其主要内容，你这个时候就可以用到WordCloud词云图，显示主要的关键词(配合jieba.analyse更佳)。本博客将介绍常见的词云图绘制，以及Frequency频词云图。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="wordcloud" scheme="http://yoursite.com/tags/wordcloud/"/>
    
  </entry>
  
  <entry>
    <title>MySql数据库操作</title>
    <link href="http://yoursite.com/2018/12/07/MySql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/12/07/MySql数据库操作/</id>
    <published>2018-12-07T10:04:11.000Z</published>
    <updated>2018-12-12T07:55:39.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySql数据库的基本操作"><a href="#MySql数据库的基本操作" class="headerlink" title="MySql数据库的基本操作"></a>MySql数据库的基本操作</h1><blockquote><p>MySql是关系型数据，关系型数据库是基于关系模型的数据库，而关系模型是通过二维表来保存的，所以它的存储方式就是行列组成的表，每一列是一个字段，每一行是一条记录。<br><br><br>在Python2中连接MySql的库大多是MySQLdb，但是这个库在Python3中不在支持，所以这里我推荐是PyMySQL。相信PyMySQL的安装大家都懂，只需要<code>pip install pymysql</code>下载到本地，然后安装，这里就不详述了。=.=</p></blockquote><a id="more"></a><h3 id="1-数据库的连接等简单操作"><a href="#1-数据库的连接等简单操作" class="headerlink" title="1.数据库的连接等简单操作"></a>1.数据库的连接等简单操作</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(</span><br><span class="line">    <span class="attribute">host</span>=<span class="string">'localhost'</span>, #本地就是localhost或者127.0.0.1</span><br><span class="line">    <span class="attribute">user</span>=<span class="string">'root'</span>, #你的MySql登录用户名</span><br><span class="line">    <span class="attribute">password</span>=<span class="string">''</span>, #登录密码</span><br><span class="line">    <span class="attribute">port</span>=3306  #默认端口是3306</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><blockquote><p>取数据库的游标</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cursor</span> = db.<span class="built_in">cursor</span>()</span><br><span class="line"><span class="built_in">cursor</span>.<span class="keyword">execute</span>(<span class="string">'SELECT VERSION()'</span>) #查看数据库的版本号 注意<span class="keyword">execute</span>就是执行mysql语句</span><br></pre></td></tr></table></figure><blockquote><p>取数据库的版本</p></blockquote><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> = cursor.fetchone() #fetchone()就是获取第一条数据，也就是上面的那个版本号</span></span><br><span class="line"><span class="title">print</span>('<span class="type">Database</span> version:' + <span class="class"><span class="keyword">data</span>[0])</span></span><br></pre></td></tr></table></figure><blockquote><p>建了一个名为spider 的数据库，并且默认编码是utf-8</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute('<span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> spider <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8<span class="string">') #default character set utf8 注意没有'</span>-<span class="string">'哦</span></span><br></pre></td></tr></table></figure><blockquote><p>选中数据库</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cursor</span>.<span class="keyword">execute</span>(<span class="string">'USE spider'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>建表</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sql = '<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> students (<span class="keyword">id</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,<span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">25</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span>,age <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>))<span class="string">'</span></span><br><span class="line"><span class="string">cursor.execute(sql)</span></span><br></pre></td></tr></table></figure><p>这里就是成功截图</p><p><img src="http://pjas65wzi.bkt.clouddn.com/mysql/13.jpg" alt="img"></p><p>emmm，我用的是mysql的一个可视化工具<code>navicat</code>,你可以到这来<a href="https://pan.baidu.com/s/13BDqu8idklKPbYO1HPO5TQ" target="_blank" rel="noopener">下载</a> 密码: 5w3y<br>下面就是真正的mysql基本操作了</p><h3 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2.插入数据"></a>2.插入数据</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">id</span> = <span class="string">'2016210405068'</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">'言语'</span></span><br><span class="line"><span class="attr">age</span> = <span class="number">18</span></span><br><span class="line"><span class="attr">sql</span> = <span class="string">'INSERT INTO students(id,name,age) values(%s,%s,%s)'</span> #sql语句</span><br></pre></td></tr></table></figure><blockquote><p>插入数据的标准写法</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql, (id, name, age))</span><br><span class="line">    <span class="comment"># 需要执行db对象的commit()方法才能实现数据的插入，对于数据的插入、更新、删除操作都需要调用</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'Sucessful insert...'</span>)</span><br><span class="line">    db.commit()</span><br><span class="line">except <span class="keyword">Exception</span> <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">print</span>(e)</span><br><span class="line">    <span class="comment"># 加了一层异常处理，如果执行失败，则调用rollback()函数来执行数据的回滚，相当于什么都没有发生</span></span><br><span class="line">    db.rollback()</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong> 在很多情况下我们要达到的效果是插入方法无需改动，只需要传入一个字典就行，比如构造这个字典：</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'2016210405068'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'lightfish'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line">table = <span class="string">'students'</span> #数据库表</span><br><span class="line"><span class="built_in">keys</span> = <span class="string">','</span>.<span class="keyword">join</span>(data.<span class="built_in">keys</span>())  # str类型</span><br><span class="line"><span class="built_in">values</span> = <span class="string">','</span>.<span class="keyword">join</span>([<span class="string">'%s'</span>] * <span class="built_in">len</span>(data))</span><br><span class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;key&#125;) VALUES(&#123;values&#125;)'</span>.format(table=table, key=<span class="built_in">keys</span>, <span class="built_in">values</span>=<span class="built_in">values</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql, tuple(data.<span class="built_in">values</span>)): #元组类型</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">'Sucessful insert'</span>)</span><br><span class="line">        db.commit</span><br><span class="line">except Exception <span class="keyword">as</span> <span class="keyword">e</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">e</span>)</span><br><span class="line">    db.rollback()</span><br></pre></td></tr></table></figure><h3 id="更改数据"><a href="#更改数据" class="headerlink" title="更改数据"></a>更改数据</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sql = <span class="string">'UPDATE students SET age=%s WHERE name=%s'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql, (<span class="number">22</span>, <span class="string">'Bob'</span>))</span><br><span class="line">    db.commit()</span><br><span class="line">except Exception <span class="keyword">as</span> <span class="keyword">e</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">e</span>)</span><br><span class="line">    db.rollback()</span><br></pre></td></tr></table></figure><blockquote><h4 id="注意-下面这个很重要"><a href="#注意-下面这个很重要" class="headerlink" title="注意 下面这个很重要"></a><strong>注意</strong> 下面这个很重要</h4></blockquote><blockquote><p>更新数据的时候，我们关心会不会出现重复的问题。所以我们这里可以再实现一种去重的方法，如果数据存在，则更新数据；否则插入数据</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'2016210405068'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'辰东'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">33</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line"><span class="built_in">keys</span> = <span class="string">','</span>.<span class="keyword">join</span>(data.<span class="built_in">keys</span>())</span><br><span class="line"><span class="built_in">values</span> = <span class="string">','</span>.<span class="keyword">join</span>([<span class="string">'%s'</span>] * <span class="built_in">len</span>(data))</span><br><span class="line"></span><br><span class="line"># <span class="keyword">on</span> duplicate key <span class="keyword">update</span></span><br><span class="line"></span><br><span class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;) ON DUPLICATE KEY UPDATE'</span>.format(table=table, <span class="built_in">keys</span>=<span class="built_in">keys</span>,</span><br><span class="line">                                                                                     <span class="built_in">values</span>=<span class="built_in">values</span>)</span><br><span class="line"><span class="keyword">update</span> = <span class="string">','</span>.<span class="keyword">join</span>([<span class="string">' &#123;key&#125;=%s'</span>.format(key=key) <span class="keyword">for</span> key in data.<span class="built_in">keys</span>()])</span><br><span class="line">sql += <span class="keyword">update</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql, tuple(data.<span class="built_in">values</span>()) * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'Sucessfull insert...'</span>)</span><br><span class="line">    db.commit()</span><br><span class="line">except Exception <span class="keyword">as</span> <span class="keyword">e</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">e</span>)</span><br><span class="line">    db.rollback()</span><br></pre></td></tr></table></figure><blockquote><p>完整的SQL语句是<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students(<span class="keyword">id</span>, <span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (%s, %s, %s) <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> <span class="keyword">id</span> = %s, <span class="keyword">name</span> = %s, age = %s</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><blockquote><p>删除数据就相对简单了直接用<code>DELETE</code>，但是依然要用<code>commit()</code>函数才能生效</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">table</span> = <span class="string">'students'</span></span><br><span class="line">conditions = <span class="string">'age&gt;20'</span></span><br><span class="line">sql = <span class="string">'DELETE FROM &#123;table&#125; WHERE &#123;condition&#125;'</span>.<span class="built_in">format</span>(<span class="built_in">table</span>=<span class="built_in">table</span>, condition=conditions)</span><br><span class="line">try:</span><br><span class="line">    cursor.<span class="built_in">execute</span>(sql)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Delete sucessfull...'</span>)</span><br><span class="line">    db.commit()</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    db.rollback()</span><br></pre></td></tr></table></figure><h3 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h3><blockquote><p><strong>注意</strong><code>fetch</code>方法内部实现有一个偏移，开始的<code>fetchone()</code>就获取了一条数据，所以后面的<code>fetchall()</code>只获取了总数减一条，因此我推荐后面一种方法，用<code>while</code>方法加<code>fetchone()</code>,<code>fetchall()</code>会将结果以元组的形式全部返回，如果数据很大就占用的开销很大。</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql)</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'Counts: '</span>+<span class="built_in">cursor</span>.rowcount)</span><br><span class="line">    one = <span class="built_in">cursor</span>.fetchone()</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'One: '</span>+one)</span><br><span class="line">    results = <span class="built_in">cursor</span>.fetchall()</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'Results: '</span>+results)</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'The type of results: '</span>+<span class="built_in">type</span>(results))</span><br><span class="line">    <span class="keyword">for</span> row in result<span class="variable">s:</span></span><br><span class="line">        <span class="keyword">print</span>(row)</span><br><span class="line">except Exception <span class="keyword">as</span> <span class="keyword">e</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">e</span>)</span><br></pre></td></tr></table></figure><blockquote><p>第二种方法</p></blockquote><pre><code>try:    cursor.execute(sql)    print(&apos;Counts: &apos;+cursor.rowcount)    one = cursor.fetchone() #one是一个元组    while one:        print(&apos;Row: &apos;,one)        one = cursor.fetchone()except Exception as e:    print(e)</code></pre><p><br><br><br><br>以上就是Mysql的基本操作，So<br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySql数据库的基本操作&quot;&gt;&lt;a href=&quot;#MySql数据库的基本操作&quot; class=&quot;headerlink&quot; title=&quot;MySql数据库的基本操作&quot;&gt;&lt;/a&gt;MySql数据库的基本操作&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;MySql是关系型数据，关系型数据库是基于关系模型的数据库，而关系模型是通过二维表来保存的，所以它的存储方式就是行列组成的表，每一列是一个字段，每一行是一条记录。&lt;br&gt;&lt;br&gt;&lt;br&gt;在Python2中连接MySql的库大多是MySQLdb，但是这个库在Python3中不在支持，所以这里我推荐是PyMySQL。相信PyMySQL的安装大家都懂，只需要&lt;code&gt;pip install pymysql&lt;/code&gt;下载到本地，然后安装，这里就不详述了。=.=&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="MySql" scheme="http://yoursite.com/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB数据库基本操作</title>
    <link href="http://yoursite.com/2018/12/07/MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/12/07/MongoDB数据库基本操作/</id>
    <published>2018-12-07T09:11:04.000Z</published>
    <updated>2018-12-12T07:59:42.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB的操作"><a href="#MongoDB的操作" class="headerlink" title="MongoDB的操作"></a>MongoDB的操作</h1><h4 id="1-连接MongoDB"><a href="#1-连接MongoDB" class="headerlink" title="1.连接MongoDB"></a>1.连接MongoDB</h4><blockquote><p>Python 想要连接MongoDB需要安装pymongo，emm，安装方法可以在cmd下，pip安装(<code>pip install pymongo</code>)<br>安装完了后你就可以用一下代码连接MongoDB</p></blockquote><a id="more"></a><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line"><span class="keyword">client</span> = pymongo.MongoClient(host=<span class="string">'localhost'</span>,port=<span class="string">'27017'</span>) <span class="meta">#默认端口27017</span></span><br><span class="line">db = <span class="keyword">client</span>[<span class="string">'mydb'</span>] <span class="meta">#指定mydb这个数据库，如果没有会自动创建</span></span><br><span class="line">collection = db[<span class="string">'students'</span>]  <span class="meta">#指定students这个集合，如果没有会自动创建一个</span></span><br></pre></td></tr></table></figure><p><img src="http://pjas65wzi.bkt.clouddn.com/mongodb/8.jpg" alt="img"></p><h4 id="2-MongoDB数据库，数据的插入"><a href="#2-MongoDB数据库，数据的插入" class="headerlink" title="2.MongoDB数据库，数据的插入"></a>2.MongoDB数据库，数据的插入</h4><blockquote><p>插入数据，注意是已字典的形式。比如插入以下数据</p></blockquote><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">student=&#123;</span><br><span class="line">  <span class="string">'id'</span>:<span class="number">20180101</span>,</span><br><span class="line">  <span class="string">'name'</span>:<span class="string">'Jack'</span>,</span><br><span class="line">  <span class="string">'age'</span>:<span class="number">18</span>,</span><br><span class="line">  <span class="string">'gender'</span>:<span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">用 collection.<span class="keyword">insert</span>(student)</span><br></pre></td></tr></table></figure><p>如下图<br><img src="http://pjas65wzi.bkt.clouddn.com/mongodb/9.jpg" alt="img"></p><blockquote><p>最新官方推荐<code>insert_one()</code>插入一条数据，返回的不同，是InsertOneResult对象<br>在MongoDB中都有一个_id属性来唯一标识，如果没有就会自动产生一个ObjectId类型的_id属性，返回_id值<br>当然也可以一次性插入多条数据  最新官方推荐 <code>insert_many()</code>来插入多条数据,或者依旧用<code>insert</code>,<code>collection.insert([student1,student2])</code>,注意是列表形式。</p></blockquote><h4 id="3-MongoDB数据库的查询"><a href="#3-MongoDB数据库的查询" class="headerlink" title="3.MongoDB数据库的查询"></a>3.MongoDB数据库的查询</h4><blockquote><p>我们可以用<code>find_one()</code>或者<code>find()</code>方法来进行查询，find()返回一个生成器对象<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">result</span> = collection.find_one(&#123;<span class="string">'name'</span>:<span class="string">'Mike'</span>&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>返回的是<code>字典类型</code>  查询不存在时，则会返回<code>none</code> 记住哦： 是字典类型<br>比如你想查询age等于20的若干数据，你会用什么呢<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">results = collection.<span class="built_in">find</span>(&#123;<span class="string">'age'</span>:<span class="number">20</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">  <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查询大于20呢<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">results = collection.<span class="built_in">find</span>(&#123;<span class="string">'age'</span>:&#123;<span class="string">'$gt'</span>: <span class="number">20</span>&#125;&#125;)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">  <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这里查询的条件键值已经不是单纯的数字，而是一个字典，比较符号<code>$gt</code> 大于<br>下面是这些比较符号的总结</p></blockquote><table><thead><tr><th>符号</th><th>含 义</th><th>实 例</th></tr></thead><tbody><tr><td>$gt</td><td>大于</td><td>{‘age’:{‘$gt’:20}}</td></tr><tr><td>$lt</td><td>小于</td><td>{‘age’:{‘$lt’:20}}</td></tr><tr><td>$gte</td><td>&gt;=</td><td>{‘age’:{‘$gte’:20}}</td></tr><tr><td>$lte</td><td>&lt;=</td><td>{‘age’:{‘$lte’:20}}</td></tr><tr><td>$ne</td><td>!=</td><td>{‘age’:{‘$ne’:20}}</td></tr><tr><td>$in</td><td>在范围内</td><td>{‘age’:{‘$in’:[20,23]}}</td></tr><tr><td>$nin</td><td>不在范围内</td><td>{‘age’:{‘$nin’:[20,23]}}</td></tr></tbody></table><blockquote><p>还支持正则表达式，如查询以’M’开头名字的数据</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">results</span> = collection.find(&#123;<span class="string">'name'</span>:&#123;<span class="string">'$regex'</span>:<span class="string">'^M.*'</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>还有简单的功能符号</p></blockquote><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$exists   属性是否存在    &#123;<span class="string">'name'</span>:&#123;<span class="string">'$exists'</span>:True&#125;&#125;   name属性存在</span><br><span class="line">$where    高级条件查询    &#123;<span class="string">'$where'</span>:<span class="string">'obj.fans_counts == obj.follows_counts'</span>&#125;   自身粉丝数等于关注数</span><br></pre></td></tr></table></figure><h4 id="4-计数"><a href="#4-计数" class="headerlink" title="4.计数"></a>4.计数</h4><ul><li><p>要统计查询结果有多少条数据，可以用<code>count()</code>方法，比如统计有多少数据</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">count</span> = collection.<span class="keyword">find</span>().<span class="keyword">count</span>()</span><br></pre></td></tr></table></figure></li><li><p>或者统计符合某种条件的数据数,例如统计名字以a开头的</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">count</span> = collection.<span class="keyword">find</span>(&#123;<span class="string">'name'</span>:&#123;<span class="string">'$regex'</span>:<span class="string">'^a.*'</span>&#125;&#125;).<span class="keyword">count</span>()</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-排序"><a href="#5-排序" class="headerlink" title="5.排序"></a>5.排序</h4><blockquote><p>排序，直接调用<code>sort()</code>方法，并在其中传入排序的字段以及升降标志<br><code>pymongo.ASCENDING</code> 升序  <code>pymongo.DESCENDING</code>  降序<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">results  = collection.find().<span class="built_in">sort</span>(<span class="string">'name'</span>,pymongo.ASCENDING)</span><br><span class="line">print(<span class="built_in">result</span>[<span class="string">'name'</span>] <span class="keyword">for</span> <span class="built_in">result</span> <span class="keyword">in</span> results)</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="6-偏移"><a href="#6-偏移" class="headerlink" title="6.偏移"></a>6.偏移</h4><blockquote><p>在某些情况，我们只需要提取其中的几个元素，我就可以调用<code>skip()</code>方法，示例如下:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">results = collection.<span class="keyword">find</span>().<span class="keyword">sort</span>(<span class="string">'name'</span>,pymongo.DESCENDING).skip(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这样我们就可以跳过前两个<br>另外，我们还可以用<code>limit()</code>方法来指定要去的个数,只取两个数据<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">results = collection.<span class="keyword">find</span>(&#123;<span class="string">'age'</span>:&#123;<span class="string">'$gt'</span>:<span class="number">20</span>&#125;&#125;).<span class="keyword">sort</span>(<span class="string">'name'</span>,pymongo.ASCENDING).skip(<span class="number">2</span>).limit(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="7-数据的更新"><a href="#7-数据的更新" class="headerlink" title="7.数据的更新"></a>7.数据的更新</h4><blockquote><p>对于数据的更新，我们可以用<code>upodate()</code>方法<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">condition=&#123;'name':'Mike'&#125;</span><br><span class="line">student = collection.find_one(condition)</span><br><span class="line">student['age'] = 25</span><br><span class="line">result = collection.update(condition,student) <span class="comment">#update()方法是将原条件和修改后的数据传入</span></span><br><span class="line">print(result)  <span class="comment">#返回的是字典类型</span></span><br></pre></td></tr></table></figure></p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com/mongodb/10.jpg" alt="img"></p><blockquote><p>官方推荐 <code>update_one()</code>但是如果使用<code>update_one()</code>方法，第二个参数就不能传入字典，应该用<code>$</code>类型操作符作为字典的键名,示例如下：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">result</span> = collection.update_one(condition,&#123;<span class="string">'$set'</span>:student&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com/mongodb/11.jpg" alt="img"></p><h4 id="8-数据的删除"><a href="#8-数据的删除" class="headerlink" title="8.数据的删除"></a>8.数据的删除</h4><blockquote><p>删除的话，可以直接用<code>remove()</code>方法，符合条件的数据全部删除<br>这里依然推荐两个官方推荐方法  <code>delete_one()</code>和 <code>elete_many()</code><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">results = collection.delete_many(&#123;<span class="string">'age'</span>:&#123;<span class="string">'$gt'</span>:<span class="number">20</span>&#125;&#125;)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(results)</span></span>  #返回的字典形式</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(results.deleted_count)</span></span>  #删除的个数</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com/mongodb/12.jpg" alt="img"><br>此时也只有一条数据</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MongoDB的操作&quot;&gt;&lt;a href=&quot;#MongoDB的操作&quot; class=&quot;headerlink&quot; title=&quot;MongoDB的操作&quot;&gt;&lt;/a&gt;MongoDB的操作&lt;/h1&gt;&lt;h4 id=&quot;1-连接MongoDB&quot;&gt;&lt;a href=&quot;#1-连接MongoDB&quot; class=&quot;headerlink&quot; title=&quot;1.连接MongoDB&quot;&gt;&lt;/a&gt;1.连接MongoDB&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Python 想要连接MongoDB需要安装pymongo，emm，安装方法可以在cmd下，pip安装(&lt;code&gt;pip install pymongo&lt;/code&gt;)&lt;br&gt;安装完了后你就可以用一下代码连接MongoDB&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB数据库</title>
    <link href="http://yoursite.com/2018/12/06/ongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2018/12/06/ongoDB数据库/</id>
    <published>2018-12-06T12:58:18.000Z</published>
    <updated>2018-12-12T07:58:00.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="非关系型数据库MongoDB的安装"><a href="#非关系型数据库MongoDB的安装" class="headerlink" title="非关系型数据库MongoDB的安装"></a>非关系型数据库MongoDB的安装</h1><blockquote><p>MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。</p></blockquote><a id="more"></a><h3 id="1-数据库的下载和安装"><a href="#1-数据库的下载和安装" class="headerlink" title="1.数据库的下载和安装"></a>1.数据库的下载和安装</h3><blockquote><p>直接去<a href="https://www.mongodb.com/" target="_blank" rel="noopener">mongodb官网</a>进行下载</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com/mongodb/1.jpg" alt="img"></p><blockquote><p>下载完成以后，双击它开始安装，指定安装路径，例如我指定的安装路径是E:\mongodb,如图</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com/mongodb/2.jpg" alt="img"></p><blockquote><p>安装完成之后，进入MongoDB的安装目录，在bin同目录下新建文件夹data，如上图<br>然后进入data文件夹，新建文件夹db来存储数据目录如图</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com/mongodb/3.jpg" alt="img"></p><blockquote><p>然后进入到之前bin目录下(是bin目录下哦，不是同bin目录)，打开shift+右键打开命令行，如图(emm，我用的是cmder，蛮好的，有空出个博客):</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com/mongodb/4.jpg" alt="img"></p><blockquote><p>输入以下代码：</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath E:<span class="regexp">//m</span>ongodb<span class="regexp">/data/</span>db  <span class="comment">#后面这个目录就是你前面创建的data/db目录</span></span><br></pre></td></tr></table></figure><blockquote><p>运行之后，会出现一些输出信息，看到下图就是你启动了mongodb服务</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com/mongodb/5.jpg" alt="mongodb"></p><blockquote><p>然后点击bin目录下的<code>mongo.exe</code>，就进入了mongodb界面，输入show dbs；看看里面的数据库，基本就成功了</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com/mongodb/6.jpg" alt="img"></p><p><img src="/img/mongodb/7.jpg" alt="img"></p><h3 id="2-可视化工具Robo-3T的下载和安装"><a href="#2-可视化工具Robo-3T的下载和安装" class="headerlink" title="2.可视化工具Robo 3T的下载和安装"></a>2.可视化工具Robo 3T的下载和安装</h3><blockquote><p>Robo 3T是针对MongoDB的的可视化工具，由于篇幅问题，可以看这篇<a href="https://blog.csdn.net/qq_36070288/article/details/73822101" target="_blank" rel="noopener">博客</a></p></blockquote><p><br><br><br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;非关系型数据库MongoDB的安装&quot;&gt;&lt;a href=&quot;#非关系型数据库MongoDB的安装&quot; class=&quot;headerlink&quot; title=&quot;非关系型数据库MongoDB的安装&quot;&gt;&lt;/a&gt;非关系型数据库MongoDB的安装&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;MongoDB是由C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对象，它的字段值可以包含其他文档、数组及文档数组，非常灵活。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Python入门问题二</title>
    <link href="http://yoursite.com/2018/12/06/Python%E5%85%A5%E9%97%A8%E9%97%AE%E9%A2%98%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/12/06/Python入门问题二/</id>
    <published>2018-12-05T16:25:48.000Z</published>
    <updated>2018-12-06T12:51:35.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python入门问题二"><a href="#Python入门问题二" class="headerlink" title="Python入门问题二"></a>Python入门问题二</h1><h3 id="1-简述Django的ORM"><a href="#1-简述Django的ORM" class="headerlink" title="1.简述Django的ORM"></a>1.简述Django的ORM</h3><blockquote><p>ORM，全拼Object-Relation Mapping，意为对象-关系映射实现了数据模型与数据库的解耦，通过简单的配置就可以轻松跟换数据库，而不需要修改代码只需要面向对象编程，ORM操作本质上会根据对接的数据库引擎，翻译成相对应的sql语句，所有使用Django开发的项目无需关系程序底层使用的是MySql、Oracle、sqlite…，如果数据库迁移，只需要更换Django的数据库引擎就好了</p></blockquote><a id="more"></a><h3 id="2-一行代码展开二维列表"><a href="#2-一行代码展开二维列表" class="headerlink" title="2.一行代码展开二维列表"></a>2.一行代码展开二维列表</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"><span class="selector-tag">a</span> = [[np<span class="selector-class">.random</span><span class="selector-class">.randint</span>(<span class="number">1</span>,<span class="number">10</span>),np<span class="selector-class">.random</span><span class="selector-class">.randint</span>(<span class="number">1</span>,<span class="number">10</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(a)</span></span></span><br><span class="line">x = [j <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="selector-tag">a</span> <span class="keyword">for</span> j <span class="keyword">in</span> i]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(x)</span></span></span><br></pre></td></tr></table></figure><p><img src="https://lightfisher.github.io/img/Python_question/26.jpg" alt="img"></p><ul><li>将列表装换成numpy矩阵，通过numpy的flatten()方法<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as <span class="built_in">np</span></span><br><span class="line">a = [[<span class="built_in">np</span>.<span class="built_in">random</span>.randint(<span class="number">1</span>,<span class="number">10</span>),<span class="built_in">np</span>.<span class="built_in">random</span>.randint(<span class="number">1</span>,<span class="number">10</span>)] <span class="keyword">for</span> <span class="symbol">_</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">np</span>.<span class="built_in">array</span>(a).<span class="built_in">flatten</span>().tolist())</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://lightfisher.github.io/img/Python_question/27.jpg" alt="img"></p><h3 id="3-举例说明异常模块中try，except，else，finally的相关意义"><a href="#3-举例说明异常模块中try，except，else，finally的相关意义" class="headerlink" title="3.举例说明异常模块中try，except，else，finally的相关意义"></a>3.举例说明异常模块中try，except，else，finally的相关意义</h3><ul><li>try…except…else 没有获取异常，执行else语句</li><li>try…except…finally 不管有没有获取异常都会执行finally语句</li></ul><h3 id="4-举例说明zip函数的用法"><a href="#4-举例说明zip函数的用法" class="headerlink" title="4.举例说明zip函数的用法"></a>4.举例说明zip函数的用法</h3><ul><li>zip()函数在运算的时候，会以一个或多个序列(可迭代对象)作为参数，返回一个元组的列表。同时将这些序列中并排的元素配对</li><li>zip()参数可以接受任何类型的序列，同时还可以有两个以上的参数；当传入参数不等时，zip能够自动以最短序列长度为准进行截取，并获得元组</li></ul><p><img src="https://lightfisher.github.io/img/Python_question/28.jpg" alt="zip"></p><h3 id="5-列出常见的状态吗和意义"><a href="#5-列出常见的状态吗和意义" class="headerlink" title="5.列出常见的状态吗和意义"></a>5.列出常见的状态吗和意义</h3><ul><li><code>200</code> <code>OK</code> 请求正常处理完毕</li><li><code>204</code> <code>No Content</code> 请求成功处理，没有实体的主体返回</li><li><code>206</code> <code>Partial Content</code> GET范围请求已成功处理</li><li><code>301</code> <code>Moved Permanently</code> 永久重定向，资源已永久分配新URL</li><li><code>302</code> <code>Found</code> 临时重定向，资源已临时分配新URL</li><li><code>303</code> <code>See Other</code> 临时重定向，期望使用GET定向获取</li><li><code>304</code> <code>Not Modified</code> 发送的附带条件不足请求为满足</li><li><code>307</code> <code>Temporary Redirect</code> 临时重定向，POST不会变成GET</li><li><code>400</code> <code>Bad Request</code> 请求报文错误或参数不足</li><li><code>401</code> <code>Unauthorized</code> 需要通过HTTP认证，或认证失败</li><li><code>403</code> <code>Forbidden</code> 请求资源被拒绝</li><li><code>404</code> <code>Not Found</code> 无法找到请求资源(服务器无法拒绝)</li><li><code>500</code> <code>Internal Server Error</code> 服务器故障或Web应用故障</li><li><code>503</code> <code>Service Unavailable</code> 服务器超负载或停机维修</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python入门问题二&quot;&gt;&lt;a href=&quot;#Python入门问题二&quot; class=&quot;headerlink&quot; title=&quot;Python入门问题二&quot;&gt;&lt;/a&gt;Python入门问题二&lt;/h1&gt;&lt;h3 id=&quot;1-简述Django的ORM&quot;&gt;&lt;a href=&quot;#1-简述Django的ORM&quot; class=&quot;headerlink&quot; title=&quot;1.简述Django的ORM&quot;&gt;&lt;/a&gt;1.简述Django的ORM&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;ORM，全拼Object-Relation Mapping，意为对象-关系映射实现了数据模型与数据库的解耦，通过简单的配置就可以轻松跟换数据库，而不需要修改代码只需要面向对象编程，ORM操作本质上会根据对接的数据库引擎，翻译成相对应的sql语句，所有使用Django开发的项目无需关系程序底层使用的是MySql、Oracle、sqlite…，如果数据库迁移，只需要更换Django的数据库引擎就好了&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+github搭建个人博客二</title>
    <link href="http://yoursite.com/2018/12/05/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/12/05/Hexo-github搭建个人博客二/</id>
    <published>2018-12-05T15:22:18.000Z</published>
    <updated>2018-12-12T08:08:43.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-github搭建个人博客"><a href="#Hexo-github搭建个人博客" class="headerlink" title="Hexo+github搭建个人博客"></a>Hexo+github搭建个人博客</h1><h4 id="头像的设置和-yilia-主题的安装和简单配置"><a href="#头像的设置和-yilia-主题的安装和简单配置" class="headerlink" title="头像的设置和 yilia 主题的安装和简单配置"></a>头像的设置和 <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a> 主题的安装和简单配置</h4><a id="more"></a><ul><li>今天就来写写如何让你的博客更像一个博客</li></ul><h5 id="1-安装主题"><a href="#1-安装主题" class="headerlink" title="1.安装主题"></a>1.安装主题</h5><p>第一步当然是安装主题啦，相信在官方文档中也有详细的记录，我就简单总结下：</p><blockquote><p>在你的博客下输入以下代码进行安装</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><blockquote><p>然后修改站点文件下的<code>_config.yml</code>文件(用文本程序打开就行了，notepad++、sublime等)，对其中的<code>theme:</code>属性修改成我们的<code>yilia</code>,如下图：</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/1.jpg" alt="theme"></p><p>上图的Hexo就是我创建的博客目录，介个<code>_config.yml</code>就是这个博客的配置文件，emmmm，才想起来我应该先讲这个配置文件的，该你的博客名等等就在这里，我马上讲。然后你现在<code>hexo g</code>一下，再启动你的hexo服务看看<code>hexo s</code>。</p><blockquote><p><strong>注意:</strong>对了，你第一次运行的时候应该会出现一个错误，就是那个显示全部文章的目录会显示不出来，但它会显示解决方案，我就不献丑了，成功截图如下：</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/2.jpg" alt="yilia"></p><p><img src="http://lightfisher.github.io/img/hexo2/17.jpg" alt="img"></p><p>相信你已经完成了我们的主题成就，如果没有，出门后拐。<br>成功截图如下，emmm，如果你发现，你怎么没有头像，没有那个好看的动漫等等，emm，莫慌，这是我添加了其他的第三方脚本才这样，后面会讲。</p><h5 id="2-站点配置文件的最最最基本讲解"><a href="#2-站点配置文件的最最最基本讲解" class="headerlink" title="2.站点配置文件的最最最基本讲解"></a>2.站点配置文件的最最最基本讲解</h5><ul><li>网站</li></ul><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>title</td><td>网站的标题</td></tr><tr><td>subtitle</td><td>网站的副标题</td></tr><tr><td>description</td><td>网站的描述</td></tr><tr><td>author</td><td>你的名字</td></tr><tr><td>language</td><td>网站使用的语言(中文：zh-CN)</td></tr><tr><td>timezone</td><td>时区，默认电脑时区</td></tr><tr><td>theme</td><td>主题</td></tr></tbody></table><blockquote><p>emmm，你先就改改这几个就可以了，那有些我下次有机会在分享，或者你现在一定要专研，你可以看看这个 <a href="https://blog.csdn.net/gyq1998/article/details/78294689" target="_blank" rel="noopener">博客</a>，修改大致如下：</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/3.jpg" alt="setting"></p><p>现在你应该看上去又舒服了点，有了自己的网站名，和简单的自我描述，但是我没有头像很难受，下面我就讲一哈头像的设置</p><h5 id="3-头像的设置和网站图标设置"><a href="#3-头像的设置和网站图标设置" class="headerlink" title="3.头像的设置和网站图标设置"></a>3.头像的设置和网站图标设置</h5><blockquote><p>可能是我愚钝，我使用的方法是直接在源文件中修改，暴力解决，找到themes-&gt;yilia-&gt;layout-&gt;_partial文件夹下，修改left-col.ejs文件</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/4.jpg" alt="layout"></p><blockquote><p>然后修改，其中的属性。头像地址有了，当然是去目标文件夹下放图片啦，放在public-&gt;img文件夹下，修改头像路径(是你的头像名称啊~~)，截图如下：</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/6.jpg" alt="img"></p><p><img src="http://lightfisher.github.io/img/hexo2/5.jpg" alt="avatar"></p><blockquote><p>再然后就是网站图标的设置了，如果你没有ico图标文件，你可以去<a href="http://www.bitbug.net/" target="_blank" rel="noopener">比特虫</a>做个你喜欢的图标，然后放在Hexo\public\img文件夹下，和上面一样。至于，这个网站图标的设置当然还是暴力解决啦，找到themes\yilia\layout_partial\head.ejs，修改如下代码(你的图标名字啊~~)：</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/8.jpg" alt="img"></p><p><img src="http://lightfisher.github.io/img/hexo2/7.jpg" alt="img"></p><blockquote><p>你先<code>hexo g</code>然后启动hexo服务<code>hexo s</code>看看效果(如果端口冲突,用<code>hexo s -p +你的端口号</code>),我成功截图如下</p></blockquote><p><img src="http://pjas65wzi.bkt.clouddn.com/hexo122.jpg" alt="img"></p><p>移动端也可以</p><p><img src="http://lightfisher.github.io/img/hexo2/9.jpg" alt="img"></p><h5 id="4-主题的配置"><a href="#4-主题的配置" class="headerlink" title="4.主题的配置"></a>4.主题的配置</h5><blockquote><p>这个是我最想吐槽的，我上网查询的时候都是说<code>_config.yml</code>文件，虽说没有错，但是，没说哪个，要知道，一个是站点的，也就是你创建那个博客文件目录下。但其实，是要修改themes\yilia文件夹下的<code>_config.yml</code>文件，=。=我还是无聊看主题的布局文件的时候看到的=。=</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/10.jpg" alt="img"></p><blockquote><p>然后就是对其中文件的修改和理解，这里我就不阐述了，因为里面都有中文的解释，但是我还是无聊说一下吧，看见这个subnav了不，这就是为什么你点击那些什么github，简书图标没用的原因，你可以改成你想要的网址,不想要的可以注释掉，想要的当然可以取消注释=。=</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/11.jpg" alt="img"></p><blockquote><p>想加友链，你就修改如下图,名字也可以改，你也可以加加我的博客链接看看，应该可以=.=</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/12.jpg" alt="img"></p><blockquote><p>想改自己的更多描述，你可以修改aboutme</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/13.jpg" alt="img"></p><blockquote><p>这个就有点难了，就是添加 标签和分类，实现我是实现了，但是菜单那个就没有实现，看看下次我能不能更新吧，如果你想现在就简单实现，你可以看看这个<a href="https://blog.csdn.net/ganzhilin520/article/details/79047249" target="_blank" rel="noopener">博客</a>,我的问题是单击左边菜单中的分类，里面不显示，而我单机那个分类小图片反而是大致显示的(标签类似)</p></blockquote><p><img src="http://lightfisher.github.io/img/hexo2/14.jpg" alt="img"><br><br><br><img src="http://lightfisher.github.io/img/hexo2/15.jpg" alt="img"><br>单击这个<br><br><br><img src="http://lightfisher.github.io/img/hexo2/16.jpg" alt="img"><br><br><br><br><br>下次讲如何写属于自己的博客=.=<br><br><br>Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-github搭建个人博客&quot;&gt;&lt;a href=&quot;#Hexo-github搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo+github搭建个人博客&quot;&gt;&lt;/a&gt;Hexo+github搭建个人博客&lt;/h1&gt;&lt;h4 id=&quot;头像的设置和-yilia-主题的安装和简单配置&quot;&gt;&lt;a href=&quot;#头像的设置和-yilia-主题的安装和简单配置&quot; class=&quot;headerlink&quot; title=&quot;头像的设置和 yilia 主题的安装和简单配置&quot;&gt;&lt;/a&gt;头像的设置和 &lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;yilia&lt;/a&gt; 主题的安装和简单配置&lt;/h4&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="hexo搭建" scheme="http://yoursite.com/tags/hexo%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+github搭建个人博客一</title>
    <link href="http://yoursite.com/2018/12/05/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%80/"/>
    <id>http://yoursite.com/2018/12/05/Hexo-github搭建个人博客一/</id>
    <published>2018-12-05T13:33:52.000Z</published>
    <updated>2018-12-06T12:52:18.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-github搭建个人博客"><a href="#Hexo-github搭建个人博客" class="headerlink" title="Hexo+github搭建个人博客"></a>Hexo+github搭建个人博客</h1><blockquote><p>一直想搭建个人博客来着，本来想用Python，Django在自己的服务器上自己搭建，忽然想起来，以前好像见过同学用过Hexo框架搭建个人博客，所以我就先用Hexo搭建看看。因为网上的教程或多或少有时候都有点参差不齐，自己也是看得脑壳疼，所以下面我简单把我这两天搭建出现的问题和方法，写成博客，就当自己练手吧。</p></blockquote><a id="more"></a><h5 id="1-环境的搭建-node-js-git的安装"><a href="#1-环境的搭建-node-js-git的安装" class="headerlink" title="1.环境的搭建 node.js  git的安装"></a>1.环境的搭建 node.js  git的安装</h5><p>这些依赖环境的安装，相信网上别的CSDN博客都有，也肯定写得比我好，我就不献丑了-.-,下面是我觉得写的蛮好的<br><br><br>NodeJS的安装<a href="https://blog.csdn.net/muzidigbig/article/details/80493880" target="_blank" rel="noopener">教程</a><br><br><br>Git 的安装<a href="https://blog.csdn.net/it_hfzj/article/details/80693965" target="_blank" rel="noopener">教程</a><br><br><br><img src="/img/hexo1/1.jpg" alt="nodejs"></p><p><img src="https://lightfisher.github.io/img/hexo1/2.jpg" alt="git"><br><br>以上是nodejs和git的安装成功截图</p><h5 id="2-github的注册"><a href="#2-github的注册" class="headerlink" title="2.github的注册"></a>2.github的注册</h5><pre><code>emmm，相信这些那么应该都有了吧，我就不进行这些无聊的操作了，我就讲一下注册完后的操作吧。注册完后，你得创建一个存储库，名字就是你 username.github.io (username是你注册的名字)</code></pre><p><img src="https://lightfisher.github.io/img/hexo1/3.jpg" alt="emm"></p><p>如上</p><h5 id="3-Hexo的安装"><a href="#3-Hexo的安装" class="headerlink" title="3.Hexo的安装"></a>3.Hexo的安装</h5><ul><li>1.首先你要先进入git bash界面(应该桌面右键就有了，如果没有，你进入到开始菜单那里找到git，下面就有了)进入后的界面如下</li></ul><p><img src="https://lightfisher.github.io/img/hexo1/4.jpg" alt="git bash"></p><ul><li>然后全局配置设置到淘宝源<br></li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> registry <span class="comment">https:</span>//<span class="comment">registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><p><img src="https://lightfisher.github.io/img/hexo1/5.jpg" alt="registry"></p><ul><li>全局设置 user.email 和user.name<br></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"your_emaill"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"your_name"</span></span><br></pre></td></tr></table></figure><p>这里的<code>your_email</code>和<code>your_name</code>就是你注册github的邮箱和用户名，截图如下：<br></p><p><img src="https://lightfisher.github.io/img/hexo1/6.jpg" alt="git config"></p><ul><li>生成ssh密钥</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.ssh</span> </span><br><span class="line">ssh-keygen -t rsa -C “your_email” <span class="comment">#打自己的邮箱</span></span><br></pre></td></tr></table></figure><p><img src="https://lightfisher.github.io/img/hexo1/7.jpg" alt="ssh-key"></p><ul><li>设置ssh key到GitHub 默认生成ssh key在C:\Users\username.ssh文件夹中，复制 id_rsa.pub文件到 github-&gt;settings-&gt;SSH and GPG key-&gt;new ssh key 如图 </li></ul><p><img src="https://lightfisher.github.io/img/hexo1/8.jpg" alt="img"></p><p><img src="https://lightfisher.github.io/img/hexo1/9.jpg" alt="setting"></p><p><img src="https://lightfisher.github.io/img/hexo1/10.jpg" alt="img"></p><p><img src="https://lightfisher.github.io/img/hexo1/11.jpg" alt="img"></p><p><img src="https://lightfisher.github.io/img/hexo1/12.jpg" alt="img"></p><ul><li>检查ssh设置是否成功<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://lightfisher.github.io/img/hexo1/13.jpg" alt="check ssh"></p><h5 id="4-安装hexo插件"><a href="#4-安装hexo插件" class="headerlink" title="4.安装hexo插件"></a>4.安装hexo插件</h5><ul><li>输入以下代码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> / <span class="comment">#进入根目录，实际上就是git安装的根目录</span></span><br><span class="line"><span class="built_in">pwd</span> /</span><br><span class="line">npm install hexo-cli -g <span class="comment">#安装hexo</span></span><br></pre></td></tr></table></figure><p><img src="https://lightfisher.github.io/img/hexo1/14.jpg" alt="install hexo"></p><ul><li>安装以后呢，你可以输入以下代码</li></ul><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line">hexo init Hexo #我认为就是创建了一个他的项目框架</span><br><span class="line">cd Hexo #进入你创建的那个目录</span><br><span class="line">npm install</span><br><span class="line">hexo generate <span class="function"><span class="keyword">#</span><span class="params">(可简写成 <span class="variable">hexo</span> <span class="variable">g</span>)</span></span></span><br><span class="line">hexo server <span class="function"><span class="keyword">#</span><span class="params">(可简写成 <span class="variable">hexo</span> <span class="variable">s</span>)</span></span></span><br></pre></td></tr></table></figure><p>由于我懒得重新创了，我就用网上别人的截图，下面我会注明</p><p><img src="https://lightfisher.github.io/img/hexo1/15.jpg" alt="img"></p><p><img src="https://lightfisher.github.io/img/hexo1/16.jpg" alt="img"></p><p><img src="https://lightfisher.github.io/img/hexo1/17.jpg" alt="img"></p><p>emmm，上面我之所以我输入hexo s -p 4005，相信聪明的人已经看出来了，因为默认4000被占用了，所以输入-p+端口号，后面这个-d相当于debug模式，基本不用管</p><ul><li>到现在为止你已经完成了hexo的基本配置，你可以输入下面那个本地网址进行查看 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>,相信你一定是下面这张图，如果不是打电话联系，咳，开玩笑，如果真的出错，emmmm，下次我开个评论 TAT</li></ul><p><img src="https://lightfisher.github.io/img/hexo1/18.jpg" alt="img"></p><h5 id="5-上传到自己的github"><a href="#5-上传到自己的github" class="headerlink" title="5.上传到自己的github"></a>5.上传到自己的github</h5><ul><li>首先安装部署到github插件依赖</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> –<span class="keyword">save</span> hexo-deployer-git</span><br></pre></td></tr></table></figure><p><img src="https://lightfisher.github.io/img/hexo1/20.jpg" alt="img"></p><ul><li>打开你创建的项目下的配置文件(如果你跟着我做的话，应该是Hexo)</li></ul><p><img src="https://lightfisher.github.io/img/hexo1/21.jpg" alt="img"></p><ul><li>然后修改其中的配置</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> git@github.com:lightfisher/lightfisher.github.io.git  <span class="meta">#改成自己的用户名和用户名加域名</span></span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure><ul><li>然后在部署到你的github<br></li></ul><p><code>hexo deploy</code>可以简写成<code>hexo d</code>,代码我就不贴了</p><ul><li>这是最关键的，你可以登上自己的网址<code>your_name.github.io</code>,your_name是你的github用户名。你可能要等个十几分钟，才可以看见,下面是我自己的博客</li></ul><p><img src="https://lightfisher.github.io/img/hexo1/22.jpg" alt="finish"></p><p><br><br><br><br>以上就是hexo+github的基本搭建，有空我会写，其他的配置，如,主题的配置，头像的设置，标签和分类的设置引用，第三发插件的设置等。<br><br>So，Just have fun…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-github搭建个人博客&quot;&gt;&lt;a href=&quot;#Hexo-github搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo+github搭建个人博客&quot;&gt;&lt;/a&gt;Hexo+github搭建个人博客&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一直想搭建个人博客来着，本来想用Python，Django在自己的服务器上自己搭建，忽然想起来，以前好像见过同学用过Hexo框架搭建个人博客，所以我就先用Hexo搭建看看。因为网上的教程或多或少有时候都有点参差不齐，自己也是看得脑壳疼，所以下面我简单把我这两天搭建出现的问题和方法，写成博客，就当自己练手吧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="hexo搭建" scheme="http://yoursite.com/tags/hexo%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Python入门问题</title>
    <link href="http://yoursite.com/2018/12/04/Python%E5%85%A5%E9%97%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/12/04/Python入门问题/</id>
    <published>2018-12-04T14:35:40.000Z</published>
    <updated>2018-12-06T12:48:15.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础要点一"><a href="#Python基础要点一" class="headerlink" title="Python基础要点一"></a>Python基础要点一</h1><h3 id="1-一行代码实现1–100之和"><a href="#1-一行代码实现1–100之和" class="headerlink" title="1.一行代码实现1–100之和"></a>1.一行代码实现1–100之和</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="name">range</span>(<span class="number">101</span>))</span><br></pre></td></tr></table></figure><p><img src="https://lightfisher.github.io/img/Python_question/1.jpg" alt="img"></p><a id="more"></a><h3 id="2-如何在一个函数内部修改全局变量"><a href="#2-如何在一个函数内部修改全局变量" class="headerlink" title="2.如何在一个函数内部修改全局变量"></a>2.如何在一个函数内部修改全局变量</h3><p>利用<code>global</code>修改全局变量<br></p><p><img src="https://lightfisher.github.io/img/Python_question/2.jpg" alt="global"></p><h3 id="3-列出5个Python的标准库"><a href="#3-列出5个Python的标准库" class="headerlink" title="3.列出5个Python的标准库"></a>3.列出5个Python的标准库</h3><ul><li><code>os</code>: 提供了不少于操作系统相关联的函数</li><li><code>sys</code>: 通常用于命令行参数</li><li><code>re</code>: 正则匹配</li><li><code>math</code>: 数学运算</li><li><code>datetime</code>: 处理日期时间</li></ul><h3 id="4-字典如何删除键和合并两个字典"><a href="#4-字典如何删除键和合并两个字典" class="headerlink" title="4.字典如何删除键和合并两个字典"></a>4.字典如何删除键和合并两个字典</h3><pre><code>删除用 del,合并用 update</code></pre><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'name'</span>:<span class="string">'qg'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;</span><br><span class="line">del dic[<span class="string">'name'</span>]</span><br><span class="line">dic2 = &#123;<span class="string">'name'</span>:<span class="string">'fh'</span>&#125;</span><br><span class="line">dic.<span class="keyword">update</span>(dic2)</span><br></pre></td></tr></table></figure><p><br><br><img src="https://lightfisher.github.io/img/Python_question/3.jpg" alt="del update"><br><br></p><h3 id="5-谈下python的GIL"><a href="#5-谈下python的GIL" class="headerlink" title="5.谈下python的GIL"></a>5.谈下python的GIL</h3><ul><li>GIL是Python的全局解释器锁，同一个进程加入由多个线程运行，一个线程在运行python程序的时候会霸占python解释器(加了一个锁即GIL)<br>，使进程内的其他线程无法运行，等该线程运行完后其他线程才能运行。如果线程运行过程中遇到耗时操作，则解释器锁解开，使其他线程<br>运行。所以在多线程中，线程的运行仍是有先后顺序，并不是同时运行。</li><li>多进程中因为每个进程都能被喜用分批资源，相当于每个进程有了个python解释器，多以多进程可以实现多个进程的同时运行，缺点是金城系统资源开销大</li></ul><h3 id="6-python实现列表去重的方法"><a href="#6-python实现列表去重的方法" class="headerlink" title="6.python实现列表去重的方法"></a>6.python实现列表去重的方法</h3><blockquote><p>熟悉使用<code>set</code></p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list=[np<span class="selector-class">.random</span><span class="selector-class">.randint</span>(<span class="number">10</span>,<span class="number">15</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(list)</span></span></span><br><span class="line"><span class="selector-tag">a</span> = set(list)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(a)</span></span></span><br><span class="line">[<span class="selector-tag">i</span> <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> a]</span><br></pre></td></tr></table></figure><p><br><br><img src="https://lightfisher.github.io/img/Python_question/6.jpg" alt="set"><br><br></p><h3 id="7-fun-args-kwargs-中args，-kwargs是什么意思？"><a href="#7-fun-args-kwargs-中args，-kwargs是什么意思？" class="headerlink" title="7.fun(args,**kwargs)中args，**kwargs是什么意思？"></a>7.fun(<em>args,**kwargs)中</em>args，**kwargs是什么意思？</h3><ul><li><em>args和</em>kwargs主要用于函数的定义。你可以将不定数量的参数传递给一个函数。这里的不定的意思是：预先并不知道，函数使用者会传递多少个参数给你，所以在这个场景下使用这两个关键字。*args是用来发送一个非键值对的可变数量的参数列表给一个函数。这里有一个例子</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(args_f,*args_v)</span>:</span></span><br><span class="line">    print(args_f)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> args_v:</span><br><span class="line">        print(x)</span><br><span class="line">demo(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,e<span class="string">')</span></span><br></pre></td></tr></table></figure><p><br><br><img src="https://lightfisher.github.io/img/Python_question/7.jpg" alt="*args"><br><br></p><ul><li><strong>kwargs 允许你将不定长度的键值对传递给一个函数。如果你想要一个函数里处理带名字的参数，你因该使用</strong>kwargs，这里有一个例子</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def demo(*<span class="number">*a</span>rgs_v):</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> args_v.items():</span><br><span class="line">        <span class="builtin-name">print</span>(k,v)</span><br><span class="line">demo(<span class="attribute">name</span>=<span class="string">'light'</span>,name='fish)</span><br></pre></td></tr></table></figure><p><br><br><img src="https://lightfisher.github.io/img/Python_question/7-2.jpg" alt="*kwargs"><br><br></p><h3 id="8-python2和python3的range的区别"><a href="#8-python2和python3的range的区别" class="headerlink" title="8.python2和python3的range的区别"></a>8.python2和python3的range的区别</h3><blockquote><p>python2返回一个列表，python3返回一个迭代器，节约内存</p></blockquote><h3 id="9-一句话解释什么样的语言能过用装饰器"><a href="#9-一句话解释什么样的语言能过用装饰器" class="headerlink" title="9.一句话解释什么样的语言能过用装饰器"></a>9.一句话解释什么样的语言能过用装饰器</h3><blockquote><p>函数可以作为参数传递的语言，可以使用装饰器</p></blockquote><h3 id="10-python内建函数类型有哪些"><a href="#10-python内建函数类型有哪些" class="headerlink" title="10.python内建函数类型有哪些"></a>10.python内建函数类型有哪些</h3><ul><li>整型 – <code>int</code></li><li>布尔型 – <code>bool</code></li><li>字符串 – <code>str</code></li><li>列表 – <code>list</code></li><li>元组 – <code>tuple</code></li><li>字典 – <code>dict</code></li><li>集合 – <code>set</code></li></ul><h3 id="11-简述面向对象中new和init的区别"><a href="#11-简述面向对象中new和init的区别" class="headerlink" title="11.简述面向对象中new和init的区别"></a>11.简述面向对象中<strong>new</strong>和<strong>init</strong>的区别</h3><ul><li><p><strong>init</strong>是初始化方法，创建对象后，就立刻被默认调用，相当于C语言的构造函数，可接受参数，如下图：<br><br><br><img src="https://lightfisher.github.io/img/Python_question/11-1.jpg" alt="__init__"><br><br></p></li><li><p><strong>new</strong>至少要有一个参数cls，代表是当前类，此参数在实例化的时候由Python解释器自动识别</p></li><li><strong>new</strong>必须要有返回值，返回实例化出来的实例，这点在自己实现<strong>new</strong>时要特别注意，可以return父类(通过super(当前类，cls)) <strong>new</strong>出来的实例，或者直接是object的<strong>new</strong>出来的实例</li><li><strong>init</strong>有一个参数self,就是这个<strong>new</strong>返回的实例，<strong>init</strong>在<strong>new</strong>的基础上可以完成一些其他初始化的动作，<strong>init</strong>不需要返回值</li><li>如果<strong>new</strong>创建的是当前类的实例，会自动调用<strong>init</strong>函数，通过return语句里面调用<strong>new</strong>函数的第一个参数cls来保证是当前类实例，如果是其他类的类名；那么实际创建返回的就是其他类的实例，其实就不会调用当前类的<strong>init</strong>函数，也不会调用其他类的<strong>init</strong>函数<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'这是 init 方法'</span>,self)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">'这是cls的ID'</span>,id(cls))</span><br><span class="line">        print(<span class="string">'这是 new 方法'</span>,object.__new__(cls))</span><br><span class="line">        <span class="keyword">return</span> object.__new__(cls)</span><br><span class="line">Test()</span><br><span class="line">print(<span class="string">'这是A的ID'</span>,id(Test))</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://lightfisher.github.io/img/Python_question/11.jpg" alt="__new__"></p><h3 id="12-列表-1-2-3-4-5-请使用map函数输出-1-4-9-16-25-并使用列表推导式提取出大于10的数"><a href="#12-列表-1-2-3-4-5-请使用map函数输出-1-4-9-16-25-并使用列表推导式提取出大于10的数" class="headerlink" title="12.列表[1,2,3,4,5],请使用map函数输出[1,4,9,16,25],并使用列表推导式提取出大于10的数"></a>12.列表[1,2,3,4,5],请使用map函数输出[1,4,9,16,25],并使用列表推导式提取出大于10的数</h3><ul><li><code>map()</code>函数的第一个参数是fun</li><li><code>map()</code>生成的生成器，只能使用一次<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = list(range(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line">res = map(lambda x: x**<span class="number">2</span>,list1)</span><br><span class="line">res_list = [<span class="selector-tag">i</span> <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> res <span class="keyword">if</span> <span class="selector-tag">i</span> &gt; <span class="number">10</span>]</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://lightfisher.github.io/img/Python_question/12.jpg" alt="map"></p><h3 id="13-python中生成随机数的若干方法"><a href="#13-python中生成随机数的若干方法" class="headerlink" title="13.python中生成随机数的若干方法"></a>13.python中生成随机数的若干方法</h3><ul><li>random.uniform(a,b) 闭区间取浮点数,a,b可换序</li><li>random.randint(q,b) 闭区间取整型数，a,b不可换序</li><li>random.randrange(a,b,c) b开,取a向上递增2数的随机数</li><li>random.choice(‘12345asd?”‘) 随机取数</li><li>random.sample(‘abcdefg’,3) 随机取三个数</li></ul><h3 id="14-避免转义给字符串加什么字符表示原是字符串？"><a href="#14-避免转义给字符串加什么字符表示原是字符串？" class="headerlink" title="14.避免转义给字符串加什么字符表示原是字符串？"></a>14.避免转义给字符串加什么字符表示原是字符串？</h3><ul><li><code>r</code>,表示需要原始字符串</li></ul><h3 id="15-python中断言的方法"><a href="#15-python中断言的方法" class="headerlink" title="15.python中断言的方法"></a>15.python中断言的方法</h3><ul><li>assert()方法，断言成功程序继续运行，断言失败，则程序报错<br><img src="https://lightfisher.github.io/img/Python_question/15.jpg" alt="assert"></li></ul><h3 id="16-数据库中student有重复的name，消除重复，请写sql语句"><a href="#16-数据库中student有重复的name，消除重复，请写sql语句" class="headerlink" title="16.数据库中student有重复的name，消除重复，请写sql语句"></a>16.数据库中student有重复的name，消除重复，请写sql语句</h3><pre><code>select distinct name from studnet</code></pre><h3 id="17-10个Linux常用命令"><a href="#17-10个Linux常用命令" class="headerlink" title="17.10个Linux常用命令"></a>17.10个Linux常用命令</h3><pre><code>ls pwd cd touch rm mkdir tree cp mv cat vi more echo grep</code></pre><h3 id="18-python2和python3的区别"><a href="#18-python2和python3的区别" class="headerlink" title="18.python2和python3的区别?"></a>18.python2和python3的区别?</h3><ul><li>Python3使用print必须要用小括号包裹打印内容，Python2可以使用小括号也可以空格</li><li>Python2 range(10) 返回的实列表，Python3返回的是迭代器，节约内存</li><li>Python2中使用ascii编码，Python3中使用utf-8编码</li><li>Python3中str表示字符串序列，byte表示字节序列</li><li>Python2中unicode表示字符串序列，str表示字节序列</li><li>Python2为了正常显示中文，要coding申明，Python3不需要</li><li>Python2是raw_input(),Python 是input()</li></ul><h3 id="19-列出Python中可变数据和不可变数据类型，并简述原理"><a href="#19-列出Python中可变数据和不可变数据类型，并简述原理" class="headerlink" title="19.列出Python中可变数据和不可变数据类型，并简述原理"></a>19.列出Python中可变数据和不可变数据类型，并简述原理</h3><ul><li>不可变数据类型：数值型、字符串型string和元组tuple<br>不允许变量的值发生变化，如果改变了变量的值，相当于创建了一个对象，而对于相同的值的对象，在内存中则只有一个对象(一个地址)<br><br><img src="https://lightfisher.github.io/img/Python_question/19.jpg" alt="assert"></li><li>可变数据类型：列表list和字典dict；<br>允许变量的值发生变化，而不会新建一个对象，变量引用的对象的地址也不会发生变化，不过对于相同的值的不同对象，在内存中则会存在不同的对象，即每个对象都有自己的地址，相当于内存中对于同值的对象保存了多份，这里不存在引用计数，是实实在在的对象<br><br><img src="https://lightfisher.github.io/img/Python_question/20.jpg" alt="assert"></li></ul><h3 id="20-去重并从小到大排序输出"><a href="#20-去重并从小到大排序输出" class="headerlink" title="20.去重并从小到大排序输出"></a>20.去重并从小到大排序输出</h3><ul><li>相信你肯定学过<code>set</code>集合，<code>set</code>是可以实现去重的，不失为一种好的方法，然后利用sort方法进行排序，默认参数reverse = False就是从小到大排序，为True，是从大到小</li><li><p>list是可变数据类型，所以list.sort()没有返回值，所以注释掉的代码写法不正确</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = 'amnshgisabcd'</span><br><span class="line">s = set(s)</span><br><span class="line">s = list(s)</span><br><span class="line">s.sort()</span><br><span class="line"><span class="comment"># s = s.sort()</span></span><br><span class="line">res = ''.join(s)</span><br></pre></td></tr></table></figure></li><li><p>利用集合或者生成器解决问题，去重并保持顺序</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def dupe(<span class="keyword">items</span>):</span><br><span class="line">seen = <span class="built_in">set</span>() <span class="comment">#创建一个空的集合</span></span><br><span class="line">      <span class="keyword">for</span> <span class="keyword">item</span> <span class="keyword">in</span> <span class="keyword">items</span>:</span><br><span class="line">         <span class="keyword">if</span> <span class="keyword">item</span> <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">        yield <span class="keyword">item</span></span><br><span class="line">            seen.<span class="built_in">add</span>(<span class="keyword">item</span>)</span><br><span class="line"><span class="keyword">a</span> = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line">list(dupe(<span class="keyword">a</span>))</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://lightfisher.github.io/img/Python_question/21.jpg" alt="yield"></p><ul><li>消除元素不可哈希：如字典类型</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def rem(items, key=None):</span><br><span class="line">    seen = <span class="keyword">set</span>()  <span class="comment"># 创建一个空的集合</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        va = item <span class="keyword">if</span> <span class="keyword">key</span> <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> <span class="keyword">key</span>(item)</span><br><span class="line">        <span class="keyword">if</span> va <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">            yield item</span><br><span class="line">            seen.add(va)</span><br><span class="line">a = [&#123;<span class="string">'x'</span>:<span class="number">1</span>, <span class="string">'y'</span>:<span class="number">2</span>&#125;, &#123;<span class="string">'x'</span>:<span class="number">1</span>,<span class="string">'y'</span>: <span class="number">3</span>&#125;, &#123;<span class="string">'x'</span>:<span class="number">1</span>, <span class="string">'y'</span>:<span class="number">2</span>&#125;, &#123;<span class="string">'x'</span>:<span class="number">2</span>, <span class="string">'y'</span>:<span class="number">4</span>&#125;]</span><br><span class="line"><span class="keyword">list</span>(<span class="keyword">rem</span>(a, <span class="keyword">key</span>=lambda d: (d[<span class="string">'x'</span>],d[<span class="string">'y'</span>])))</span><br></pre></td></tr></table></figure><p><img src="https://lightfisher.github.io/img/Python_question/22.jpg" alt="set"></p><h3 id="21-lambda的基本使用，字典根据键值从小到大排序，用sorted函数"><a href="#21-lambda的基本使用，字典根据键值从小到大排序，用sorted函数" class="headerlink" title="21.lambda的基本使用，字典根据键值从小到大排序，用sorted函数"></a>21.lambda的基本使用，字典根据键值从小到大排序，用sorted函数</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">'name'</span>: <span class="string">'zs'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'city'</span>: <span class="string">'杭州'</span>, <span class="string">'tel'</span>: <span class="string">'1234'</span>&#125;</span><br><span class="line">list1 = sorted(</span><br><span class="line">    dict1.<span class="built_in">keys</span>(),</span><br><span class="line">    key=lambda d: d[<span class="number">0</span>],</span><br><span class="line">    <span class="built_in">reverse</span>=False)  # <span class="built_in">reverse</span> 为True是降序</span><br><span class="line"><span class="keyword">print</span>(list1)</span><br><span class="line"><span class="keyword">print</span>(dict1.<span class="built_in">items</span>())</span><br><span class="line"><span class="keyword">print</span>(dict1.<span class="built_in">keys</span>())</span><br><span class="line"><span class="keyword">print</span>(dict1.<span class="built_in">values</span>())</span><br></pre></td></tr></table></figure><p><img src="https://lightfisher.github.io/img/Python_question/23.jpg" alt="img"></p><h3 id="22-利用collections库的Counter方法统计字符串每个单词的出现次数"><a href="#22-利用collections库的Counter方法统计字符串每个单词的出现次数" class="headerlink" title="22.利用collections库的Counter方法统计字符串每个单词的出现次数"></a>22.利用collections库的Counter方法统计字符串每个单词的出现次数</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from collections import Counter</span><br><span class="line"><span class="selector-tag">a</span> = <span class="string">'amsjdasduqwenasdlaqiasmd'</span></span><br><span class="line">res = Counter(a)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(res)</span></span></span><br></pre></td></tr></table></figure><p><img src="https://lightfisher.github.io/img/Python_question/24.jpg" alt="collection"></p><h3 id="23-filter函数的简单用法"><a href="#23-filter函数的简单用法" class="headerlink" title="23.filter函数的简单用法"></a>23.filter函数的简单用法</h3><ul><li>a = list(range(1,10)) 求出所有奇数，并构造新列表<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = list(range(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">newlist = [<span class="selector-tag">i</span> <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="attribute">filter</span>(lambda x: x % <span class="number">2</span>, a)]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(newlist)</span></span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://lightfisher.github.io/img/Python_question/25.jpg" alt="filter"></p><h3 id="24-列表推导式求上述问题"><a href="#24-列表推导式求上述问题" class="headerlink" title="24.列表推导式求上述问题"></a>24.列表推导式求上述问题</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = list(range(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line"><span class="keyword">new</span><span class="type">list</span> = [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>]</span><br><span class="line">print(<span class="keyword">new</span><span class="type">list</span>)</span><br></pre></td></tr></table></figure><h3 id="25-1-、-1-、-“1”-分别是什么类型"><a href="#25-1-、-1-、-“1”-分别是什么类型" class="headerlink" title="25. (1,)、(1)、(“1”)分别是什么类型"></a>25. (1,)、(1)、(“1”)分别是什么类型</h3><ul><li>(1) 是int类型</li><li>(“1”) 是str类型</li><li>(1,) 是元组类型</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python基础要点一&quot;&gt;&lt;a href=&quot;#Python基础要点一&quot; class=&quot;headerlink&quot; title=&quot;Python基础要点一&quot;&gt;&lt;/a&gt;Python基础要点一&lt;/h1&gt;&lt;h3 id=&quot;1-一行代码实现1–100之和&quot;&gt;&lt;a href=&quot;#1-一行代码实现1–100之和&quot; class=&quot;headerlink&quot; title=&quot;1.一行代码实现1–100之和&quot;&gt;&lt;/a&gt;1.一行代码实现1–100之和&lt;/h3&gt;&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sum(&lt;span class=&quot;name&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;101&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://lightfisher.github.io/img/Python_question/1.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/2018/12/04/test/"/>
    <id>http://yoursite.com/2018/12/04/test/</id>
    <published>2018-12-04T13:18:00.000Z</published>
    <updated>2018-12-05T10:37:25.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="这是一个简单的测试blog"><a href="#这是一个简单的测试blog" class="headerlink" title="这是一个简单的测试blog"></a>这是一个简单的测试blog</h3><p><a href="https://www.baidu.com" target="_blank" rel="noopener">emm</a><br><br></p><h2 id="Yoona"><a href="#Yoona" class="headerlink" title="Yoona"></a>Yoona</h2><a id="more"></a><p><img src="https://lightfisher.github.io/img/test/10.jpg" alt="Yoona"></p><p><a href="https://postimg.cc/YvcztZCR" target="_blank" rel="noopener"><img src="https://i.postimg.cc/L85C3Mdc/10.jpg" alt="10.jpg"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;这是一个简单的测试blog&quot;&gt;&lt;a href=&quot;#这是一个简单的测试blog&quot; class=&quot;headerlink&quot; title=&quot;这是一个简单的测试blog&quot;&gt;&lt;/a&gt;这是一个简单的测试blog&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;emm&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Yoona&quot;&gt;&lt;a href=&quot;#Yoona&quot; class=&quot;headerlink&quot; title=&quot;Yoona&quot;&gt;&lt;/a&gt;Yoona&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
